<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DevComponents.TreeGX</name>
    </assembly>
    <members>
        <member name="T:DevComponents.Tree.Cell">
            <summary>Represents a cell assigned to the Node.</summary>
            <remarks>
            	<para>The Cell with Index 0 (zero) always exists for a Node and it is a cell that
                you can interact with through the properties on a node, which are forwarding to the
                Cell(0), or you can go directly to the Cell(0).</para>
            	<para>When Node has multiple columns defined each column corresponds to Cell in
                Node's Cells collection. The first Column has Index 0, second Column Index 1 and so
                forth.</para>
            	<para>Note that there is always at least one Cell in a Node even if multiple
                columns are not used.</para>
            </remarks>
        </member>
        <member name="M:DevComponents.Tree.Cell.#ctor">
            <summary>
            Initializes new instance of Cell class.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Cell.#ctor(System.String)">
            <summary>
            Initializes new instance of Cell class.
            </summary>
            <param name="text">Cell text.</param>
        </member>
        <member name="M:DevComponents.Tree.Cell.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the Component.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:DevComponents.Tree.Cell.SetBounds(System.Drawing.Rectangle)">
            <summary>
            Sets the bounds of the cell.
            </summary>
            <param name="bounds">New cell bounds.</param>
        </member>
        <member name="M:DevComponents.Tree.Cell.SetImageBounds(System.Drawing.Rectangle)">
            <summary>
            Sets the bounds of the image inside of the cell.
            </summary>
            <param name="bounds">New cell bounds.</param>
        </member>
        <member name="M:DevComponents.Tree.Cell.SetCheckBoxBounds(System.Drawing.Rectangle)">
            <summary>
            Sets the bounds of the check box inside of the cell.
            </summary>
            <param name="bounds">New cell bounds.</param>
        </member>
        <member name="M:DevComponents.Tree.Cell.SetVisible(System.Boolean)">
            <summary>
            Sets whether cells is visible or not. This is set by node layout manager and it is based on column visibility.
            </summary>
            <param name="visible">True if visible otherwise false.</param>
        </member>
        <member name="M:DevComponents.Tree.Cell.SetParent(DevComponents.Tree.Node)">
            <summary>
            Sets the parent of the cell.
            </summary>
            <param name="parent">Parent node.</param>
        </member>
        <member name="M:DevComponents.Tree.Cell.OnTextChanged">
            <summary>
            Occurs after text has changed.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Cell.SetCellImages(DevComponents.Tree.CellImages)">
            <summary>
            Sets the Images to the new CellImages object.
            </summary>
            <param name="ci">CellImages object.</param>
        </member>
        <member name="M:DevComponents.Tree.Cell.ShouldSerializeImages">
            <summary>
            Returns whether Images property should be serialized. Used internally for windows forms designer support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Cell.SetMouseOver(System.Boolean)">
            <summary>
            Sets the mouse over flag.
            </summary>
            <param name="over">true if mouse is over the cell otherwise false.</param>
        </member>
        <member name="M:DevComponents.Tree.Cell.SetMouseDown(System.Boolean)">
            <summary>
            Sets the mouse down flag.
            </summary>
            <param name="over">true if left mouse button is pressed while over the cell otherwise false.</param>
        </member>
        <member name="M:DevComponents.Tree.Cell.Copy">
            <summary>Makes a copy of a Cell.</summary>
        </member>
        <member name="M:DevComponents.Tree.Cell.OnImageChanged">
            <summary>
            Occurs when any image property for the cell has changed.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Cell.InvokeAfterCheck">
            <summary>
            Invokes <see cref="E:DevComponents.Tree.TreeGX.AfterCheck">AfterCheck</see> event on TreeGX
            control.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Cell.OnLayoutCell">
            <summary>
            Called just before cell layout is to be performed.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Cell.TextMarkupLinkClick(System.Object,System.EventArgs)">
            <summary>
            Occurs when text markup link is clicked.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Cell.HostedControl">
            <summary>
            Gets or sets the control hosted inside of the cell.
            </summary>
            <remarks>
            	<para>When control is hosted inside of the cell, cell size is determined by the
                size of the control hosted inside of it. The cell will not display its text but it will display any image assigned
                or check box when control is hosted inside of it. The Style settings like Margin
                and Padding will still apply.</para>
            </remarks>
        </member>
        <member name="P:DevComponents.Tree.Cell.IgnoreHostedControlSizeChange">
            <summary>
            Gets or sets whether hosted control size change event is ignored.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Cell.HostedControlSize">
            <summary>
            Gets or sets the hosted control size. Property is used to correctly scale control when TreeGX.Zoom is used to zoom view.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Cell.Name">
            <summary>
            Returns name of the cell that can be used to identify it from the code.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Cell.BoundsRelative">
            <summary>
            Gets the relative bounds of the cell.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Cell.Bounds">
            <summary>
            Gets the bounds of the cell.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Cell.TextContentBounds">
            <summary>
            Gets or sets the available content bounds for the text. Text will fitted into these bounds
            but it's true location can be obtained only after it is displayed.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Cell.ImageBoundsRelative">
            <summary>
            Gets the relative bounds of the image inside of cell.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Cell.ImageBounds">
            <summary>
            Gets the bounds of the image inside of cell.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Cell.CheckBoxBoundsRelative">
            <summary>
            Gets the bounds of the image inside of cell.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Cell.CheckBoxBounds">
            <summary>
            Gets the bounds of the image inside of cell.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Cell.IsEditing">
            <summary>
            Gets a value indicating whether the cell is in an editable state. true if the cell is in editable state; otherwise, false.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Cell.IsSelected">
            <summary>
            Gets a value indicating whether the cell is in the selected state. true if the cell is in the selected state; otherwise, false.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Cell.IsVisible">
            <summary>
            Gets a value indicating whether the cell is visible. Cell is considered to be visible when it's Bounds are within the display rectangle of tree.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Cell.Parent">
            <summary>
            Gets the parent node of the current cell.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Cell.Tag">
            <summary>
            Gets or sets the object that contains data about the cell. Any Object derived type can be assigned to this property. If this property is being set through the Windows Forms designer, only text can be assigned.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Cell.TagString">
            <summary>
            Gets or sets the object that contains data about the cell. Any Object derived type can be assigned to this property. If this property is being set through the Windows Forms designer, only text can be assigned.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Cell.Text">
            <summary>
            Gets or sets the text displayed in the cell.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Cell.TreeControl">
            <summary>
            Gets the parent tree control that the cell belongs to.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Cell.StyleNormal">
            <summary>
            Gets or sets the style class assigned to the cell. Null value indicates that
            default style is used as specified on cell's parent.
            </summary>
            <value>
            Reference to the style assigned to the cell or null (VB Nothing) indicating that default
            style setting from tree control is applied. Default value is null.
            </value>
            <remarks>
            When property is set to null (VB Nothing) the style setting from parent tree
            controls is used. CellStyleNormal on TreeGX control is a root style for a cell.
            </remarks>
            <seealso cref="P:DevComponents.Tree.Cell.StyleDisabled">StyleDisabled Property</seealso>
            <seealso cref="P:DevComponents.Tree.Cell.StyleMouseDown">StyleMouseDown Property</seealso>
            <seealso cref="P:DevComponents.Tree.Cell.StyleMouseOver">StyleMouseOver Property</seealso>
            <seealso cref="P:DevComponents.Tree.Cell.StyleSelected">StyleSelected Property</seealso>
        </member>
        <member name="P:DevComponents.Tree.Cell.StyleNormalName">
            <summary>
            Gets or sets the style name used by cell. This member is provided for internal use only. To set or get the style use StyleNormal property instead.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Cell.StyleSelected">
            <summary>
            Gets or sets the style class that is to when cell is selected. Null value indicates that
            default style is used as specified on cell's parent.
            </summary>
            <value>
            Reference to the style assigned to the cell or null value indicating that default
            style setting from tree control is applied. Default is null value.
            </value>
            <remarks>
            When property is set to null value the style setting from parent tree
            controls is used. CellStyleSelected on TreeGX control is a root style for a cell.
            </remarks>
            <seealso cref="P:DevComponents.Tree.Cell.StyleNormal">StyleNormal Property</seealso>
            <seealso cref="P:DevComponents.Tree.Cell.StyleDisabled">StyleDisabled Property</seealso>
            <seealso cref="P:DevComponents.Tree.Cell.StyleMouseDown">StyleMouseDown Property</seealso>
            <seealso cref="P:DevComponents.Tree.Cell.StyleMouseOver">StyleMouseOver Property</seealso>
        </member>
        <member name="P:DevComponents.Tree.Cell.StyleSelectedName">
            <summary>
            Gets or sets the selected style name used by cell. This member is provided for internal use only. To set or get the style use StyleSelected property instead.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Cell.StyleDisabled">
            <summary>
            Gets or sets the disabled style class assigned to the cell. Null value indicates
            that default style is used as specified on cell's parent.
            </summary>
            <value>
            Reference to the style assigned to the cell or null value indicating that default
            style setting from tree control is applied. Default value is null.
            </value>
            <remarks>
            When property is set to null value the style setting from parent tree
            controls is used. CellStyleDisabled on TreeGX control is a root style for a
            cell.
            </remarks>
            <seealso cref="P:DevComponents.Tree.Cell.StyleNormal">StyleNormal Property</seealso>
            <seealso cref="P:DevComponents.Tree.Cell.StyleMouseDown">StyleMouseDown Property</seealso>
            <seealso cref="P:DevComponents.Tree.Cell.StyleMouseOver">StyleMouseOver Property</seealso>
            <seealso cref="P:DevComponents.Tree.Cell.StyleSelected">StyleSelected Property</seealso>
        </member>
        <member name="P:DevComponents.Tree.Cell.StyleDisabledName">
            <summary>
            Gets or sets the disabled style name used by cell. This member is provided for internal use only. To set or get the style use StyleDisabled property instead.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Cell.StyleMouseDown">
            <summary>
            Gets or sets the style class assigned to the cell which is applied when mouse
            button is pressed while mouse is over the cell. Null value indicates that default
            style is used as specified on cell's parent.
            </summary>
            <value>
            Reference to the style assigned to the cell or null value indicating that default
            style setting from tree control is applied. Default value is null.
            </value>
            <remarks>
            When property is set to null value style setting from parent tree
            controls is used. CellStyleMouseDown on TreeGX control is a root style for a
            cell.
            </remarks>
            <seealso cref="P:DevComponents.Tree.Cell.StyleNormal">StyleNormal Property</seealso>
            <seealso cref="P:DevComponents.Tree.Cell.StyleDisabled">StyleDisabled Property</seealso>
            <seealso cref="P:DevComponents.Tree.Cell.StyleMouseOver">StyleMouseOver Property</seealso>
            <seealso cref="P:DevComponents.Tree.Cell.StyleSelected">StyleSelected Property</seealso>
        </member>
        <member name="P:DevComponents.Tree.Cell.StyleMouseDownName">
            <summary>
            Gets or sets the mouse down style name used by cell. This member is provided for internal use only. To set or get the style use StyleMouseDown property instead.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Cell.StyleMouseOver">
            <summary>
            Gets or sets the style class assigned to the cell which is applied when mouse is
            over the cell. Null value indicates that default style is used as specified on cell's
            parent.
            </summary>
            <value>
            Reference to the style assigned to the cell or null value indicating that default
            style setting from tree control is applied. Default value is null.
            </value>
            <remarks>
            When property is set to null value the style setting from parent tree
            controls is used. CellStyleMouseOver on TreeGX control is a root style for a
            cell.
            </remarks>
            <seealso cref="P:DevComponents.Tree.Cell.StyleNormal">StyleNormal Property</seealso>
            <seealso cref="P:DevComponents.Tree.Cell.StyleDisabled">StyleDisabled Property</seealso>
            <seealso cref="P:DevComponents.Tree.Cell.StyleMouseDown">StyleMouseDown Property</seealso>
            <seealso cref="P:DevComponents.Tree.Cell.StyleSelected">StyleSelected Property</seealso>
        </member>
        <member name="P:DevComponents.Tree.Cell.StyleMouseOverName">
            <summary>
            Gets or sets the mouse over style name used by cell. This member is provided for internal use only. To set or get the style use StyleMouseOver property instead.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Cell.Enabled">
            <summary>
            Gets or sets whether cell is enabled or not.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Cell.Images">
            <summary>
            Gets the reference to images associated with this cell.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Cell.ImageAlignment">
            <summary>
            Gets or sets the image alignment in relation to the text displayed by cell.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Cell.CheckBoxAlignment">
            <summary>
            Gets or sets the checkbox alignment in relation to the text displayed by cell.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Cell.CheckBoxVisible">
            <summary>
            Gets or sets whether check box is visible inside the cell.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Cell.Checked">
            <summary>
            Gets or set a value indicating whether the check box is in the checked state.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Cell.IsMouseOver">
            <summary>
            Gets whether mouse is over the cell.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Cell.IsMouseDown">
            <summary>
            Gets whether left mouse button is pressed while over the cell.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Cell.Layout">
            <summary>
            Gets or sets the layout of the cell parts like check box, image and text. Layout can be horizontal (default)
            where parts of the cell are positioned next to each other horizontally, or vertical where
            parts of the cell are positioned on top of each other vertically.
            Alignment of the each part is controlled by alignment properties.
            </summary>
            <seealso cref="P:DevComponents.Tree.Cell.ImageAlignment">ImageAlignment Property</seealso>
            <seealso cref="P:DevComponents.Tree.Cell.CheckBoxAlignment">CheckBoxAlignment Property</seealso>
        </member>
        <member name="P:DevComponents.Tree.Cell.Cursor">
            <summary>
            Specifes the mouse cursor displayed when mouse is over the cell.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Cell.WordWrap">
            <summary>
            Gets or sets whether cell wrapped the text during the layout.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Cell.TextMarkupBody">
            <summary>
            Gets reference to parsed markup body element if text was markup otherwise returns null.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Cell.IsMarkupSupported">
            <summary>
            Gets whether item supports text markup. Default is false.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.CellCollection">
            <summary>
             A strongly-typed collection of <see cref="T:DevComponents.Tree.Cell"/> objects.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.CellCollection.#ctor">
            <summary>Creates new instance of the class.</summary>
        </member>
        <member name="M:DevComponents.Tree.CellCollection.Add(DevComponents.Tree.Cell)">
            <summary>
            Adds new object to the collection.
            </summary>
            <param name="cell">Object to add.</param>
            <returns>Index of newly added object.</returns>
        </member>
        <member name="M:DevComponents.Tree.CellCollection.Insert(System.Int32,DevComponents.Tree.Cell)">
            <summary>
            Inserts new object into the collection.
            </summary>
            <param name="index">Position of the object.</param>
            <param name="value">Object to insert.</param>
        </member>
        <member name="M:DevComponents.Tree.CellCollection.IndexOf(DevComponents.Tree.Cell)">
            <summary>
            Returns index of the object inside of the collection.
            </summary>
            <param name="value">Reference to the object.</param>
            <returns>Index of the object.</returns>
        </member>
        <member name="M:DevComponents.Tree.CellCollection.Contains(DevComponents.Tree.Cell)">
            <summary>
            Returns whether collection contains specified object.
            </summary>
            <param name="value">Object to look for.</param>
            <returns>true if object is part of the collection, otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.CellCollection.Remove(DevComponents.Tree.Cell)">
            <summary>
            Removes specified object from the collection.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:DevComponents.Tree.CellCollection.CopyTo(DevComponents.Tree.Cell[],System.Int32)">
            <summary>
            Copies collection into the specified array.
            </summary>
            <param name="array">Array to copy collection to.</param>
            <param name="index">Starting index.</param>
        </member>
        <member name="M:DevComponents.Tree.CellCollection.CopyTo(DevComponents.Tree.Cell[])">
            <summary>
            Copies contained items to the Cell array.
            </summary>
            <param name="array">Array to copy to.</param>
        </member>
        <member name="M:DevComponents.Tree.CellCollection.SetParentNode(DevComponents.Tree.Node)">
            <summary>
            Sets the node collection belongs to.
            </summary>
            <param name="parent">Cell that is parent of this collection.</param>
        </member>
        <member name="P:DevComponents.Tree.CellCollection.Item(System.Int32)">
            <summary>
            Returns reference to the object in collection based on it's index.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.CellCollection.ParentNode">
            <summary>
            Gets or sets the node this collection is associated with.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.CellCollectionEditor">
            <summary>
            Support for Cell tabs design-time editor.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.CellCollectionEditor.#ctor(System.Type)">
            <summary>Creates new instance of cell collection editor.</summary>
            <param name="type">Type to initialize editor with.</param>
        </member>
        <member name="T:DevComponents.Tree.CellEditEventArgs">
            <summary>
            Represents event arguments for cell editing events.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.CellEditEventArgs.Action">
            <summary>
            Indicates the action that caused the event.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.CellEditEventArgs.Cell">
            <summary>
            Indicates the cell that is affected.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.CellEditEventArgs.NewText">
            <summary>
            Indicates new text that will be assigned to the cell if one is appropriate for given event.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.CellEditEventArgs.Cancel">
            <summary>
            Indicates whether the current action is cancelled. For BeforeCellEdit event setting this
            property to true will cancel the editing. For AfterCellEdit event setting this property to
            true will cancel any changes made to the text and edits will not be accepted. For CellEditEnding
            event setting this property to true will keep the cell in edit mode.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.CellEditEventArgs.#ctor(DevComponents.Tree.Cell,DevComponents.Tree.eTreeAction,System.String)">
            <summary>
            Initializes new instance of CellEditEventArgs class.
            </summary>
            <param name="cell">Reference to Cell this event is raised for.</param>
            <param name="action">Indicates the action that caused the event.</param>
            <param name="newText">Indicates new text of the cell if it applies to given event.</param>
        </member>
        <member name="T:DevComponents.Tree.CellImages">
            <summary>
            Represents class that holds images for a cell.
            </summary>
            <remarks>
            If you plan to use alpha-blended images we recommend using PNG-24 format which
            supports alpha-blending. As of this writting .NET Framework 1.0 and 1.1 do not support
            alpha-blending when used through Image class.
            </remarks>
        </member>
        <member name="M:DevComponents.Tree.CellImages.#ctor(DevComponents.Tree.Cell)">
            <summary>
            Initializes new instance of CellImages class.
            </summary>
            <param name="parentCell">Reference to parent cell.</param>
        </member>
        <member name="M:DevComponents.Tree.CellImages.ResetImage">
            <summary>
            Resets Image property to it's default value (null, VB nothing).
            </summary>
        </member>
        <member name="M:DevComponents.Tree.CellImages.ResetImageMouseOver">
            <summary>
            Resets ImageMouseOver to it's default value (null, VB nothing).
            </summary>
        </member>
        <member name="M:DevComponents.Tree.CellImages.ResetImageExpanded">
            <summary>
            Resets ImageExpanded to it's default value (null, VB nothing).
            </summary>
        </member>
        <member name="M:DevComponents.Tree.CellImages.Copy">
            <summary>Makes a copy of a CellImages object.</summary>
        </member>
        <member name="M:DevComponents.Tree.CellImages.GetImageByIndex(System.Int32)">
            <summary>
            Returns image from image list based on the image index.
            </summary>
            <param name="imageIndex">Index of the image to return.</param>
            <returns>Image object from image list.</returns>
        </member>
        <member name="P:DevComponents.Tree.CellImages.Image">
            <summary>
            Gets or sets default cell image. Setting this property to valid image will
            override any setting of ImageIndex property.
            </summary>
            <remarks>
            	<para>The image set through this property will be serialized with the cell. If you
                plan to use ImageList then use <see cref="P:DevComponents.Tree.CellImages.ImageIndex">ImageIndex</see>
                property.</para>
            	<para>
            		<para>If you plan to use alpha-blended images we recommend using PNG-24 format
                    which supports alpha-blending. As of this writting .NET Framework 1.0 and 1.1
                    do not support alpha-blending when used through Image class.</para>
            	</para>
            </remarks>
            <value>Image object or <strong>null (Nothing)</strong> if no image is assigned.</value>
        </member>
        <member name="P:DevComponents.Tree.CellImages.ImageMouseOver">
            <summary>
            Gets or sets the image that is displayed when mouse is over the cell. Setting
            this property to valid image will override any setting of ImageMouseOverIndex
            property.
            </summary>
            <remarks>
            If you plan to use alpha-blended images we recommend using PNG-24 format which
            supports alpha-blending. As of this writting .NET Framework 1.0 and 1.1 do not support
            alpha-blending when used through Image class.
            </remarks>
        </member>
        <member name="P:DevComponents.Tree.CellImages.ImageExpanded">
            <summary>
            Gets or sets image that is displayed when Node that this cell belongs to is
            expanded. Setting this property to valid image will override any setting of
            ImageExpandedIndex property.
            </summary>
            <remarks>
            If you plan to use alpha-blended images we recommend using PNG-24 format which
            supports alpha-blending. As of this writting .NET Framework 1.0 and 1.1 do not support
            alpha-blending when used through Image class.
            </remarks>
        </member>
        <member name="P:DevComponents.Tree.CellImages.ImageIndex">
            <summary>
            Gets or sets the Index of default cell image from ImageList specified on TreeGX
            control.
            </summary>
            <remarks>
            If you plan to use alpha-blended images we recommend using PNG-24 format which
            supports alpha-blending. As of this writting .NET Framework 1.0 and 1.1 do not support
            alpha-blending when used through Image class.
            </remarks>
        </member>
        <member name="P:DevComponents.Tree.CellImages.ImageList">
            <summary>
            Property Editor support for ImageIndex selection
            </summary>
        </member>
        <member name="P:DevComponents.Tree.CellImages.ImageMouseOverIndex">
            <remarks>
            If you plan to use alpha-blended images we recommend using PNG-24 format which
            supports alpha-blending. As of this writting .NET Framework 1.0 and 1.1 do not support
            alpha-blending when used through Image class.
            </remarks>
            <summary>
            Gets or sets the Index of cell image when mouse is over the cell from ImageList
            specified on TreeGX control.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.CellImages.ImageExpandedIndex">
            <remarks>
            If you plan to use alpha-blended images we recommend using PNG-24 format which
            supports alpha-blending. As of this writting .NET Framework 1.0 and 1.1 do not support
            alpha-blending when used through Image class.
            </remarks>
            <summary>
            Gets or sets the Index of cell image from ImageList specified on TreeGX control
            that is used when Node associated with this cell is expanded
            </summary>
        </member>
        <member name="P:DevComponents.Tree.CellImages.Parent">
            <summary>
            Gets or sets the parent node of the cell.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.CellImages.ShouldSerialize">
            <summary>
            Gets whether CellImages object should be serialized or not. If object has all
            default values then this property will return <strong>false</strong>.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.CellImages.LargestImageSize">
            <summary>
            Returns largest image size in this set of images.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.ColorFunctions">
            <summary>
            Represents the class that provides color support to ColorScheme object.
            </summary>
        </member>
        <member name="T:DevComponents.UI.ColorPicker">
            <summary>
            Provides popup color picker.
            </summary>
        </member>
        <member name="F:DevComponents.UI.ColorPicker.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevComponents.UI.ColorPicker.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevComponents.UI.ColorPicker.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:DevComponents.UI.ColorPicker.EditorService">
            <summary>
            Gets or sets the windows forms editor service. This property must be set if color picker is used with UITypeEditorEditStyle.DropDown style.
            </summary>
        </member>
        <member name="P:DevComponents.UI.ColorPicker.ColorScheme">
            <summary>
            Gets or sets the ColorScheme object for Scheme colors.
            </summary>
        </member>
        <member name="P:DevComponents.UI.ColorPicker.SelectedColor">
            <summary>
            Gets or sets currently selected color.
            </summary>
        </member>
        <member name="P:DevComponents.UI.ColorPicker.SelectedColorSchemeName">
            <summary>
            Gets the selected color color scheme name if color scheme color is selected otherwise it returns an empty string.
            </summary>
        </member>
        <member name="P:DevComponents.UI.ColorPicker.Canceled">
            <summary>
            Returns true if color selection was cancelled.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.ColorScheme">
            <summary>
            Represents the Color scheme used by items on the Bar.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.#ctor">
            <summary>
            Initializes new instance of ColorScheme class.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.#ctor(System.Drawing.Graphics)">
            <summary>
            Initializes new instance of ColorScheme class.
            </summary>
            <param name="graphics">Reference to graphics object.</param>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.#ctor(DevComponents.Tree.eColorSchemeStyle)">
            <summary>
            Initializes new instance of ColorScheme class.
            </summary>
            <param name="style">Style to initialize color scheme with.</param>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeMenuBarBackground">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeMenuBarBackground2">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeBarBackground">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeBarBackground2">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeBarCaptionBackground">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeBarCaptionBackground2">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeBarCaptionText">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeBarCaptionInactiveBackground">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeBarCaptionInactiveBackground2">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeBarCaptionInactiveText">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeBarPopupBackground">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeBarPopupBorder">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeBarDockedBorder">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeBarStripeColor">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeBarFloatingBorder">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeItemBackground">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeItemBackground2">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeItemText">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeItemDisabledBackground">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeItemDisabledText">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeItemHotBackground">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeItemHotBackground2">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeItemHotText">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeItemHotBorder">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeItemPressedBackground">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeItemPressedBackground2">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeItemPressedText">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeItemPressedBorder">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeItemSeparator">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeItemSeparatorShade">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeItemExpandedShadow">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeItemExpandedBackground">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeItemExpandedBackground2">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeItemExpandedText">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeItemExpandedBorder">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeItemCheckedBackground">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeItemCheckedBackground2">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeItemCheckedBorder">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeItemCheckedText">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeCustomizeBackground">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeCustomizeBackground2">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeCustomizeText">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeMenuBorder">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeMenuBackground">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeMenuBackground2">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeMenuSide">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeMenuSide2">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeMenuUnusedBackground">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeMenuUnusedSide">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeMenuUnusedSide2">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeItemDesignTimeBorder">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializePanelBackground">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializePanelBackground2">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializePanelBorder">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializePanelText">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeExplorerBarBackground">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ShouldSerializeExplorerBarBackground2">
            <summary>
            Gets whether property should be serialized. Used by windows forms designer.
            </summary>
            <returns>True if property should be serialized otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.Refresh">
            <summary>
            Refreshes all automatically generated colors.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.ResetChangedFlag">
            <summary>
            Resets all changed flags.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.Refresh(System.Drawing.Graphics,System.Boolean)">
            <summary>
            Refreshes all automatically generated colors.
            </summary>
            <param name="graphics">Reference to graphics object.</param>
            <param name="bSystemColorEvent">Indicates whether refresh is caused by system event.</param>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.SchemeXpBlueVS2005">
            <summary>
            VS.NET 2005 Blue Color Scheme
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.GetColor(System.Int32)">
            <summary>
            Converts hex string to Color type.
            </summary>
            <param name="rgb">Color representation as 32-bit RGB value.</param>
            <returns>Reference to Color object.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.Serialize(System.Xml.XmlElement)">
            <summary>
            Serializes the color scheme object.
            </summary>
            <param name="xmlElem">XmlElement to serialize the object to.</param>
        </member>
        <member name="M:DevComponents.Tree.ColorScheme.Deserialize(System.Xml.XmlElement)">
            <summary>
            Deserializes color scheme object from XmlElement.
            </summary>
            <param name="xmlElem">Element to deserialize color scheme from.</param>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.MenuBarBackground">
            <summary>
            Specifies the menu bar background color.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.MenuBarBackground2">
            <summary>
            Specifies the target menu bar gradient background color.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.MenuBarBackgroundGradientAngle">
            <summary>
            Specifies the gradient angle.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.BarBackground">
            <summary>
            Specifies the background color for the bar when floating or when docked.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.BarBackground2">
            <summary>
            Specifies the target gradient background color for the bar when floating or when docked.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.BarBackgroundGradientAngle">
            <summary>
            Specifies the gradient angle.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.BarCaptionBackground">
            <summary>
            Specifies the background color for the bar Caption.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.BarCaptionBackground2">
            <summary>
            Specifies the target gradient background color for the bar Caption.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.BarCaptionBackgroundGradientAngle">
            <summary>
            Specifies the gradient angle.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.BarCaptionText">
            <summary>
            Specifies the color for text of the Caption.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.BarCaptionInactiveBackground">
            <summary>
            Specifies the Bar Caption inactive (lost focus) background color.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.BarCaptionInactiveBackground2">
            <summary>
            Specifies the target background gradient Bar Caption inactive (lost focus) color.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.BarCaptionInactiveBackgroundGAngle">
            <summary>
            Specifies the gradient angle.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.BarCaptionInactiveText">
            <summary>
            Specifies the Bar inactive (lost focus) text color.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.BarPopupBackground">
            <summary>
            Specifies the background color for popup bars.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.BarPopupBorder">
            <summary>
            Specifies the border color for popup bars.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.BarDockedBorder">
            <summary>
            Specifies the border color for docked bars.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.BarStripeColor">
            <summary>
            Specifies the color of the grab handle stripes.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.BarFloatingBorder">
            <summary>
             Specifies the border color for floating bars.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.ItemBackground">
            <summary>
            Specifies the item background color.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.ItemBackground2">
            <summary>
            Specifies the target item background gradient color.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.ItemBackgroundGradientAngle">
            <summary>
            Specifies the gradient angle.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.ItemText">
            <summary>
            Specifies the item text color.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.ItemDisabledBackground">
            <summary>
            Specifies the background color for the item that is disabled.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.ItemDisabledText">
            <summary>
            Specifies the text color for the item that is disabled.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.ItemHotBackground">
            <summary>
            Specifies the background color when mouse is over the item.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.ItemHotBackground2">
            <summary>
            Specifies the target gradient background color when mouse is over the item.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.ItemHotBackgroundGradientAngle">
            <summary>
            Specifies the gradient angle.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.ItemHotText">
            <summary>
            Specifies the text color when mouse is over the item.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.ItemHotBorder">
            <summary>
            Specifies the border color when mouse is over the item.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.ItemPressedBackground">
            <summary>
            Specifies the background color when item is pressed.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.ItemPressedBackground2">
            <summary>
            Specifies the target gradient background color when item is pressed.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.ItemPressedBackgroundGradientAngle">
            <summary>
            Specifies the gradient angle.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.ItemPressedText">
            <summary>
            Specifies the text color when item is pressed.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.ItemPressedBorder">
            <summary>
            Specifies the border color when item is pressed.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.ItemSeparator">
            <summary>
            Specifies the color for the item group separator.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.ItemSeparatorShade">
            <summary>
            Specifies the color for the item group separator shade.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.ItemExpandedShadow">
            <summary>
            Specifies the background color for the shadow of expanded item.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.ItemExpandedBackground">
            <summary>
            Specifies the background color for the expanded item.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.ItemExpandedBackground2">
            <summary>
            Specifies the target gradient background color for the expanded item.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.ItemExpandedBackgroundGradientAngle">
            <summary>
            Specifies the gradient angle.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.ItemExpandedText">
            <summary>
            Specifies the text color for the expanded item.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.ItemExpandedBorder">
            <summary>
            Specifies the border color for the expanded item.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.ItemCheckedBackground">
            <summary>
            Specifies the background color for the checked item.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.ItemCheckedBackground2">
            <summary>
            Specifies the target gradient background color for the checked item.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.ItemCheckedBackgroundGradientAngle">
            <summary>
            Specifies the gradient angle.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.ItemCheckedBorder">
            <summary>
            Specifies the border color for the checked item.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.ItemCheckedText">
            <summary>
            Specifies the text color for the checked item.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.CustomizeBackground">
            <summary>
            Specifies the customize item background color. Applies to Office2003 style only.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.CustomizeBackground2">
            <summary>
            Specifies the customize item target gradient background color. Applies to Office2003 style only.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.CustomizeBackgroundGradientAngle">
            <summary>
            Specifies the customize item background color gradient angle. Applies to Office2003 style only.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.CustomizeText">
            <summary>
            Specifies the customize item text color. Applies to Office2003 style only.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.MenuBorder">
            <summary>
            Specifies the color of the menu border.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.MenuBackground">
            <summary>
            Specifies the background color of the menu.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.MenuBackground2">
            <summary>
            Specifies the target gradient background color of the menu.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.MenuBackgroundGradientAngle">
            <summary>
            Specifies the angle of the gradient fill for the menu background.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.MenuSide">
            <summary>
            Specifies the background color of the menu part (left side)  that is showing the images.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.MenuSide2">
            <summary>
            Specifies the target gradient background color of the menu part (left side)  that is showing the images.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.MenuSideGradientAngle">
            <summary>
            Specifies the angle of the gradient fill for the menu part (left side) that is showing the images.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.MenuUnusedBackground">
            <summary>
            Specifies the background color for the items that were not recently used.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.MenuUnusedSide">
            <summary>
            Specifies the side bar color for the items that were not recently used.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.MenuUnusedSide2">
            <summary>
            Specifies the target gradient side bar color for the items that were not recently used.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.MenuUnusedSideGradientAngle">
            <summary>
            Specifies the angle of the gradient fill for the menu part (left side) that is showing the images.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.ItemDesignTimeBorder">
            <summary>
            Specifies the border color for focused design-time item.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.PredefinedColorScheme">
            <summary>
            Gets or sets predefined color scheme. By default DotNetBar will automatically change and generate color scheme depending on system colors.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.PanelBackground">
            <summary>
            Specifies the background color of the panel.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.PanelBackground2">
            <summary>
            Specifies the target background gradient color of the panel.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.PanelBackgroundGradientAngle">
            <summary>
            Specifies the angle of the gradient fill for the panel background.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.PanelBorder">
            <summary>
            Specifies border color of the panel.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.PanelText">
            <summary>
            Specifies color of the text on the panel.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.ExplorerBarBackground">
            <summary>
            Specifies the background color of the explorer bar.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.ExplorerBarBackground2">
            <summary>
            Specifies the target gradient background color of the explorer bar.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.ExplorerBarBackgroundGradientAngle">
            <summary>
            Specifies the angle of the gradient fill for the explorer bar background.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColorScheme.SchemeChanged">
            <summary>
            Gets whether color scheme object has been changed.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.ePredefinedColorScheme">
            <summary>
            Specifies the type of predefined color scheme in ColorScheme object.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.ePredefinedColorScheme.AutoGenerated">
            <summary>
            Default value. DotNetBar will automatically change and generate color scheme depending on system colors.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.ePredefinedColorScheme.Blue2003">
            <summary>
            Blue Office 2003 Color Scheme. This setting specifies that this color scheme will be used regardless of system color setting on user machine.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.ePredefinedColorScheme.OliveGreen2003">
            <summary>
            Olive Green Office 2003 Color Scheme. This setting specifies that this color scheme will be used regardless of system color setting on user machine.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.ePredefinedColorScheme.Silver2003">
            <summary>
            Silver Office 2003 Color Scheme. This setting specifies that this color scheme will be used regardless of system color setting on user machine.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.eColorSchemePart">
            <summary>
                Specifies a color scheme member.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.BarBackground">
            <summary>
            Specifies bar background color.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.BarBackground2">
            <summary>
            Specifies bar target gradient background color.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.BarCaptionBackground">
            <summary>
            Specifies color of bar caption.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.BarCaptionInactiveBackground">
            <summary>
            Specifies  color of inactive bar caption.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.BarCaptionInactiveText">
            <summary>
            Specifies inactive caption text color.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.BarCaptionText">
            <summary>
            Specifies caption text color.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.BarDockedBorder">
            <summary>
            Specifies color of docked bar border.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.BarFloatingBorder">
            <summary>
            Specifies color of floating bar border.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.BarPopupBackground">
            <summary>
            Specifies color of popup bar background. 
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.BarPopupBorder">
            <summary>
            Specifies color of popup bar border. 
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.BarStripeColor">
            <summary>
            Specifies bar strips color.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.CustomizeBackground">
            <summary>
            Specifies customize item background.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.CustomizeBackground2">
            <summary>
            Specifies target gradient color for customize item background.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.CustomizeText">
            <summary>
            Specifies text color of customize item.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.ItemBackground">
            <summary>
            Specifies background color of item.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.ItemCheckedBackground">
            <summary>
            Specifies background color of checked item.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.ItemCheckedBackground2">
            <summary>
            Specifies target gradient background color of checked item.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.ItemCheckedBorder">
            <summary>
            Specifies color if checked item border.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.ItemCheckedText">
            <summary>
            Specifies text color of checked item.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.ItemDesignTimeBorder">
            <summary>
            Specifies color of item design time border.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.ItemDisabledBackground">
            <summary>
            Specifies disabled item background color.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.ItemDisabledText">
            <summary>
            Specifies text color of disabled item.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.ItemExpandedBackground">
            <summary>
            Specifies background color of expanded item.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.ItemExpandedBackground2">
            <summary>
            Specifies target gradient background color of expanded item.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.ItemExpandedShadow">
            <summary>
            Specifies color of expanded item shadow.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.ItemExpandedText">
            <summary>
            Specifies color of expanded item text.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.ItemHotBackground">
            <summary>
            Specifies background color of hot item. 
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.ItemHotBackground2">
            <summary>
            Specifies target background gradient color of hot item.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.ItemHotBorder">
            <summary>
            Specifies color of hot item border.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.ItemHotText">
            <summary>
            Specifies text color of hot item.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.ItemPressedBackground">
            <summary>
            Specifies pressed item background color.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.ItemPressedBackground2">
            <summary>
            Specifies target background color of pressed item. 
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.ItemPressedBorder">
            <summary>
            Specifies color of pressed item border.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.ItemPressedText">
            <summary>
            Specifies color of pressed item text.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.ItemSeparator">
            <summary>
            Specifies color of item separator.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.ItemSeparatorShade">
            <summary>
            Specifies color of item separator shade.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.ItemText">
            <summary>
            Specifies color of item text.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.MenuBackground">
            <summary>
            Specifies menu background color.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.MenuBackground2">
            <summary>
            Specifies target background color of menu.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.MenuBarBackground">
            <summary>
            Specifies menu bar background color.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.MenuBarBackground2">
            <summary>
            Specifies target gradient background color of menu bar.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.MenuBorder">
            <summary>
            Specifies color of menu border.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.MenuSide">
            <summary>
            Specifies color of menu side.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.MenuSide2">
            <summary>
            Specifies target gradient background color of menu side.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.MenuUnusedBackground">
            <summary>
            Specifies background color of unused menu portion.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.MenuUnusedSide">
            <summary>
            Specifies unused menu side color.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.MenuUnusedSide2">
            <summary>
            Specifies target background color of unused menu side.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.PanelBackground">
            <summary>
            Specifies background color of panel.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.PanelBackground2">
            <summary>
            Specifies target gradient background color of panel.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.PanelBorder">
            <summary>
            Specifies color of panel border.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.PanelText">
            <summary>
            Specifies color of panel text.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.ExplorerBarBackground">
            <summary>
            Specifies explorer bar background color.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.ExplorerBarBackground2">
            <summary>
            Specifies explorer bar target background gradient color.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemePart.None">
            <summary>
            Specifies that color scheme color is not used.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.ColorTypeEditor">
            <summary>
            Represents Color type editor with support for color schemes.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ColorTypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the value of the specified object using the editor style indicated by GetEditStyle.
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <param name="provider">An IServiceProvider that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>The new value of the object.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColorTypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the EditValue method.
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <returns>A UITypeEditorEditStyle value that indicates the style of editor used by EditValue. If the UITypeEditor does not support this method, then GetEditStyle will return None.
            </returns>
        </member>
        <member name="T:DevComponents.Tree.ColumnHeader">
            <summary>Represents the node or tree ColumnHeader.</summary>
        </member>
        <member name="M:DevComponents.Tree.ColumnHeader.#ctor">
            <summary>
            Creates new instance of the object.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ColumnHeader.#ctor(System.String)">
            <summary>
            Creates new instance of the object and initalizes it with text.
            </summary>
            <param name="text">Text to initalize object with.</param>
        </member>
        <member name="M:DevComponents.Tree.ColumnHeader.Copy">
            <summary>
            Makes a copy of ColumnHeader object.
            </summary>
            <returns>Returns new instance of column header object.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColumnHeader.SetBounds(System.Drawing.Rectangle)">
            <summary>
            Sets the column bounds.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColumnHeader.Name">
            <summary>
            Returns name of the column header that can be used to identify it from the code.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColumnHeader.Bounds">
            <summary>
            Returns rectangle that this column occupies. If the layout has not been performed on the column the return value will be Rectangle.Empty.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColumnHeader.Width">
            <summary>
            Gets the reference to the object that represents width of the column as either
            absolute or relative value.
            </summary>
            <remarks>
            Set Width using Absolute or Relative properties of ColumnWidth object.
            </remarks>
            <seealso cref="P:DevComponents.Tree.ColumnWidth.Absolute">Absolute Property (DevComponents.Tree.ColumnWidth)</seealso>
            <seealso cref="P:DevComponents.Tree.ColumnWidth.Relative">Relative Property (DevComponents.Tree.ColumnWidth)</seealso>
        </member>
        <member name="P:DevComponents.Tree.ColumnHeader.StyleNormal">
            <summary>
            Gets or sets the style class assigned to the column. Empty value indicates that
            default style is used as specified on cell's parent's control.
            </summary>
            <value>
            Name of the style assigned to the cell or an empty string indicating that default
            style setting from tree control is applied. Default is empty string.
            </value>
            <remarks>
            When property is set to an empty string the style setting from parent tree
            controls is used. ColumnStyleNormal on TreeGX control is a root style for a cell.
            </remarks>
            <seealso cref="P:DevComponents.Tree.ColumnHeader.StyleMouseDown">StyleMouseDown Property</seealso>
            <seealso cref="P:DevComponents.Tree.ColumnHeader.StyleMouseOver">StyleMouseOver Property</seealso>
        </member>
        <member name="P:DevComponents.Tree.ColumnHeader.StyleMouseDown">
            <summary>
            Gets or sets the style class assigned to the column which is applied when mouse
            button is pressed over the header. Empty value indicates that default
            style is used as specified on column's parent.
            </summary>
            <value>
            Name of the style assigned to the column or an empty string indicating that default
            style setting from tree control is applied. Default is empty string.
            </value>
            <remarks>
            When property is set to an empty string the style setting from parent tree
            controls is used. ColumnStyleMouseDown on TreeGX control is a root style for a
            cell.
            </remarks>
            <seealso cref="P:DevComponents.Tree.ColumnHeader.StyleNormal">StyleNormal Property</seealso>
            <seealso cref="P:DevComponents.Tree.ColumnHeader.StyleMouseOver">StyleMouseOver Property</seealso>
        </member>
        <member name="P:DevComponents.Tree.ColumnHeader.StyleMouseOver">
            <summary>
            Gets or sets the style class assigned to the column which is applied when mouse is
            over the column. Empty value indicates that default style is used as specified on column's
            parent control.
            </summary>
            <value>
            Name of the style assigned to the column or an empty string indicating that default
            style setting from tree control is applied. Default is empty string.
            </value>
            <remarks>
            When property is set to an empty string the style setting from parent tree
            controls is used. ColumnStyleMouseOver on TreeGX control is a root style for a
            cell.
            </remarks>
            <seealso cref="P:DevComponents.Tree.ColumnHeader.StyleNormal">StyleNormal Property</seealso>
            <seealso cref="P:DevComponents.Tree.ColumnHeader.StyleMouseDown">StyleMouseDown Property</seealso>
        </member>
        <member name="P:DevComponents.Tree.ColumnHeader.ColumnName">
            <summary>
            Gets or sets the name of the column in the ColumnHeaderCollection.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColumnHeader.Text">
            <summary>
            Gets or sets the column caption.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColumnHeader.Visible">
            <summary>
            Gets or sets whether column is visible. Hidding the header column will also hide coresponding data column.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColumnHeader.SizeChanged">
            <summary>
            Gets or sets whether column size has changed and it's layout needs to be recalculated.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.ColumnHeaderCollection">
            <summary>
            Represents collection for ColumnHeader objects.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ColumnHeaderCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ColumnHeaderCollection.SetParentNode(DevComponents.Tree.Node)">
            <summary>
            Sets the node collection belongs to.
            </summary>
            <param name="parent">ColumnHeader that is parent of this collection.</param>
        </member>
        <member name="M:DevComponents.Tree.ColumnHeaderCollection.Add(DevComponents.Tree.ColumnHeader)">
            <summary>
            Adds new object to the collection.
            </summary>
            <param name="ch">Object to add.</param>
            <returns>Index of newly added object.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColumnHeaderCollection.Insert(System.Int32,DevComponents.Tree.ColumnHeader)">
            <summary>
            Inserts new object into the collection.
            </summary>
            <param name="index">Position of the object.</param>
            <param name="value">Object to insert.</param>
        </member>
        <member name="M:DevComponents.Tree.ColumnHeaderCollection.IndexOf(DevComponents.Tree.ColumnHeader)">
            <summary>
            Returns index of the object inside of the collection.
            </summary>
            <param name="value">Reference to the object.</param>
            <returns>Index of the object.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColumnHeaderCollection.Contains(DevComponents.Tree.ColumnHeader)">
            <summary>
            Returns whether collection contains specified object.
            </summary>
            <param name="value">Object to look for.</param>
            <returns>true if object is part of the collection, otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ColumnHeaderCollection.Remove(DevComponents.Tree.ColumnHeader)">
            <summary>
            Removes specified object from the collection.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:DevComponents.Tree.ColumnHeaderCollection.CopyTo(DevComponents.Tree.ColumnHeader[],System.Int32)">
            <summary>
            Copies collection into the specified array.
            </summary>
            <param name="array">Array to copy collection to.</param>
            <param name="index">Starting index.</param>
        </member>
        <member name="M:DevComponents.Tree.ColumnHeaderCollection.CopyTo(DevComponents.Tree.ColumnHeader[])">
            <summary>
            Copies contained items to the ColumnHeader array.
            </summary>
            <param name="array">Array to copy to.</param>
        </member>
        <member name="P:DevComponents.Tree.ColumnHeaderCollection.ParentNode">
            <summary>
            Gets or sets the node this collection is associated with.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColumnHeaderCollection.Item(System.Int32)">
            <summary>
            Returns reference to the object in collection based on it's index.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.ColumnHeaderCollectionEditor">
            <summary>
            Support for ColumnHeader tabs design-time editor.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ColumnHeaderCollectionEditor.#ctor(System.Type)">
            <summary>Creates new instance of the class</summary>
            <param name="type">Type to initialize editor with.</param>
        </member>
        <member name="T:DevComponents.Tree.ColumnWidth">
            <summary>
            Represents the width of the Column. Supports absolute width in Pixels and
            relative width as percentage of the width of parent control.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ColumnWidth.#ctor">
            <summary>
            Creates new instance of the object.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ColumnWidth.Relative">
            <summary>
            Gets or sets relative width expressed as percentage between 1-100. 0 indicates that
            absolute width will be used.
            </summary>
            <remarks>
            Relative width is expressed as percentage between 1-100 of the parent controls
            width. 0 indicates that absolute width will be used. Absolute width always takes
            priority over relative width. For example value of 30 assigned to this property
            indicates that width of the column will be 30% of the total client width of the
            control.
            </remarks>
        </member>
        <member name="P:DevComponents.Tree.ColumnWidth.Absolute">
            <summary>Gets or sets the absolute width of the column in pixels.</summary>
            <remarks>
            Absolute width always takes precedence over the relative width of the
            column.
            </remarks>
        </member>
        <member name="T:DevComponents.Tree.CommandButtonEventArgs">
            <summary>
            Provides event arguments for command button events.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.CommandButtonEventArgs.#ctor(DevComponents.Tree.eTreeAction,DevComponents.Tree.Node)">
            <summary>
            Default constructor.
            </summary>
            <param name="action">Action type.</param>
            <param name="node">Context node.</param>
        </member>
        <member name="F:DevComponents.Tree.CommandButtonEventArgs.Action">
            <summary>
            Indicates the action type that caused the event.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.CommandButtonEventArgs.Node">
            <summary>
            Indicates the node action is peformed on.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.ConnectorPointsCollection">
            <summary>
            Represents collection of connector points for a node.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ConnectorPointsCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ConnectorPointsCollection.SetParentNode(DevComponents.Tree.Node)">
            <summary>
            Sets the node collection belongs to.
            </summary>
            <param name="parent">Node that is parent of this collection.</param>
        </member>
        <member name="M:DevComponents.Tree.ConnectorPointsCollection.Add(System.Drawing.Point)">
            <summary>
            Adds new object to the collection.
            </summary>
            <param name="p">Object to add.</param>
            <returns>Index of newly added object.</returns>
        </member>
        <member name="M:DevComponents.Tree.ConnectorPointsCollection.AddRange(System.Drawing.Point[])">
            <summary>
            Adds range of objects to the array.
            </summary>
            <param name="ap">Array to add.</param>
        </member>
        <member name="M:DevComponents.Tree.ConnectorPointsCollection.ToArray">
            <summary>
            Copies objects of the collection to the array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Tree.ConnectorPointsCollection.Insert(System.Int32,System.Drawing.Point)">
            <summary>
            Inserts new object into the collection.
            </summary>
            <param name="index">Position of the object.</param>
            <param name="value">Object to insert.</param>
        </member>
        <member name="M:DevComponents.Tree.ConnectorPointsCollection.IndexOf(System.Drawing.Point)">
            <summary>
            Returns index of the object inside of the collection.
            </summary>
            <param name="value">Reference to the object.</param>
            <returns>Index of the object.</returns>
        </member>
        <member name="M:DevComponents.Tree.ConnectorPointsCollection.Contains(System.Drawing.Point)">
            <summary>
            Returns whether collection contains specified object.
            </summary>
            <param name="value">Object to look for.</param>
            <returns>true if object is part of the collection, otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ConnectorPointsCollection.Remove(System.Drawing.Point)">
            <summary>
            Removes specified object from the collection.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:DevComponents.Tree.ConnectorPointsCollection.CopyTo(System.Drawing.Point[],System.Int32)">
            <summary>
            Copies collection into the specified array.
            </summary>
            <param name="array">Array to copy collection to.</param>
            <param name="index">Starting index.</param>
        </member>
        <member name="M:DevComponents.Tree.ConnectorPointsCollection.CopyTo(System.Drawing.Point[])">
            <summary>
            Copies contained items to the ColumnHeader array.
            </summary>
            <param name="array">Array to copy to.</param>
        </member>
        <member name="P:DevComponents.Tree.ConnectorPointsCollection.ParentNode">
            <summary>
            Gets or sets the node this collection is associated with.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ConnectorPointsCollection.Item(System.Int32)">
            <summary>
            Returns reference to the object in collection based on it's index.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.TextMarkup.BlockLayoutManager">
            <summary>
            Represents block layout manager responsible for sizing the content blocks.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TextMarkup.BlockLayoutManager.Layout(DevComponents.Tree.TextMarkup.IBlock,System.Drawing.Size)">
            <summary>
            Resizes the content block and sets it's Bounds property to reflect new size.
            </summary>
            <param name="block">Content block to resize.</param>
            <param name="availableSize">Content size available for the block in the given line.</param>
        </member>
        <member name="M:DevComponents.Tree.TextMarkup.BlockLayoutManager.FinalizeLayout(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Collections.ArrayList)">
            <summary>
            Performs layout finalization
            </summary>
            <param name="containerBounds"></param>
            <param name="blocksBounds"></param>
            <param name="lines"></param>
            <returns></returns>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.BlockLayoutManager.Graphics">
            <summary>
            Gets or sets the graphics object used by layout manager.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.TextMarkup.eContentOrientation">
            <summary>
            Specifies orientation of content.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.TextMarkup.eContentOrientation.Horizontal">
            <summary>
            Indicates Horizontal orientation of the content.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.TextMarkup.eContentOrientation.Vertical">
            <summary>
            Indicates Vertical orientation of the content.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.TextMarkup.eContentAlignment">
            <summary>
            Specifies content horizontal alignment.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.TextMarkup.eContentAlignment.Left">
            <summary>
            Content is left aligned.UI
            </summary>
        </member>
        <member name="F:DevComponents.Tree.TextMarkup.eContentAlignment.Right">
            <summary>
            Content is right aligned.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.TextMarkup.eContentAlignment.Center">
            <summary>
            Content is centered.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.TextMarkup.eContentVerticalAlignment">
            <summary>
            Specifies content vertical alignment.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.TextMarkup.eContentVerticalAlignment.Top">
            <summary>
            Content is top aligned.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.TextMarkup.eContentVerticalAlignment.Bottom">
            <summary>
            Content is bottom aligned.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.TextMarkup.eContentVerticalAlignment.Middle">
            <summary>
            Content is in the middle.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.TextMarkup.IBlock">
            <summary>
            Represents a content block interface.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.IBlock.Bounds">
            <summary>
            Gets or sets the bounds of the content block.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.IBlock.Visible">
            <summary>
            Gets or sets whether content block is visible.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.TextMarkup.IBlockExtended">
            <summary>
            Represents a extended content block interface for advanced layout information.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.TextMarkup.IContentLayout">
            <summary>
            Represents interface for block layout.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TextMarkup.IContentLayout.Layout(System.Drawing.Rectangle,DevComponents.Tree.TextMarkup.IBlock[],DevComponents.Tree.TextMarkup.BlockLayoutManager)">
            <summary>
            Performs layout of the content block.
            </summary>
            <param name="containerBounds">Container bounds to layout content blocks in.</param>
            <param name="contentBlocks">Content blocks to layout.</param>
            <param name="blockLayout">Block layout manager that resizes the content blocks.</param>
            <returns>The bounds of the content blocks within the container bounds.</returns>
        </member>
        <member name="T:DevComponents.Tree.TextMarkup.SerialContentLayoutManager">
            <summary>
            Represents the serial content layout manager that arranges content blocks in series next to each other.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TextMarkup.SerialContentLayoutManager.#ctor">
            <summary>
            Creates new instance of the class.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TextMarkup.SerialContentLayoutManager.Layout(System.Drawing.Rectangle,DevComponents.Tree.TextMarkup.IBlock[],DevComponents.Tree.TextMarkup.BlockLayoutManager)">
            <summary>
            Performs layout of the content block.
            </summary>
            <param name="containerBounds">Container bounds to layout content blocks in.</param>
            <param name="contentBlocks">Content blocks to layout.</param>
            <param name="blockLayout">Block layout manager that resizes the content blocks.</param>
            <returns>The bounds of the content blocks within the container bounds.</returns>
        </member>
        <member name="E:DevComponents.Tree.TextMarkup.SerialContentLayoutManager.NextPosition">
            <summary>
            Occurs when X, Y position of next block is calcualted.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.TextMarkup.SerialContentLayoutManager.BeforeNewBlockLayout">
            <summary>
            Occurs before new block is layed out.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.SerialContentLayoutManager.BlockSpacing">
            <summary>
            Gets or sets the spacing in pixels between content blocks. Default value is 0.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.SerialContentLayoutManager.FitContainerOversize">
            <summary>
            Gets or sets whether content blocks are forced to fit the container bounds if they 
            occupy more space than it is available by container. Default value is false.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.SerialContentLayoutManager.FitContainer">
            <summary>
            Gets or sets whether content blocks are resized to fit the container bound if they
            occupy less space than it is available by container. Default value is false.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.SerialContentLayoutManager.VerticalFitContainerWidth">
            <summary>
            Gets or sets whether content blocks are resized (Width) to fit container bounds if they
            occupy less space than the actual container width. Applies to the Vertical orientation only. Default value is false.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.SerialContentLayoutManager.ContentOrientation">
            <summary>
            Gets or sets the content orientation. Default value is Horizontal.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.SerialContentLayoutManager.ContentVerticalAlignment">
            <summary>
            Gets or sets the content vertical alignment. Default value is Middle.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.SerialContentLayoutManager.BlockLineAlignment">
            <summary>
            Gets or sets the block line vertical alignment. Default value is Middle.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.SerialContentLayoutManager.ContentAlignment">
            <summary>
            Gets or sets the content horiznontal alignment. Default value is Left.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.SerialContentLayoutManager.EvenHeight">
            <summary>
            Gets or sets whether all content blocks are resized so they have same height which is height of the talles content block. Default value is false.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.SerialContentLayoutManager.MultiLine">
            <summary>
            Gets or sets whether content is wrapped into new line if it exceeds the width of the container.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.SerialContentLayoutManager.RightToLeft">
            <summary>
            Gets or sets whether layout is right-to-left.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.TextMarkup.LayoutManagerPositionEventArgs">
            <summary>
            Represents event arguments for SerialContentLayoutManager.NextPosition event.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.TextMarkup.LayoutManagerPositionEventArgs.Block">
            <summary>
            Gets or sets the block that is layed out.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.TextMarkup.LayoutManagerPositionEventArgs.CurrentPosition">
            <summary>
            Gets or sets the current block position.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.TextMarkup.LayoutManagerPositionEventArgs.NextPosition">
            <summary>
            Gets or sets the calculated next block position.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.TextMarkup.LayoutManagerPositionEventArgs.Cancel">
            <summary>
            Cancels default position calculation.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.TextMarkup.LayoutManagerLayoutEventArgs">
            <summary>
            Represents event arguments for the SerialContentLayoutManager layout events.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.TextMarkup.LayoutManagerLayoutEventArgs.Block">
            <summary>
            Gets or sets the reference block object.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.TextMarkup.LayoutManagerLayoutEventArgs.CurrentPosition">
            <summary>
            Gets or sets the position block will assume.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.TextMarkup.LayoutManagerLayoutEventArgs.CancelLayout">
            <summary>
            Cancel the layout of the block, applies only to BeforeXXX layout event.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.TextMarkup.LayoutManagerLayoutEventArgs.BlockVisibleIndex">
            <summary>
            Gets or sets the visibility index of the block.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TextMarkup.LayoutManagerLayoutEventArgs.#ctor(DevComponents.Tree.TextMarkup.IBlock,System.Drawing.Point,System.Int32)">
            <summary>
            Creates new instance of the class and initializes it with default values.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.TextMarkup.LayoutManagerPositionEventHandler">
            <summary>
            Delegate for SerialContentLayoutManager.NextPosition event.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.TextMarkup.LayoutManagerLayoutEventHandler">
            <summary>
            Delegate for the SerialContentLayoutManager layout events.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.Design.ColorSchemeColorConverter">
            <summary>
            Summary description for ColorSchemeColorConverter.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Design.ColorSchemeColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context. </param>
            <param name="culture">The CultureInfo to use as the current culture. </param>
            <param name="value">The Object to convert. </param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:DevComponents.Tree.Design.ColorSchemeColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context. </param>
            <param name="culture">A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current culture is assumed. </param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">The Type to convert the value parameter to. </param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="T:DevComponents.Tree.Design.ComponentNotLicensed">
            <summary>
            Summary description for ComponentNotLicensed.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Design.ComponentNotLicensed.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Design.ComponentNotLicensed.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.Design.ElementStyleTypeEditor">
            <summary>
            Represents type editor for ElementStyle used for Windows Forms design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Design.ElementStyleTypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the EditValue method.
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <returns>A UITypeEditorEditStyle value that indicates the style of editor used by EditValue. If the UITypeEditor does not support this method, then GetEditStyle will return None</returns>
        </member>
        <member name="T:DevComponents.Tree.Design.NodeConnectorTypeEditor">
            <summary>
            Represents type editor for NodeConnector used for Windows Forms design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Design.NodeConnectorTypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the EditValue method.
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <returns>A UITypeEditorEditStyle value that indicates the style of editor used by EditValue. If the UITypeEditor does not support this method, then GetEditStyle will return None</returns>
        </member>
        <member name="T:DevComponents.Tree.Design.NodeContextMenuTypeEditor">
            <summary>
            Represents context menu type editor for Node.ContextMenu property.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Design.NodeContextMenuTypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the EditValue method.
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <returns>A UITypeEditorEditStyle value that indicates the style of editor used by EditValue. If the UITypeEditor does not support this method, then GetEditStyle will return None</returns>
        </member>
        <member name="T:DevComponents.Tree.Design.NodeDesigner">
            <summary>
            Represents Windows Forms designer for Node object.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Design.NodeDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            Initializes designer with given component.
            </summary>
            <param name="component">Component to initalize designer with.</param>
        </member>
        <member name="P:DevComponents.Tree.Design.NodeDesigner.Visible">
            <summary>
            Gets or sets whether item is visible.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Design.NodeDesigner.Verbs">
            <summary>Returns design-time commands applicable to this designer.</summary>
        </member>
        <member name="T:DevComponents.Tree.Design.TreeGXDesigner">
            <summary>
            Represents windows forms designer for the control.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Design.TreeGXDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>Initializes designer with given component.</summary>
            <param name="component">Component to initialize designer with.</param>
        </member>
        <member name="M:DevComponents.Tree.Design.TreeGXDesigner.OnComponentRemoving(System.Object,System.ComponentModel.Design.ComponentEventArgs)">
            <summary>Called when component is about to be removed from designer.</summary>
            <param name="sender">Event sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:DevComponents.Tree.Design.TreeGXDesigner.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Selection support for items on container.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DevComponents.Tree.Design.TreeGXDesigner.OnControlAdded(System.Windows.Forms.ControlEventArgs)" -->
        <member name="M:DevComponents.Tree.Design.TreeGXDesigner.OnNodeSelected(DevComponents.Tree.Node)">
            <summary>
            Called after node has been selected by designer as response to mouse action
            </summary>
            <param name="node">Node that is selected</param>
        </member>
        <member name="M:DevComponents.Tree.Design.TreeGXDesigner.CanDragNode(DevComponents.Tree.Node)">
            <summary>
            Returns whether specified node can be dragged and dropped
            </summary>
            <param name="node">Node to verify</param>
            <returns>true if node can be dragged and dropped</returns>
        </member>
        <member name="P:DevComponents.Tree.Design.TreeGXDesigner.AssociatedComponents">
            <summary>
            Returns all components associated with this control
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Design.TreeGXDesigner.SelectionRules">
            <summary>Specifies selection rules for designer.</summary>
        </member>
        <member name="T:DevComponents.Tree.DisplayHelp">
            <summary>
            Summary description for Display.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.Display.CellDisplay">
            <summary>
            Represents cell display class.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.Display.CellDisplayInfo">
            <summary>
            Represents information neccessary to paint the cell on canvas.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.Display.ConnectorRendererEventArgs">
            <summary>
            Represents helper class for node connector display.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.ConnectorRendererEventArgs.FromNode">
            <summary>
            From node reference.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.ConnectorRendererEventArgs.StyleFromNode">
            <summary>
            From node style reference.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.ConnectorRendererEventArgs.ToNode">
            <summary>
            To node reference.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.ConnectorRendererEventArgs.StyleToNode">
            <summary>
            To node style reference.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.ConnectorRendererEventArgs.Graphics">
            <summary>
            Graphics object used for drawing.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.ConnectorRendererEventArgs.Offset">
            <summary>
            Node offset since some node coordinates are relative.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.ConnectorRendererEventArgs.IsRootNode">
            <summary>
            Indicates whether from node is a root node.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.ConnectorRendererEventArgs.NodeConnector">
            <summary>
            Reference to node connector object that describes connector type.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.ConnectorRendererEventArgs.LinkConnector">
            <summary>
            Gets or sets whether connector is link connector.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.ConnectorRendererEventArgs.ConnectorPoints">
            <summary>
            Reference to the collection of the connector path points. Default value is null indicating there are no path points.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.Display.CurveConnectorDisplay">
            <summary>
            Represents the connector display for map type.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.Display.NodeConnectorDisplay">
            <summary>
            Base class for drawing node connectors.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeConnectorDisplay.#ctor">
            <summary>
            Creates new instance of the object.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeConnectorDisplay.DrawConnector(DevComponents.Tree.Display.ConnectorRendererEventArgs)">
            <summary>
            Draws connector line between two nodes.
            </summary>
            <param name="info">Connector context information.</param>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeConnectorDisplay.GetStartPoint(DevComponents.Tree.Display.ConnectorRendererEventArgs)">
            <summary>
            Returns the connector starting coordinates.
            </summary>
            <param name="info">Connector display information.</param>
            <returns>Point object.</returns>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeConnectorDisplay.IsAbove(DevComponents.Tree.Node,DevComponents.Tree.Node)">
            <summary>
            Returns true if fromNode is above the toNode.
            </summary>
            <param name="fromNode">From Node object.</param>
            <param name="toNode">To Node object</param>
            <returns>True if fromNode is above toNode.</returns>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeConnectorDisplay.IsBelow(DevComponents.Tree.Node,DevComponents.Tree.Node)">
            <summary>
            Returns true if fromNode is below toNode.
            </summary>
            <param name="fromNode">From Node object.</param>
            <param name="toNode">To Node object.</param>
            <returns>True if fromNode is below toNode.</returns>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeConnectorDisplay.UnderlineNode(DevComponents.Tree.ElementStyle)">
            <summary>
            Returns whether connector is extended to underline the node.
            </summary>
            <param name="nodeStyle">Refernce to Node style.</param>
            <returns>True if node should be underlined by connector.</returns>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeConnectorDisplay.GetEndPoint(DevComponents.Tree.Display.ConnectorRendererEventArgs)">
            <summary>
            Returns the connector end point. The array of end points. Two valid points will be returned if node needs to be underlined by connector.
            </summary>
            <param name="info">Connector display info.</param>
            <returns>Array of point objects.</returns>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeConnectorDisplay.GetCapWidthOffset(DevComponents.Tree.eConnectorCap,System.Drawing.Size)">
            <summary>
            Returns the offest for the node connector cap.
            </summary>
            <param name="cap">Cap type.</param>
            <param name="size">Cap size.</param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeConnectorDisplay.IsOnLeftSide(DevComponents.Tree.Node,DevComponents.Tree.Node)">
            <summary>
            Returns true if source node is on the left side of the target node.
            </summary>
            <param name="source">Reference to source node.</param>
            <param name="target">Reference to target node.</param>
            <returns>True if source is on the left side of target.</returns>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeConnectorDisplay.GetLinePen(DevComponents.Tree.Display.ConnectorRendererEventArgs)">
            <summary>
            Returns new instance of pen object for node connector line. Caller is responsible for
            disposing of this object.
            </summary>
            <param name="info">Node connector display info.</param>
            <returns>New instance of Pen object.</returns>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeConnectorDisplay.GetEndLinePen(DevComponents.Tree.Display.ConnectorRendererEventArgs)">
            <summary>
            Returns new instance of pen object for the end node connector line. Caller is responsible for
            disposing of this object.
            </summary>
            <param name="info">Node connector display info.</param>
            <returns>New instance of Pen object.</returns>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeConnectorDisplay.GetEndUnderlinePen(DevComponents.Tree.Display.ConnectorRendererEventArgs)">
            <summary>
            Returns new instance of pen object for the node underline line. Caller is responsible for
            disposing of this object.
            </summary>
            <param name="info">Node connector display info.</param>
            <returns>New instance of Pen object.</returns>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeConnectorDisplay.DrawLineConnector(DevComponents.Tree.Display.ConnectorRendererEventArgs,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Draws straight line connector between start and end point.
            </summary>
            <param name="info">Node connector display info.</param>
            <param name="pStart">Start point.</param>
            <param name="pEnd">End point.</param>
            <param name="pEndUnderLine">Underline end point if any.</param>
        </member>
        <member name="M:DevComponents.Tree.Display.CurveConnectorDisplay.DrawConnector(DevComponents.Tree.Display.ConnectorRendererEventArgs)">
            <summary>
            Draws connector line between two nodes.
            </summary>
            <param name="info">Connector context information.</param>
        </member>
        <member name="T:DevComponents.Tree.Display.LineConnectorDisplay">
            <summary>
            Represents the line connector display class.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Display.LineConnectorDisplay.DrawConnector(DevComponents.Tree.Display.ConnectorRendererEventArgs)">
            <summary>
            Draws connector line between two nodes.
            </summary>
            <param name="info">Connector context information.</param>
        </member>
        <member name="T:DevComponents.Tree.Display.NodeCellRendererEventArgs">
            <summary>
            Provides information for cell rendering methods and events.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.Display.NodeRendererEventArgs">
            <summary>
            Summary description for NodeRendererEventArgs.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeRendererEventArgs.Graphics">
            <summary>
            Gets or sets reference to Graphics object, canvas node is rendered on.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeRendererEventArgs.Node">
            <summary>
            Gets or sets the reference to Node object being rendered.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeRendererEventArgs.NodeBounds">
            <summary>
            Gets or sets the absolute node bounds.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeRendererEventArgs.Style">
            <summary>
            Gets or sets the reference to element style for rendered node or cell. Style provided here is the style
            for current node or cell state.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeRendererEventArgs.#ctor">
            <summary>
            Creates new instance of the class.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeCellRendererEventArgs.Cell">
            <summary>
            Gets or sets the cell being rendered.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeCellRendererEventArgs.CellBounds">
            <summary>
            Gets or sets absolute cell bounds.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeCellRendererEventArgs.CellTextBounds">
            <summary>
            Gets or sets absolute bounds for cell text.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeCellRendererEventArgs.CellOffset">
            <summary>
            Gets or sets the internal cell offset.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeCellRendererEventArgs.#ctor">
            <summary>
            Creates new instance of the class.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeCellRendererEventArgs.#ctor(System.Drawing.Graphics,DevComponents.Tree.Node,System.Drawing.Rectangle,DevComponents.Tree.ElementStyle,DevComponents.Tree.Cell,System.Drawing.Rectangle)">
            <summary>
            Creates new instance of the class and initializes it with default values.
            </summary>
            <param name="g">Reference to graphics object.</param>
            <param name="node">Reference to context node.</param>
            <param name="bounds">Reference to node bounds</param>
            <param name="style">Reference to cell style</param>
            <param name="cell">Reference to cell</param>
            <param name="cellBounds">Reference to cell bounds</param>
        </member>
        <member name="T:DevComponents.Tree.Display.NodeCommandDisplay">
            <summary>
            Paints node command button.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.Display.NodeCommandPartRendererEventArgs">
            <summary>
            Summary description for NodeCommandPartRendererEventArgs.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeCommandPartRendererEventArgs.Graphics">
            <summary>
            Gets or sets reference to Graphics object, canvas node is rendered on.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeCommandPartRendererEventArgs.Node">
            <summary>
            Gets or sets the reference to Node object being rendered.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeCommandPartRendererEventArgs.CommandPartBounds">
            <summary>
            Gets or sets command part absolute bounds.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeCommandPartRendererEventArgs.BackColor">
            <summary>
            Gets or sets command part back color.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeCommandPartRendererEventArgs.BackColor2">
            <summary>
            Gets or sets command part end gradient color.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeCommandPartRendererEventArgs.ForeColor">
            <summary>
            Gets or sets command part text color.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeCommandPartRendererEventArgs.BackColorGradientAngle">
            <summary>
            Gets or sets gradient angle.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeCommandPartRendererEventArgs.MouseOverBackColor">
            <summary>
            Gets or sets command part back color when mouse is over the part.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeCommandPartRendererEventArgs.MouseOverBackColor2">
            <summary>
            Gets or sets command part end gradient back color when mouse is over the part.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeCommandPartRendererEventArgs.MouseOverForeColor">
            <summary>
            Gets or sets text color when mouse is over the part.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeCommandPartRendererEventArgs.MouseOverBackColorGradientAngle">
            <summary>
            Gets or sets gradient angle.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeCommandPartRendererEventArgs.#ctor(System.Drawing.Graphics)">
            <summary>
            Creates new instance of the class.
            </summary>
            <param name="g"></param>
        </member>
        <member name="T:DevComponents.Tree.ConnectorPointInfo">
            <summary>
            Represents custom connector path info.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.Display.NodeDisplay">
            <summary>
            Summary description for NodeDisplay.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeDisplay.#ctor(DevComponents.Tree.TreeGX)">
            <summary>Creates new instance of the class</summary>
            <param name="tree">Object to initialize class with.</param>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeDisplay.Paint(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the layout on canvas.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeDisplay.SetLockedOffset(System.Drawing.Point)">
            <summary>
            Sets locked offset to specific value. Point.Empty means there is no locked offset set.
            </summary>
            <param name="p">New locked offset.</param>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeDisplay.GetLockedOffset">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:DevComponents.Tree.Display.NodeDisplay.Offset">
            <summary>
            Gets or sets the offset of the tree content relative to the size of the container control.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Display.NodeDisplay.LockOffset">
            <summary>Gets or sets whether offset is locked, i.e. cannot be changed.</summary>
        </member>
        <member name="P:DevComponents.Tree.Display.NodeDisplay.DefaultOffset">
            <summary>
            Returns the default offset for the tree content relative to the size of the container.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Display.NodeDisplay.Tree">
            <summary>
            Gets or sets the reference to the tree control managed by display class.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.Display.NodeExpandDisplay">
            <summary>
            Base class for node expand button display.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeExpandDisplay.#ctor">
            <summary>Creates new instance of the class</summary>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeExpandDisplay.DrawExpandButton(DevComponents.Tree.NodeExpandPartRendererEventArgs)">
            <summary>Draws expand button.</summary>
            <param name="e">Context parameters for drawing expand button.</param>
        </member>
        <member name="T:DevComponents.Tree.Display.NodeExpandEllipseDisplay">
            <summary>
            Represents class that paints elliptical expand button.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeExpandEllipseDisplay.DrawExpandButton(DevComponents.Tree.NodeExpandPartRendererEventArgs)">
            <summary>Draws ellipse type expand button.</summary>
            <param name="e">Expand context drawing information.</param>
        </member>
        <member name="T:DevComponents.Tree.Display.NodeExpandImageDisplay">
            <summary>
            Represents expand button display using predefined images.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeExpandImageDisplay.DrawExpandButton(DevComponents.Tree.NodeExpandPartRendererEventArgs)">
            <summary>
            Draws image type expand button.
            </summary>
            <param name="e">Expand context information</param>
        </member>
        <member name="T:DevComponents.Tree.NodeExpandPartRendererEventArgs">
            <summary>
            Represents event arguments for RenderExpandPart event.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.NodeExpandPartRendererEventArgs.Graphics">
            <summary>
            Gets or sets reference to Graphics object, canvas node is rendered on.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.NodeExpandPartRendererEventArgs.Node">
            <summary>
            Gets or sets the reference to Node object being rendered.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.NodeExpandPartRendererEventArgs.ExpandPartBounds">
            <summary>Expand part bounds</summary>
        </member>
        <member name="F:DevComponents.Tree.NodeExpandPartRendererEventArgs.BorderColor">
            <summary>Expand part border color</summary>
        </member>
        <member name="F:DevComponents.Tree.NodeExpandPartRendererEventArgs.ExpandLineColor">
            <summary>Expand part line color</summary>
        </member>
        <member name="F:DevComponents.Tree.NodeExpandPartRendererEventArgs.BackColor">
            <summary>Expand part background color</summary>
        </member>
        <member name="F:DevComponents.Tree.NodeExpandPartRendererEventArgs.BackColor2">
            <summary>Expand part target gradient background color</summary>
        </member>
        <member name="F:DevComponents.Tree.NodeExpandPartRendererEventArgs.BackColorGradientAngle">
            <summary>Gradient angle</summary>
        </member>
        <member name="F:DevComponents.Tree.NodeExpandPartRendererEventArgs.ExpandImage">
            <summary>Expand part image when node is expanded</summary>
        </member>
        <member name="F:DevComponents.Tree.NodeExpandPartRendererEventArgs.ExpandImageCollapse">
            <summary>Expand part image when node is collapsed</summary>
        </member>
        <member name="F:DevComponents.Tree.NodeExpandPartRendererEventArgs.ExpandButtonType">
            <summary>Internal support for expand button types</summary>
        </member>
        <member name="M:DevComponents.Tree.NodeExpandPartRendererEventArgs.#ctor(System.Drawing.Graphics)">
            <summary>
            Creates new instance of the class and initializes it with default values.
            </summary>
            <param name="g">Reference to graphics object.</param>
        </member>
        <member name="T:DevComponents.Tree.Display.NodeExpandRectDisplay">
            <summary>
            Represents class that paints rectangular expand button.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeExpandRectDisplay.DrawExpandButton(DevComponents.Tree.NodeExpandPartRendererEventArgs)">
            <summary>
            Draw rectangular type expand button.
            </summary>
            <param name="e">Expand button context information.</param>
        </member>
        <member name="T:DevComponents.Tree.Display.NodeProfessionalColorTable">
            <summary>
            Describes colors used by Professional Renderer.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeProfessionalColorTable.NodeTopGradientBegin">
            <summary>
            Gets or sets the gradient begin color for top part of background.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeProfessionalColorTable.NodeTopGradientMiddle">
            <summary>
            Gets or sets the middle gradient color for top part of background.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeProfessionalColorTable.NodeTopGradientEnd">
            <summary>
            Gets or sets the end gradient color for top part of background.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeProfessionalColorTable.NodeTopGradientType">
            <summary>
            Gets or sets the end gradient type for top part of background.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeProfessionalColorTable.NodeTopGradientAngle">
            <summary>
            Gets or sets the end gradient angle for top part of background.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeProfessionalColorTable.NodeBottomGradientBegin">
            <summary>
            Gets or sets the starting gradient color for bottom part of background.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeProfessionalColorTable.NodeBottomGradientMiddle">
            <summary>
            Gets or sets the middle gradient color for bottom part of background.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeProfessionalColorTable.NodeBottomGradientEnd">
            <summary>
            Gets or sets the end gradient color for bottom part of background.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeProfessionalColorTable.NodeBottomGradientType">
            <summary>
            Gets or sets the type of the gradient for bottom part of background.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeProfessionalColorTable.NodeBottomGradientAngle">
            <summary>
            Gets or sets the gradient angle for bottom part of background.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeProfessionalColorTable.NodeMouseOverTopGradientBegin">
            <summary>
            Gets or sets the starting gradient color for top part of background when mouse is over the node.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeProfessionalColorTable.NodeMouseOverTopGradientMiddle">
            <summary>
            Gets or sets the middle gradient color for top part of background when mouse is over the node.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeProfessionalColorTable.NodeMouseOverTopGradientEnd">
            <summary>
            Gets or sets the end gradient color for top part of background when mouse is over the node.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeProfessionalColorTable.NodeMouseOverTopGradientType">
            <summary>
            Gets or sets the gradient type for top part of background when mouse is over the node.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeProfessionalColorTable.NodeMouseOverTopGradientAngle">
            <summary>
            Gets or sets the gradient angle for top part of background when mouse is over the node.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeProfessionalColorTable.NodeMouseOverBottomGradientBegin">
            <summary>
            Gets or sets the starting gradient color for bottom part of background when mouse is over the node.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeProfessionalColorTable.NodeMouseOverBottomGradientMiddle">
            <summary>
            Gets or sets the middle gradient color for bottom part of background when mouse is over the node.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeProfessionalColorTable.NodeMouseOverBottomGradientEnd">
            <summary>
            Gets or sets the end gradient color for bottom part of background when mouse is over the node.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeProfessionalColorTable.NodeMouseOverBottomGradientType">
            <summary>
            Gets or sets the gradient type for bottom part of background when mouse is over the node.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.NodeProfessionalColorTable.NodeMouseOverBottomGradientAngle">
            <summary>
            Gets or sets the gradient angle for bottom part of background when mouse is over the node.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.Display.NodeProfessionalRenderer">
            <summary>
            Represents professional rendered which provides extensive rendering above and beyond the NodeSystemRenderer.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.Display.NodeSystemRenderer">
            <summary>
            Represents default system node and cell renderer.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.Display.NodeRenderer">
            <summary>
            Represents abstract renderer class for node objects.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeRenderer.DrawNodeBackground(DevComponents.Tree.Display.NodeRendererEventArgs)">
            <summary>
            Draws node background. If you need to provide custom rendering this is the method that you should override in your custom rendered. If you
            do not want default rendering to occur do not call the base implementation. You can call OnRenderNodeBackground method so events can occur.
            </summary>
            <param name="e">Information provided for rendering.</param>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeRenderer.OnRenderNodeBackground(DevComponents.Tree.Display.NodeRendererEventArgs)">
            <summary>
            Raises RenderNodeBackground event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeRenderer.DrawNodeExpandPart(DevComponents.Tree.NodeExpandPartRendererEventArgs)">
            <summary>
            Draws node expand part. If you need to provide custom rendering this is the method that you should override in your custom rendered. If you
            do not want default rendering to occur do not call the base implementation. You can call OnRenderNodeExpandPart method so events can occur.
            </summary>
            <param name="e">Information provided for rendering.</param>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeRenderer.OnRenderNodeExpandPart(DevComponents.Tree.NodeExpandPartRendererEventArgs)">
            <summary>
            Raises RenderNodeExpandPart event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeRenderer.DrawNodeCommandPart(DevComponents.Tree.Display.NodeCommandPartRendererEventArgs)">
            <summary>
            Draws node command part. If you need to provide custom rendering this is the method that you should override in your custom rendered. If you
            do not want default rendering to occur do not call the base implementation. You can call OnRenderNodeCommandPart method so events can occur.
            </summary>
            <param name="e">Information provided for rendering.</param>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeRenderer.OnRenderNodeCommandPart(DevComponents.Tree.Display.NodeCommandPartRendererEventArgs)">
            <summary>
            Raises RenderNodeCommandPart event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeRenderer.DrawCellBackground(DevComponents.Tree.Display.NodeCellRendererEventArgs)">
            <summary>
            Draws cell background. If you need to provide custom rendering this is the method that you should override in your custom rendered. If you
            do not want default rendering to occur do not call the base implementation. You can call OnRenderCellBackground method so events can occur.
            </summary>
            <param name="e">Information provided for rendering.</param>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeRenderer.OnRenderCellBackground(DevComponents.Tree.Display.NodeCellRendererEventArgs)">
            <summary>
            Raises RenderCellBackground event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeRenderer.DrawCellCheckBox(DevComponents.Tree.Display.NodeCellRendererEventArgs)">
            <summary>
            Draws cell check box.  If you need to provide custom rendering this is the method that you should override in your custom rendered. If you
            do not want default rendering to occur do not call the base implementation. You can call OnRenderCellCheckBox method so events can occur.
            </summary>
            <param name="e">Information provided for rendering.</param>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeRenderer.OnRenderCellCheckBox(DevComponents.Tree.Display.NodeCellRendererEventArgs)">
            <summary>
            Raises RenderCellCheckBox event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeRenderer.DrawCellImage(DevComponents.Tree.Display.NodeCellRendererEventArgs)">
            <summary>
            Draws cell image. If you need to provide custom rendering this is the method that you should override in your custom rendered. If you
            do not want default rendering to occur do not call the base implementation. You can call OnRenderCellImage method so events can occur.
            </summary>
            <param name="e">Information provided for rendering.</param>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeRenderer.OnRenderCellImage(DevComponents.Tree.Display.NodeCellRendererEventArgs)">
            <summary>
            Raises RenderCellImage event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeRenderer.DrawCellText(DevComponents.Tree.Display.NodeCellRendererEventArgs)">
            <summary>
            Draws cell text. If you need to provide custom rendering this is the method that you should override in your custom rendered. If you
            do not want default rendering to occur do not call the base implementation. You can call OnRenderCellText method so events can occur.
            </summary>
            <param name="e">Information provided for rendering.</param>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeRenderer.OnRenderCellText(DevComponents.Tree.Display.NodeCellRendererEventArgs)">
            <summary>
            Raises RenderCellImage event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeRenderer.DrawSelection(DevComponents.Tree.SelectionRendererEventArgs)">
            <summary>
            Draws selection for SelectedNode. If you need to provide custom rendering this is the method that you should override in your custom rendered. If you
            do not want default rendering to occur do not call the base implementation. You can call OnRenderSelection method so events can occur.
            </summary>
            <param name="e">Information provided for rendering.</param>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeRenderer.OnRenderSelection(DevComponents.Tree.SelectionRendererEventArgs)">
            <summary>
            Raises RenderSelection event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeRenderer.DrawConnector(DevComponents.Tree.Display.ConnectorRendererEventArgs)">
            <summary>
            Draws connector between nodes. If you need to provide custom rendering this is the method that you should override in your custom rendered. If you
            do not want default rendering to occur do not call the base implementation. You can call OnRenderConnector method so events can occur.
            </summary>
            <param name="e">Information provided for rendering.</param>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeRenderer.OnRenderConnector(DevComponents.Tree.Display.ConnectorRendererEventArgs)">
            <summary>
            Raises RenderConnector event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeRenderer.DrawTreeBackground(DevComponents.Tree.Display.TreeBackgroundRendererEventArgs)">
            <summary>
            Draws the tree background. If you need to provide custom rendering this is the method that you should override in your custom rendered. If you
            do not want default rendering to occur do not call the base implementation. You can call OnRenderTreeBackground method so events can occur.
            </summary>
            <param name="e">Information provided for rendering.</param>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeRenderer.OnRenderTreeBackground(DevComponents.Tree.Display.TreeBackgroundRendererEventArgs)">
            <summary>
            Raises RenderTreeBackground event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="E:DevComponents.Tree.Display.NodeRenderer.RenderNodeBackground">
            <summary>
            Occurs when node background is being drawn.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.Display.NodeRenderer.RenderNodeExpandPart">
            <summary>
            Occurs when node expand part is being drawn.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.Display.NodeRenderer.RenderNodeCommandPart">
            <summary>
            Occurs when node command part is being drawn.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.Display.NodeRenderer.RenderCellBackground">
            <summary>
            Occurs when cell bacgkround is being drawn.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.Display.NodeRenderer.RenderCellCheckBox">
            <summary>
            Occurs when cell check-box is being drawn.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.Display.NodeRenderer.RenderCellImage">
            <summary>
            Occurs when cell image is being drawn.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.Display.NodeRenderer.RenderCellText">
            <summary>
            Occurs when cell text is being drawn.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.Display.NodeRenderer.RenderSelection">
            <summary>
            Occurs when cell text is being drawn.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.Display.NodeRenderer.RenderConnector">
            <summary>
            Occurs when node connector is being drawn.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.Display.NodeRenderer.RenderTreeBackground">
            <summary>
            Occurs when tree background is rendered.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeSystemRenderer.GetElementStyleDisplayInfo(DevComponents.Tree.ElementStyle,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Returns ElementStyleDisplayInfo class that provides information for ElementStyle rendering.
            </summary>
            <param name="style">Reference to style.</param>
            <param name="g">Reference to graphics object.</param>
            <param name="bounds">Style bounds</param>
            <returns>New instance of ElementStyleDisplayInfo</returns>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeSystemRenderer.DrawNodeBackground(DevComponents.Tree.Display.NodeRendererEventArgs)">
            <summary>
            Draws node background. If you need to provide custom rendering this is the method that you should override in your custom rendered. If you
            do not want default rendering to occur do not call the base implementation. You can call OnRenderNodeBackground method so events can occur.
            </summary>
            <param name="e">Information provided for rendering.</param>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeSystemRenderer.DrawNodeExpandPart(DevComponents.Tree.NodeExpandPartRendererEventArgs)">
            <summary>
            Draws node expand part. If you need to provide custom rendering this is the method that you should override in your custom rendered. If you
            do not want default rendering to occur do not call the base implementation. You can call OnRenderNodeExpandPart method so events can occur.
            </summary>
            <param name="e">Information provided for rendering.</param>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeSystemRenderer.DrawNodeCommandPart(DevComponents.Tree.Display.NodeCommandPartRendererEventArgs)">
            <summary>
            Draws node command part. If you need to provide custom rendering this is the method that you should override in your custom rendered. If you
            do not want default rendering to occur do not call the base implementation. You can call OnRenderNodeCommandPart method so events can occur.
            </summary>
            <param name="e">Information provided for rendering.</param>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeSystemRenderer.DrawCellBackground(DevComponents.Tree.Display.NodeCellRendererEventArgs)">
            <summary>
            Draws cell background. If you need to provide custom rendering this is the method that you should override in your custom rendered. If you
            do not want default rendering to occur do not call the base implementation. You can call OnRenderCellBackground method so events can occur.
            </summary>
            <param name="e">Information provided for rendering.</param>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeSystemRenderer.DrawCellCheckBox(DevComponents.Tree.Display.NodeCellRendererEventArgs)">
            <summary>
            Draws cell check box.  If you need to provide custom rendering this is the method that you should override in your custom rendered. If you
            do not want default rendering to occur do not call the base implementation. You can call OnRenderCellCheckBox method so events can occur.
            </summary>
            <param name="e">Information provided for rendering.</param>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeSystemRenderer.DrawCellImage(DevComponents.Tree.Display.NodeCellRendererEventArgs)">
            <summary>
            Draws cell image. If you need to provide custom rendering this is the method that you should override in your custom rendered. If you
            do not want default rendering to occur do not call the base implementation. You can call OnRenderCellImage method so events can occur.
            </summary>
            <param name="e">Information provided for rendering.</param>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeSystemRenderer.DrawCellText(DevComponents.Tree.Display.NodeCellRendererEventArgs)">
            <summary>
            Draws cell text. If you need to provide custom rendering this is the method that you should override in your custom rendered. If you
            do not want default rendering to occur do not call the base implementation. You can call OnRenderCellText method so events can occur.
            </summary>
            <param name="e">Information provided for rendering.</param>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeSystemRenderer.DrawSelection(DevComponents.Tree.SelectionRendererEventArgs)">
            <summary>
            Draws selection for SelectedNode. If you need to provide custom rendering this is the method that you should override in your custom rendered. If you
            do not want default rendering to occur do not call the base implementation. You can call OnRenderSelection method so events can occur.
            </summary>
            <param name="e">Information provided for rendering.</param>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeSystemRenderer.DrawConnector(DevComponents.Tree.Display.ConnectorRendererEventArgs)">
            <summary>
            Draws connector between nodes. If you need to provide custom rendering this is the method that you should override in your custom rendered. If you
            do not want default rendering to occur do not call the base implementation. You can call OnRenderConnector method so events can occur.
            </summary>
            <param name="e">Information provided for rendering.</param>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeSystemRenderer.DrawTreeBackground(DevComponents.Tree.Display.TreeBackgroundRendererEventArgs)">
            <summary>
            Draws the tree background. If you need to provide custom rendering this is the method that you should override in your custom rendered. If you
            do not want default rendering to occur do not call the base implementation. You can call OnRenderTreeBackground method so events can occur.
            </summary>
            <param name="e">Information provided for rendering.</param>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeProfessionalRenderer.DrawNodeBackground(DevComponents.Tree.Display.NodeRendererEventArgs)">
            <summary>
            Draws node background. If you need to provide custom rendering this is the method that you should override in your custom rendered. If you
            do not want default rendering to occur do not call the base implementation. You can call OnRenderNodeBackground method so events can occur.
            </summary>
            <param name="e">Information provided for rendering.</param>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeProfessionalRenderer.PaintBackground(DevComponents.Tree.Display.NodeRendererEventArgs)">
            <summary>
            Paints background of the node.
            </summary>
            <param name="e">Context information.</param>
        </member>
        <member name="P:DevComponents.Tree.Display.NodeProfessionalRenderer.ColorTable">
            <summary>
            Gets or sets the color table used by renderer.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.Display.NodeSelectionDisplay">
            <summary>
            Represent class that paints selection around node.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.Display.NodeTreeDisplay">
            <summary>
            Summary description for NodeTreeDisplay.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeTreeDisplay.#ctor(DevComponents.Tree.TreeGX)">
            <summary>Creates new instance of the class</summary>
            <param name="tree">Object to initialize class with.</param>
        </member>
        <member name="M:DevComponents.Tree.Display.NodeTreeDisplay.Paint(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the treee on canvas.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.SelectionRendererEventArgs">
            <summary>
            Data form RenderSelection event.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.SelectionRendererEventArgs.Graphics">
            <summary>
            Gets or sets reference to Graphics object, canvas node is rendered on.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.SelectionRendererEventArgs.Node">
            <summary>
            Gets or sets the reference to selected Node object.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.SelectionRendererEventArgs.Bounds">
            <summary>
            Gets or sets the selection bounds.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.SelectionRendererEventArgs.BorderColor">
            <summary>
            Gets or sets border color of the selection rectangle.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.SelectionRendererEventArgs.FillColor">
            <summary>
            Gets or sets fill color of the selection rectangle.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.SelectionRendererEventArgs.Width">
            <summary>
            Gets or sets the width in pixels of the border of the selection rectangle.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.Display.TreeBackgroundRendererEventArgs">
            <summary>
            Provides data for tree background rendering events.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.TreeBackgroundRendererEventArgs.Graphics">
            <summary>
            Gets or sets reference to Graphics object, canvas tree background is rendered on.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Display.TreeBackgroundRendererEventArgs.TreeGX">
            <summary>
            Gets or sets the reference to TreeGX control.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Display.TreeBackgroundRendererEventArgs.#ctor(System.Drawing.Graphics,DevComponents.Tree.TreeGX)">
            <summary>
            Creates new instance of the class and initializes it with default values.
            </summary>
            <param name="g">Reference to graphics object.</param>
        </member>
        <member name="T:DevComponents.Tree.ElementSerializer">
            <summary>
            Represents class that can serialize compatible marked properties.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ElementSerializer.DeserializeImage(System.Xml.XmlElement)">
            <summary>
            XML element is expected to be something like <image>Image data Base64 encoded</image>
            </summary>
            <param name="xml">Image data</param>
            <returns></returns>
        </member>
        <member name="T:DevComponents.Tree.ElementStyle">
            <summary>
            Represents visual style of an User Interface Element.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.#ctor">
            <summary>Creates new instance of the class.</summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.ShouldSerializeBackColor">
            <summary>
            Indicates whether BackgroundColor should be serialized. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.ResetBackColor">
            <summary>
            Resets BackgroundColor to it's default value. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.ShouldSerializeBackColor2">
            <summary>
            Indicates whether BackgroundColor2 should be serialized. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.ResetBackColor2">
            <summary>
            Resets BackgroundColor2 to it's default value. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.ResetBackgroundImage">
            <summary>
            Resets BackgroundImage to it's default value null (VB Nothing). Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.ShouldSerializeTextColor">
            <summary>
            Indicates whether TextColor should be serialized. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.ResetTextColor">
            <summary>
            Resets TextColor to it's default value. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.ShouldSerializeTextShadowColor">
            <summary>
            Indicates whether TextShadowColor should be serialized. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.ResetTextShadowColor">
            <summary>
            Resets TextColor to it's default value. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.ShouldSerializeTextShadowOffset">
            <summary>
            Indicates whether TextShadowOffset should be serialized. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.ResetTextShadowOffset">
            <summary>
            Resets TextShadowOffset to it's default value. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.SetSize(System.Drawing.Size)">
            <summary>
            Sets size of the element style.
            </summary>
            <param name="size">Indicates new size.</param>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.ShouldSerializeBorderColor">
            <summary>
            Indicates whether BorderColor should be serialized. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.ResetBorderColor">
            <summary>
            Resets BorderColor to it's default value. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.ShouldSerializeBorderColor2">
            <summary>
            Indicates whether BorderColor3 should be serialized. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.ResetBorderColor2">
            <summary>
            Resets BorderColor to it's default value. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.ShouldSerializeBorderColorLight">
            <summary>
            Indicates whether BorderColorLight should be serialized. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.ResetBorderColorLight">
            <summary>
            Resets BorderColor to it's default value. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.ShouldSerializeBorderColorLight2">
            <summary>
            Indicates whether BorderColor2 should be serialized. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.ResetBorderColorLight2">
            <summary>
            Resets BorderColorLight2 to it's default value. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.ShouldSerializeBorderLeftColor">
            <summary>
            Indicates whether property should be serialized. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.ResetBorderLeftColor">
            <summary>
            Resets property to it's default value. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.ShouldSerializeBorderRightColor">
            <summary>
            Indicates whether property should be serialized. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.ResetBorderRightColor">
            <summary>
            Resets property to it's default value. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.ShouldSerializeBorderTopColor">
            <summary>
            Indicates whether property should be serialized. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.ResetBorderTopColor">
            <summary>
            Resets property to it's default value. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.ShouldSerializeBorderBottomColor">
            <summary>
            Indicates whether property should be serialized. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.ResetBorderBottomColor">
            <summary>
            Resets property to it's default value. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.Dispose">
            <summary>
            Releases all resurces used in this control. After calling Dispose()
            object is not in valid state and cannot be recovered to the valid state.
            Recreation of the object is required.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.ApplyStyle(DevComponents.Tree.ElementStyle)">
            <summary>
            Applies a "child/inherited" style to this style. Use this method to create style
            hierarchies.
            </summary>
            <remarks>
            This method is used to support style hierarchies where a base style is defined
            and inherited/child styles are derived and based on it. By using this method on the
            base style you can apply only style changes defined by the child style. For example if
            you defined a base style for normal user interface element then in most cases you do
            not want to redefine the styling for the case when same user interface element is
            selected. You will just defined the behavior of the selected state and then apply it to
            the base normal style using ApplyStyle method.
            </remarks>
            <param name="style">Style to apply to current style.</param>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.Copy">
            <summary>
            Makes an exact copy of the style.
            </summary>
            <returns>New copy of ElementStyle object.</returns>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.Reset">
            <summary>
            Reset all style properties to default values.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.GetDefaultCellStyle(DevComponents.Tree.ElementStyle)">
            <summary>Returns default style for the Cell object.</summary>
            <param name="defaultNodeStyle">
            Reference to the default style for the Node. Cell style is based on the given
            node style.
            </param>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.GetDefaultDisabledCellStyle">
            <summary>Returns default style for disabled cells.</summary>
            <returns>Returns new instance of ElementStyle object.</returns>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.GetDefaultSelectedCellStyle">
            <summary>Returns default style for the selected cell object.</summary>
            <returns>New instance of the ElementStyle object.</returns>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.SetColorsAlpha(DevComponents.Tree.ElementStyle,System.Int32)">
            <summary>
            Sets Alpha value for all colors defined by style to specified value.
            </summary>
            <param name="style">Style to change.</param>		
            <param name="alpha">Alpha value for the colors.</param>
        </member>
        <member name="M:DevComponents.Tree.ElementStyle.GetColorScheme">
            <summary>
            Returns reference to ColorScheme object used by this style.
            </summary>
            <returns>Instance of ColorScheme object or null if object could not be obtained.</returns>
        </member>
        <member name="E:DevComponents.Tree.ElementStyle.StyleChanged">
            <summary>
            Occurs when appearance property of the style has changed.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.ElementStyle.Disposed">
            <summary>
            Occurs when component is Disposed.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BackColorBlend">
            <summary>
            Gets the collection that defines the multicolor gradient background.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BackColor">
            <summary>
            Gets or sets the background color for UI element. If used in combination with
            BackgroundColor2 is specifies starting gradient color.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BackColorSchemePart">
            <summary>
            Gets or sets the color scheme color that is used as background color. Setting
            this property overrides the setting of the corresponding BackColor property.
            Color scheme colors are automatically managed and are based on current system colors.
            That means if colors on the system change the color scheme will ensure that it's colors
            are changed as well to fit in the color scheme of target system. Set this property to
            <a href="TreeGX~DevComponents.Tree.eColorSchemePart.html">eColorSchemePart.None</a> to
            specify explicit color to use through BackColor property.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BackColor2">
            <summary>
            Gets or sets the target gradient background color for UI element.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BackColor2SchemePart">
            <summary>
            Gets or sets the color scheme color that is used as target gradient background color. Setting
            this property overrides the setting of the corresponding BackColor2 property.
            Color scheme colors are automatically managed and are based on current system colors.
            That means if colors on the system change the color scheme will ensure that it's colors
            are changed as well to fit in the color scheme of target system. Set this property to
            <a href="TreeGX~DevComponents.Tree.eColorSchemePart.html">eColorSchemePart.None</a> to
            specify explicit color to use through BackColor2 property.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BackColorGradientAngle">
            <summary>
            Gets or sets the background gradient angle.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BackColorGradientType">
            <summary>
            Gets or sets the background gradient fill type. Default value is Linear.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BackgroundImage">
            <summary>
            Specifies background image.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BackgroundImagePosition">
            <summary>
            Specifies background image position when container is larger than image.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BackgroundImageAlpha">
            <summary>
            Specifies the transparency of background image.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.TextColor">
            <summary>
            Gets or sets the text color displayed in this UI element.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.TextColorSchemePart">
            <summary>
            Gets or sets the color scheme color that is used as text color. Setting
            this property overrides the setting of the corresponding TextColor property.
            Color scheme colors are automatically managed and are based on current system colors.
            That means if colors on the system change the color scheme will ensure that it's colors
            are changed as well to fit in the color scheme of target system. Set this property to
            <a href="TreeGX~DevComponents.Tree.eColorSchemePart.html">eColorSchemePart.None</a> to
            specify explicit color to use through TextColor property.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.TextShadowColor">
            <summary>
            Gets or sets the text shadow color.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.TextShadowColorSchemePart">
            <summary>
            Gets or sets the color scheme color that is used as text shadow color. Setting
            this property overrides the setting of the corresponding TextShadowColor property.
            Color scheme colors are automatically managed and are based on current system colors.
            That means if colors on the system change the color scheme will ensure that it's colors
            are changed as well to fit in the color scheme of target system. Set this property to
            <a href="TreeGX~DevComponents.Tree.eColorSchemePart.html">eColorSchemePart.None</a> to
            specify explicit color to use through TextColor property.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.TextShadowOffset">
            <summary>
            Indicates text shadow offset in pixels
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.Font">
            <summary>
            Gets or sets the Font used to draw this the text.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.WordWrap">
            <summary>
            Gets or sets a value that determines whether text is displayed in multiple lines or one long line.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.TextAlignment">
            <summary>
            Specifies alignment of the text.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.TextLineAlignment">
            <summary>
            Specifies alignment of the text.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.TextTrimming">
            <summary>
            Specifies how to trim characters when text does not fit.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.MarginHorizontal">
            <summary>
            Gets the total horizontal margin (Left + Right)
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.MarginVertical">
            <summary>
            Gets the total vertical margin (Top + Bottom)
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.MarginLeft">
            <summary>
            Gets or sets the left margin.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.MarginRight">
            <summary>
            Gets or sets the right margin.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.MarginTop">
            <summary>
            Gets or sets the top margin.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.MarginBottom">
            <summary>
            Gets or sets the bottom margin.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.SizeChanged">
            <summary>
            Gets or sets whether any style property has changed which could influence the size of the style.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.Size">
            <summary>
            Gets the calcuated size of the element style.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.Border">
            <summary>
            Gets or sets the border type for all sides of the element.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BorderWidth">
            <summary>
            Gets or sets border width in pixels.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BorderTop">
            <summary>
            Gets or sets the border type for top side of the element.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BorderBottom">
            <summary>
            Gets or sets the border type for bottom side of the element.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BorderLeft">
            <summary>
            Gets or sets the border type for left side of the element.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BorderRight">
            <summary>
            Gets or sets the border type for right side of the element.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BorderTopWidth">
            <summary>
            Gets or sets border width in pixels.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BorderBottomWidth">
            <summary>
            Gets or sets border width in pixels.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BorderLeftWidth">
            <summary>
            Gets or sets border width in pixels.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BorderRightWidth">
            <summary>
            Gets or sets border width in pixels.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BorderColor">
            <summary>
            Gets or sets the border color for all sides. Specifing the color for the side will override this value.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BorderColorSchemePart">
            <summary>
            Gets or sets the color scheme color that is used as border color. Setting
            this property overrides the setting of the corresponding BorderColor property.
            Color scheme colors are automatically managed and are based on current system colors.
            That means if colors on the system change the color scheme will ensure that it's colors
            are changed as well to fit in the color scheme of target system. Set this property to
            <a href="TreeGX~DevComponents.Tree.eColorSchemePart.html">eColorSchemePart.None</a> to
            specify explicit color to use through BorderColor property.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BorderColor2">
            <summary>
            Gets or sets the target background gradient color for border on all sides. Specifing the color for the side will override this value. Gradient border colors
            be employed only when per side border color is not specified.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BorderColor2SchemePart">
            <summary>
            Gets or sets the color scheme color that is used as taget gradient border color. Setting
            this property overrides the setting of the corresponding BorderColor property.
            Color scheme colors are automatically managed and are based on current system colors.
            That means if colors on the system change the color scheme will ensure that it's colors
            are changed as well to fit in the color scheme of target system. Set this property to
            <a href="TreeGX~DevComponents.Tree.eColorSchemePart.html">eColorSchemePart.None</a> to
            specify explicit color to use through BorderColor property.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BorderGradientAngle">
            <summary>
            Gets or sets the border gradient angle. Default value is 90.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BorderColorLight">
            <summary>
            Gets or sets the color for light border part when etched border is used.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BorderColorLightSchemePart">
            <summary>
            Gets or sets the color scheme color that is used as border light color for etched border style. Setting
            this property overrides the setting of the corresponding BorderColor property.
            Color scheme colors are automatically managed and are based on current system colors.
            That means if colors on the system change the color scheme will ensure that it's colors
            are changed as well to fit in the color scheme of target system. Set this property to
            <a href="TreeGX~DevComponents.Tree.eColorSchemePart.html">eColorSchemePart.None</a> to
            specify explicit color to use through BorderColor property.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BorderColorLight2">
            <summary>
            Gets or sets the target background gradient color for border on all sides. Specifing the color for the side will override this value. Gradient border colors
            be employed only when per side border color is not specified.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BorderColorLight2SchemePart">
            <summary>
            Gets or sets the color scheme color that is used as taget gradient border light color for etched border style. Setting
            this property overrides the setting of the corresponding BorderColor property.
            Color scheme colors are automatically managed and are based on current system colors.
            That means if colors on the system change the color scheme will ensure that it's colors
            are changed as well to fit in the color scheme of target system. Set this property to
            <a href="TreeGX~DevComponents.Tree.eColorSchemePart.html">eColorSchemePart.None</a> to
            specify explicit color to use through BorderColor property.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BorderLightGradientAngle">
            <summary>
            Gets or sets the light border gradient angle. Default value is 90.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BorderLeftColor">
            <summary>
            Gets or sets the background color for the left side border.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BorderLeftColorSchemePart">
            <summary>
            Gets or sets the color scheme color that is used as left border color. Setting
            this property overrides the setting of the corresponding BorderLeftColor property.
            Color scheme colors are automatically managed and are based on current system colors.
            That means if colors on the system change the color scheme will ensure that it's colors
            are changed as well to fit in the color scheme of target system. Set this property to
            <a href="TreeGX~DevComponents.Tree.eColorSchemePart.html">eColorSchemePart.None</a> to
            specify explicit color to use through BorderLeftColor property.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BorderRightColor">
            <summary>
            Gets or sets the background color for the right side border.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BorderRightColorSchemePart">
            <summary>
            Gets or sets the color scheme color that is used as right border color. Setting
            this property overrides the setting of the corresponding BorderRightColor property.
            Color scheme colors are automatically managed and are based on current system colors.
            That means if colors on the system change the color scheme will ensure that it's colors
            are changed as well to fit in the color scheme of target system. Set this property to
            <a href="TreeGX~DevComponents.Tree.eColorSchemePart.html">eColorSchemePart.None</a> to
            specify explicit color to use through BorderRightColor property.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BorderTopColor">
            <summary>
            Gets or sets the background color for the top side border.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BorderTopColorSchemePart">
            <summary>
            Gets or sets the color scheme color that is used as top border color. Setting
            this property overrides the setting of the corresponding BorderTopColor property.
            Color scheme colors are automatically managed and are based on current system colors.
            That means if colors on the system change the color scheme will ensure that it's colors
            are changed as well to fit in the color scheme of target system. Set this property to
            <a href="TreeGX~DevComponents.Tree.eColorSchemePart.html">eColorSchemePart.None</a> to
            specify explicit color to use through BorderTopColor property.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BorderBottomColor">
            <summary>
            Gets or sets the background color for the bottom side border.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.BorderBottomColorSchemePart">
            <summary>
            Gets or sets the color scheme color that is used as bottom border color. Setting
            this property overrides the setting of the corresponding BorderBottomColor property.
            Color scheme colors are automatically managed and are based on current system colors.
            That means if colors on the system change the color scheme will ensure that it's colors
            are changed as well to fit in the color scheme of target system. Set this property to
            <a href="TreeGX~DevComponents.Tree.eColorSchemePart.html">eColorSchemePart.None</a> to
            specify explicit color to use through BorderBottomColor property.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.PaddingHorizontal">
            <summary>
            Gets the total horizontal padding (Left + Right)
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.PaddingVertical">
            <summary>
            Gets the total vertical padding (Top + Bottom)
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.PaddingTop">
            <summary>
            Gets or sets the amount of space to insert between the top border of the element and the content. 
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.PaddingBottom">
            <summary>
            Gets or sets the amount of space to insert between the bottom border of the element and the content. 
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.PaddingLeft">
            <summary>
            Gets or sets the amount of space to insert between the left border of the element and the content. 
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.PaddingRight">
            <summary>
            Gets or sets the amount of space to insert between the right border of the element and the content. 
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.Name">
            <summary>
            Gets or sets the name of the style.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.Class">
            <summary>
            Gets or sets the class style belongs to. The Class styles are used to apply predefined values to the styles that belong to the same class.
            This feature is used to manage color schemes/tables per class style.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.Description">
            <summary>
            Gets or sets the description of the style.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.Site">
            <summary>
            Gets or sets the Site associated with this component. Used by Windows forms designer.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.MaximumHeight">
            <summary>
            Gets or sets the maximum height of the element. This property should be used in
            conjunction with the <see cref="P:DevComponents.Tree.ElementStyle.WordWrap">WordWrap</see> property to limit the size of
            text bounding box.
            </summary>
            <remarks>Default value is 0 which indicates that height of the style is unlimited.</remarks>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.MaximumWidth">
            <summary>
            Gets or sets the maximum width of the element. This property should be used in
            conjunction with the <see cref="P:DevComponents.Tree.ElementStyle.WordWrap">WordWrap</see> property to limit the size of
            text bounding box.
            </summary>
            <remarks>Default value is 0 which indicates that width of the style is not limited.</remarks>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.StringFormat">
            <summary>
            Returns System.Drawing.StringFormat constructed from current style settings.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.TextFormat">
            <summary>
            Returns eTextFormat constructed from current style settings.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.CornerType">
            <summary>
            Gets or sets the border corner type for all 4 sides. Default corner type is Square.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.CornerTypeTopLeft">
            <summary>
            Gets or sets the border corner type for top left corner. Default value is Inherit which means that setting from CornerType property is used.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.CornerTypeTopRight">
            <summary>
            Gets or sets the border corner type for top right corner. Default value is Inherit which means that setting from CornerType property is used.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.CornerTypeBottomLeft">
            <summary>
            Gets or sets the border corner type for bottom left corner. Default value is Inherit which means that setting from CornerType property is used.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.CornerTypeBottomRight">
            <summary>
            Gets or sets the border corner type for bottom right corner. Default value is Inherit which means that setting from CornerType property is used.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.CornerDiameter">
            <summary>
            Gets or sets the diameter in pixels of the corner type rounded or diagonal.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.PaintLeftBorder">
            <summary>
            Gets whether to paint left border for the style.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.PaintRightBorder">
            <summary>
            Gets whether to paint right border for the style.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.PaintTopBorder">
            <summary>
            Gets whether to paint top border for the style.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.PaintBottomBorder">
            <summary>
            Gets whether to paint bottom border for the style.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.PaintBorder">
            <summary>
            Gets whether to paint any border for the style.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.Custom">
            <summary>
            Gets whether custom has any of properties changed.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.DesignMode">
            <summary>
            Gets or sets whether ElementStyle is in design mode.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.Parent">
            <summary>
            Gets or sets the reference to the parent collection.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyle.TreeControl">
            <summary>
            Gets or sets the tree control style is assigned to.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.eGradientType">
            <summary>
            Specifies the type of the gradient fill.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eGradientType.Linear">
            <summary>
            Represents linear gradient fill.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eGradientType.Radial">
            <summary>
            Represents radial gradient fill.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.ElementStyleCollection">
            <summary>
            Represents collection for Node objects.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyleCollection.#ctor">
            <summary>Creates new instance of the object.</summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyleCollection.Add(DevComponents.Tree.ElementStyle)">
            <summary>
            Adds new object to the collection.
            </summary>
            <param name="tab">Object to add.</param>
            <returns>Index of newly added object.</returns>
        </member>
        <member name="M:DevComponents.Tree.ElementStyleCollection.Insert(System.Int32,DevComponents.Tree.ElementStyle)">
            <summary>
            Inserts new object into the collection.
            </summary>
            <param name="index">Position of the object.</param>
            <param name="value">Object to insert.</param>
        </member>
        <member name="M:DevComponents.Tree.ElementStyleCollection.IndexOf(DevComponents.Tree.ElementStyle)">
            <summary>
            Returns index of the object inside of the collection.
            </summary>
            <param name="value">Reference to the object.</param>
            <returns>Index of the object.</returns>
        </member>
        <member name="M:DevComponents.Tree.ElementStyleCollection.Contains(DevComponents.Tree.ElementStyle)">
            <summary>
            Returns whether collection contains specified object.
            </summary>
            <param name="value">Object to look for.</param>
            <returns>true if object is part of the collection, otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.ElementStyleCollection.Remove(DevComponents.Tree.ElementStyle)">
            <summary>
            Removes specified object from the collection.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:DevComponents.Tree.ElementStyleCollection.CopyTo(DevComponents.Tree.ElementStyle[],System.Int32)">
            <summary>
            Copies collection into the specified array.
            </summary>
            <param name="array">Array to copy collection to.</param>
            <param name="index">Starting index.</param>
        </member>
        <member name="M:DevComponents.Tree.ElementStyleCollection.CopyTo(DevComponents.Tree.ElementStyle[])">
            <summary>
            Copies contained items to the Node array.
            </summary>
            <param name="array">Array to copy to.</param>
        </member>
        <member name="P:DevComponents.Tree.ElementStyleCollection.Item(System.Int32)">
            <summary>
            Returns reference to the object in collection based on it's index.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.ElementStyleCollection.Item(System.String)">
            <summary>
            Returns reference to the object in collection based on it's name.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.ElementStyleCollectionEditor">
            <summary>
            Support for ElementStyle design-time editor.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyleCollectionEditor.#ctor(System.Type)">
            <summary>Creates new instance of the object.</summary>
        </member>
        <member name="T:DevComponents.Tree.ElementStyleDisplay">
            <summary>
            Paints the ElementStyle
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyleDisplay.#ctor">
            <summary>Creates new instance of the object.</summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyleDisplay.PaintText(DevComponents.Tree.ElementStyleDisplayInfo,System.String,System.Drawing.Font)">
            <summary>
            Paints text for given style.
            </summary>
            <param name="e">Display information.</param>
            <param name="text">Text to paint.</param>
            <param name="defaultFont">Default font if no font by style is specified.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DevComponents.Tree.ElementStyleDisplay.PaintText(DevComponents.Tree.ElementStyleDisplayInfo,System.String,System.Drawing.Font,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:DevComponents.Tree.ElementStyleDisplay.PaintText(DevComponents.Tree.ElementStyleDisplayInfo,System.String,System.Drawing.Font,System.Boolean,DevComponents.Tree.eTextFormat)" -->
        <member name="M:DevComponents.Tree.ElementStyleDisplay.GetStyleRegion(DevComponents.Tree.ElementStyleDisplayInfo)">
            <summary>Returns new Region object for given ElementStyle.</summary>
            <returns>New instance of Region object.</returns>
            <param name="e">Information to describe ElementStyle.</param>
        </member>
        <member name="M:DevComponents.Tree.ElementStyleDisplay.GetInsideClip(DevComponents.Tree.ElementStyleDisplayInfo)">
            <summary>
            Returns the clipping for the content of the element style.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Tree.ElementStyleDisplay.Paint(DevComponents.Tree.ElementStyleDisplayInfo)">
            <summary>
            Paints the element style on the canvas.
            </summary>
            <param name="e">Holds information neccessary to paint style on canvas.</param>
        </member>
        <member name="M:DevComponents.Tree.ElementStyleDisplay.PaintBorder(DevComponents.Tree.ElementStyleDisplayInfo)">
            <summary>
            Paint style border.
            </summary>
            <param name="e">Style display information.</param>
        </member>
        <member name="M:DevComponents.Tree.ElementStyleDisplay.PaintBackground(DevComponents.Tree.ElementStyleDisplayInfo)">
            <summary>
            Paints style background.
            </summary>
            <param name="e">Style display information.</param>
        </member>
        <member name="M:DevComponents.Tree.ElementStyleDisplay.PaintBackgroundImage(DevComponents.Tree.ElementStyleDisplayInfo)">
            <summary>
            Paints style background image.
            </summary>
            <param name="e">Style display information.</param>
        </member>
        <member name="M:DevComponents.Tree.ElementStyleDisplay.GetBackgroundRectangle(DevComponents.Tree.ElementStyle,System.Drawing.Rectangle)">
            <summary>
            Returns background rectangle for given style by taking in account margins.
            </summary>
            <param name="style">Reference to style object.</param>
            <param name="bounds">Style bounds</param>
            <returns>Background rectangle.</returns>
        </member>
        <member name="M:DevComponents.Tree.ElementStyleDisplay.GetBackgroundPath(DevComponents.Tree.ElementStyle,System.Drawing.Rectangle)">
            <summary>
            Returns GraphicsPath for given style.
            </summary>
            <param name="style">Reference to style.</param>
            <param name="bounds">Style bounds.</param>
            <returns>New instance of GraphicsPath</returns>
        </member>
        <member name="M:DevComponents.Tree.ElementStyleDisplay.GetBackgroundPath(DevComponents.Tree.ElementStyle,System.Drawing.Rectangle,DevComponents.Tree.eStyleBackgroundPathPart)">
            <summary>
            Returns GraphicsPath for given style.
            </summary>
            <param name="style">Reference to style.</param>
            <param name="bounds">Style bounds.</param>
            <returns>New instance of GraphicsPath</returns>
        </member>
        <member name="T:DevComponents.Tree.ElementStyleDisplayInfo">
            <summary>
            Represents information neccessary to paint the style on canvas.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.ElementStyleDisplayInfo.Style">
            <summary>Reference to ElementStyle object.</summary>
        </member>
        <member name="F:DevComponents.Tree.ElementStyleDisplayInfo.Graphics">
            <summary>Reference to Graphics object.</summary>
        </member>
        <member name="F:DevComponents.Tree.ElementStyleDisplayInfo.Bounds">
            <summary>ElementStyle bounds.</summary>
        </member>
        <member name="F:DevComponents.Tree.ElementStyleDisplayInfo.RightToLeft">
            <summary>Get or sets whether layout is right-to-left.</summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyleDisplayInfo.#ctor">
            <summary>Creates new instance of the object.</summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyleDisplayInfo.#ctor(DevComponents.Tree.ElementStyle,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>Creates new instance of the object and initializes it with default values.</summary>
            <param name="style">Style to initialize object with.</param>
            <param name="g">Graphics object to initialize object with.</param>
            <param name="bounds">Bounds to initialize object with.</param>
        </member>
        <member name="T:DevComponents.Tree.eStyleBackgroundPathPart">
            <summary>
            Specifies part of the background path.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eStyleBackgroundPathPart.Complete">
            <summary>
            Indicates complete background path
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eStyleBackgroundPathPart.TopHalf">
            <summary>
            Indicates Top half of background path
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eStyleBackgroundPathPart.BottomHalf">
            <summary>
            Indicates Bottom half of background path
            </summary>
        </member>
        <member name="T:DevComponents.Tree.ElementStyleLayout">
            <summary>
            Represents the layout for the element style.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ElementStyleLayout.CalculateStyleSize(DevComponents.Tree.ElementStyle,System.Drawing.Font)">
            <summary>
            Calculates size of an style element.
            </summary>
            <param name="style">Style to calculate size for.</param>
            <param name="defaultFont">Default font that will be used by style if style does not uses it's own font.</param>
            <returns>Size of the style element. At this time only Height memeber will be calculated.</returns>
        </member>
        <member name="M:DevComponents.Tree.ElementStyleLayout.HorizontalStyleWhiteSpace(DevComponents.Tree.ElementStyle)">
            <summary>
            Returns the total white space for a style. Whitespace is the space between the edge of the element and inner content of the element.
            </summary>
            <param name="es">Style to return white space for</param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Tree.ElementStyleLayout.VerticalStyleWhiteSpace(DevComponents.Tree.ElementStyle)">
            <summary>
            Returns the total white space for a style. Whitespace is the space between the edge of the element and inner content of the element.
            </summary>
            <param name="es">Style to return white space for.</param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Tree.ElementStyleLayout.LeftWhiteSpace(DevComponents.Tree.ElementStyle)">
            <summary>
            Returns total white space for left side of the style. Whitespace is the space between the edge of the element and inner content of the element.
            </summary>
            <param name="es">Style to return white space for.</param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Tree.ElementStyleLayout.RightWhiteSpace(DevComponents.Tree.ElementStyle)">
            <summary>
            Returns total white space for right side of the style. Whitespace is the space between the edge of the element and inner content of the element.
            </summary>
            <param name="es">Style to return white space for.</param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Tree.ElementStyleLayout.TopWhiteSpace(DevComponents.Tree.ElementStyle)">
            <summary>
            Returns total white space for top side of the style. Whitespace is the space between the edge of the element and inner content of the element.
            </summary>
            <param name="es">Style to return white space for.</param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Tree.ElementStyleLayout.BottomWhiteSpace(DevComponents.Tree.ElementStyle)">
            <summary>
            Returns total white space for top side of the style. Whitespace is the space between the edge of the element and inner content of the element.
            </summary>
            <param name="es">Style to return white space for.</param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Tree.ElementStyleLayout.StyleSpacing(DevComponents.Tree.ElementStyle,DevComponents.Tree.eSpacePart,DevComponents.Tree.eStyleSide)">
            <summary>
            Returns amount of spacing for specified style parts.
            </summary>
            <param name="es">Style to calculate spacing for.</param>
            <param name="part">Part of the style spacing is calculated for. Values can be combined.</param>
            <param name="side">Side of the style to use for calculation.</param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Tree.ElementStyleLayout.GetInnerRect(DevComponents.Tree.ElementStyle,System.Drawing.Rectangle)">
            <summary>
            Gets inner rectangle taking in account style padding, margins and border.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.BackgroundColorBlend">
            <summary>
            Defines single color blend point for the multicolor gradient fills.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.BackgroundColorBlend.#ctor">
            <summary>
            Creates new instance of the class. When defining multicolor gradinet blends and using the percentage positions the positions created
            must start with 0f and end with 1f.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.BackgroundColorBlend.#ctor(System.Drawing.Color,System.Single)">
            <summary>
            Creates new instance of the class and initialize it with default values.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.BackgroundColorBlend.#ctor(System.Int32,System.Single)">
            <summary>
            Creates new instance of the class and initialize it with default values.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.BackgroundColorBlend.Color">
            <summary>
            Gets or sets Color to use in multicolor gradient blend at specified position.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.BackgroundColorBlend.Position">
            <summary>
            Gets or sets the color position in multicolor gradient blend. Values less or equal to 1 are used as percentage specifing percentages of distance along the gradient line.
            Values greater than 1 are used as absolute pixel values of distance along the gradient line.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.BackgroundColorBlendCollection">
            <summary>
            Represents Collection for the BackgroundColorBlend objects.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.BackgroundColorBlendCollection.#ctor">
            <summary>Creates new instance of the class.</summary>
        </member>
        <member name="M:DevComponents.Tree.BackgroundColorBlendCollection.Add(DevComponents.Tree.BackgroundColorBlend)">
            <summary>
            Adds new object to the collection.
            </summary>
            <param name="item">Object to add.</param>
            <returns>Index of newly added object.</returns>
        </member>
        <member name="M:DevComponents.Tree.BackgroundColorBlendCollection.AddRange(DevComponents.Tree.BackgroundColorBlend[])">
            <summary>
            Adds array of new objects to the collection.
            </summary>
            <param name="items">Array of object to add.</param>
        </member>
        <member name="M:DevComponents.Tree.BackgroundColorBlendCollection.Insert(System.Int32,DevComponents.Tree.BackgroundColorBlend)">
            <summary>
            Inserts new object into the collection.
            </summary>
            <param name="index">Position of the object.</param>
            <param name="value">Object to insert.</param>
        </member>
        <member name="M:DevComponents.Tree.BackgroundColorBlendCollection.IndexOf(DevComponents.Tree.BackgroundColorBlend)">
            <summary>
            Returns index of the object inside of the collection.
            </summary>
            <param name="value">Reference to the object.</param>
            <returns>Index of the object.</returns>
        </member>
        <member name="M:DevComponents.Tree.BackgroundColorBlendCollection.Contains(DevComponents.Tree.BackgroundColorBlend)">
            <summary>
            Returns whether collection contains specified object.
            </summary>
            <param name="value">Object to look for.</param>
            <returns>true if object is part of the collection, otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.BackgroundColorBlendCollection.Remove(DevComponents.Tree.BackgroundColorBlend)">
            <summary>
            Removes specified object from the collection.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:DevComponents.Tree.BackgroundColorBlendCollection.CopyTo(DevComponents.Tree.BackgroundColorBlend[],System.Int32)">
            <summary>
            Copies collection into the specified array.
            </summary>
            <param name="array">Array to copy collection to.</param>
            <param name="index">Starting index.</param>
        </member>
        <member name="M:DevComponents.Tree.BackgroundColorBlendCollection.CopyTo(DevComponents.Tree.BackgroundColorBlend[])">
            <summary>
            Copies contained items to the BackgroundColorBlend array.
            </summary>
            <param name="array">Array to copy to.</param>
        </member>
        <member name="M:DevComponents.Tree.BackgroundColorBlendCollection.GetColorBlend">
            <summary>
            Creates ColorBlend object based on the members of the collection. ColorBlend object will be valid only if all members of the collection
            represents relative/percentage based color blends.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Tree.BackgroundColorBlendCollection.CopyFrom(DevComponents.Tree.BackgroundColorBlendCollection)">
            <summary>
            Adds the BackgroundColorBlend objects from the collection.
            </summary>
            <param name="col">Collection to copy objects from</param>
        </member>
        <member name="M:DevComponents.Tree.BackgroundColorBlendCollection.InitializeCollection(DevComponents.Tree.BackgroundColorBlendCollection,System.Int32,System.Int32)">
            <summary>
            Initializes the collection with the two color blend.
            </summary>
            <param name="collection">Collection to initialize.</param>
            <param name="backColor1">Start color.</param>
            <param name="backColor2">End color.</param>
        </member>
        <member name="M:DevComponents.Tree.BackgroundColorBlendCollection.InitializeCollection(DevComponents.Tree.BackgroundColorBlendCollection,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes the collection with the two color blend.
            </summary>
            <param name="collection">Collection to initialize.</param>
            <param name="backColor1">Start color.</param>
            <param name="backColor2">End color.</param>
        </member>
        <member name="P:DevComponents.Tree.BackgroundColorBlendCollection.Item(System.Int32)">
            <summary>
            Returns reference to the object in collection based on it's index.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.BackgroundColorBlendConverter">
            <summary>
            Represents BackgroundColorBlend object converter.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.IElementStyleClassProvider">
            <summary>
            Defines the provider for the element style classes support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.IElementStyleClassProvider.GetClass(System.String)">
            <summary>
            Returns the instance of the ElementStyle with given class name or null if there is no class with that name defined.
            </summary>
            <param name="className">Class name. See static members of ElementStyleClassKeys class for the list of available keys.</param>
            <returns>Instance of ElementStyle for given class name or null if class cannot be found.</returns>
        </member>
        <member name="T:DevComponents.Tree.eStyleBackgroundImage">
            <summary>Specifies the way background image is displayed on background.</summary>
        </member>
        <member name="F:DevComponents.Tree.eStyleBackgroundImage.Stretch">
            <summary>Image is stretched to fill the background</summary>
        </member>
        <member name="F:DevComponents.Tree.eStyleBackgroundImage.Center">
            <summary>Image is centered inside the background</summary>
        </member>
        <member name="F:DevComponents.Tree.eStyleBackgroundImage.Tile">
            <summary>Image is tiled inside the background</summary>
        </member>
        <member name="F:DevComponents.Tree.eStyleBackgroundImage.TopLeft">
            <summary>
            Image is drawn in top left corner of container space.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eStyleBackgroundImage.TopRight">
            <summary>
            Image is drawn in top right corner of container space.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eStyleBackgroundImage.BottomLeft">
            <summary>
            Image is drawn in bottom left corner of container space.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eStyleBackgroundImage.BottomRight">
            <summary>
            Image is drawn in bottom right corner of container space.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.eCellPartAlignment">
            <summary>Indicates alignment of a part of the cell like image or check box in relation to the text.</summary>
        </member>
        <member name="F:DevComponents.Tree.eCellPartAlignment.NearCenter">
            <summary>
            Part is aligned to the left center of the text assuming left-to-right
            orientation.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eCellPartAlignment.FarCenter">
            <summary>
            Part is aligned to the right center of the text assuming left-to-right
            orientation.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eCellPartAlignment.NearTop">
            <summary>
            Part is aligned to the top left of the text assuming left-to-right
            orientation.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eCellPartAlignment.CenterTop">
            <summary>Part is aligned above the text and centered.</summary>
        </member>
        <member name="F:DevComponents.Tree.eCellPartAlignment.FarTop">
            <summary>
            Part is aligned to the top right of the text assuming left-to-right
            orientation.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eCellPartAlignment.NearBottom">
            <summary>
            Part is aligned to the bottom left of the text assuming left-to-right
            orientation.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eCellPartAlignment.CenterBottom">
            <summary>Part is aligned below the text and centered.</summary>
        </member>
        <member name="F:DevComponents.Tree.eCellPartAlignment.FarBottom">
            <summary>
            Part is aligned to the bottom right of the text assuming left-to-right
            orientation.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.eStyleTextAlignment">
            <summary>
            Specifies the alignment of a text string relative to its element's rectangle.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eStyleTextAlignment.Near">
            <summary>
            Specifies the text be aligned near from the origin position of the element's rectangle. In a left-to-right layout, the near position is left. In a right-to-left layout, the near position is right.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eStyleTextAlignment.Center">
            <summary>
            Specifies that text is aligned in the center of the element's rectangle.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eStyleTextAlignment.Far">
            <summary>
            Specifies that text is aligned far from the origin position of the element's rectangle. In a left-to-right layout, the far position is right. In a right-to-left layout, the far position is left.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.eStyleTextTrimming">
            <summary>
            Specifies how to trim characters from a text that does not completely fit into a element's shape.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eStyleTextTrimming.Character">
            <summary>
            Specifies that the text is trimmed to the nearest character.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eStyleTextTrimming.EllipsisCharacter">
            <summary>
            Specifies that the text is trimmed to the nearest character, and an ellipsis is inserted at the end of a trimmed line.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eStyleTextTrimming.EllipsisPath">
            <summary>
            The center is removed from trimmed lines and replaced by an ellipsis. The algorithm keeps as much of the last slash-delimited segment of the line as possible.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eStyleTextTrimming.EllipsisWord">
            <summary>
            Specifies that text is trimmed to the nearest word, and an ellipsis is inserted at the end of a trimmed line.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eStyleTextTrimming.None">
            <summary>
            Specifies no trimming.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eStyleTextTrimming.Word">
            <summary>
            Specifies that text is trimmed to the nearest word.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.eStyleBorderType">
            <summary>
            Specifies the border type for style element.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eStyleBorderType.None">
            <summary>Indicates no border</summary>
        </member>
        <member name="F:DevComponents.Tree.eStyleBorderType.Solid">
            <summary>Border is a solid line</summary>
        </member>
        <member name="F:DevComponents.Tree.eStyleBorderType.Dash">
            <summary>Border is a solid dash line</summary>
        </member>
        <member name="F:DevComponents.Tree.eStyleBorderType.DashDot">
            <summary>Border is solid dash-dot line</summary>
        </member>
        <member name="F:DevComponents.Tree.eStyleBorderType.DashDotDot">
            <summary>Border is solid dash-dot-dot line</summary>
        </member>
        <member name="F:DevComponents.Tree.eStyleBorderType.Dot">
            <summary>Border consists of dots</summary>
        </member>
        <member name="F:DevComponents.Tree.eStyleBorderType.Etched">
            <summary>Etched Border</summary>
        </member>
        <member name="F:DevComponents.Tree.eStyleBorderType.Double">
            <summary>Double Border</summary>
        </member>
        <member name="T:DevComponents.Tree.eVerticalAlign">
            <summary>
            Indicates absolute vertical alignment of the content.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eVerticalAlign.Top">
            <summary>
            Content is aligned to the top
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eVerticalAlign.Middle">
            <summary>
            Content is aligned in the middle
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eVerticalAlign.Bottom">
            <summary>
            Content is aligned at the bottom
            </summary>
        </member>
        <member name="T:DevComponents.Tree.eHorizontalAlign">
            <summary>
            Indicates absolute horizontal alignment
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eHorizontalAlign.Left">
            <summary>
            Content is left aligned
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eHorizontalAlign.Center">
            <summary>
            Content is centered
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eHorizontalAlign.Right">
            <summary>
            Content is right aligned
            </summary>
        </member>
        <member name="T:DevComponents.Tree.eMapPosition">
            <summary>
            Indicates prefered node layout position on Map tree layout when node is the child node of the top-level root node.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eMapPosition.Default">
            <summary>
            Node is positioned based on default algorithm.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eMapPosition.Near">
            <summary>
            Sub-root node and all nodes after it are positioned to the left of the root.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eMapPosition.Far">
            <summary>
            Sub-root node and all nodes before it are positioned to the right of the root.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.eCornerType">
            <summary>
            Indicates corner type for the border around visual element.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eCornerType.Inherit">
            <summary>
            Specifies that corner type is inherited from parent setting.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eCornerType.Square">
            <summary>
            Specifies square corner.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eCornerType.Rounded">
            <summary>
            Specifies rounded corner.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eCornerType.Diagonal">
            <summary>
            Specifies diagonal corner.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.eNodeHeaderVisibility">
            <summary>
            Specifies the column header visibility for the node.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eNodeHeaderVisibility.Automatic">
            <summary>
            Column header is automatically shown/hidden based on the node's position in the tree. When
            Node is first child node i.e. with index=0 the header will be shown, otherwise header will
            be hidden.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eNodeHeaderVisibility.AlwaysShow">
            <summary>
            Column header is always displayed regardless of node's position.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eNodeHeaderVisibility.AlwaysHide">
            <summary>
            Column header is always hidden regardless of node's position.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.eNodeRectanglePart">
            <summary>
            Indicates the part of the node.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eNodeRectanglePart.NodeContentBounds">
            <summary>
            Bounds of complete node content except expand button. This also includes the child node bounds if node is expanded.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eNodeRectanglePart.ExpandBounds">
            <summary>
            Bounds of the expand button which collapses/expands the node.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eNodeRectanglePart.ChildNodeBounds">
            <summary>
            Bounds of all child nodes of give node.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eNodeRectanglePart.CellsBounds">
            <summary>
            Bounds for cells inside a node.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eNodeRectanglePart.NodeBounds">
            <summary>
            Complete node bounds including expand button.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eNodeRectanglePart.CommandBounds">
            <summary>
            Bounds of the command button.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.eCellRectanglePart">
            <summary>
            Indicates the part of the cell.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eCellRectanglePart.CheckBoxBounds">
            <summary>
            Bounds of check box or Rectangle.Empty if there is no check-box.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eCellRectanglePart.ImageBounds">
            <summary>
            Bounds of image inside the cell or Rectangle.Empty if there is no image.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eCellRectanglePart.TextBounds">
            <summary>
            Text bounds inside of cell.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eCellRectanglePart.CellBounds">
            <summary>
            Cell bounds
            </summary>
        </member>
        <member name="T:DevComponents.Tree.eMouseOverNodePart">
            <summary>
            Indicates part of the node mouse is placed over.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eMouseOverNodePart.None">
            <summary>
            Mouse is not over any node part.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eMouseOverNodePart.Node">
            <summary>
            Mouse is placed over the node.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eMouseOverNodePart.Expand">
            <summary>
            Mouse is placed over node expand button.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eMouseOverNodePart.Cell">
            <summary>
            Mouse is placed over the cell.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eMouseOverNodePart.Command">
            <summary>
            Mouse is placed over the command button.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.eSpacePart">
            <summary>
            Indicates white-space part of the style.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eSpacePart.Padding">
            <summary>
            Represents style padding.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eSpacePart.Border">
            <summary>
            Represents style border.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eSpacePart.Margin">
            <summary>
            Represents style margin.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.eStyleSide">
            <summary>
            Indicates the style side.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eStyleSide.Left">
            <summary>
            Specifies left side of the style.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eStyleSide.Right">
            <summary>
            Specifies right side of the style.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eStyleSide.Top">
            <summary>
            Specifies top side of the style.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eStyleSide.Bottom">
            <summary>
            Specifies bottom side of the style.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.eNodeExpandVisibility">
            <summary>
            Indicates the visibility of node expand part which allows user to expand/collaps node.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eNodeExpandVisibility.Auto">
            <summary>
            Default setting which indicates that when node has child nodes expand part is visible otherwise it is hidden.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eNodeExpandVisibility.Visible">
            <summary>
            Expand part is always visible regardless of whether child nodes are present or not.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eNodeExpandVisibility.Hidden">
            <summary>
            Expand part is always hidden regardless of whether child nodes are present or not.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.eTreeAction">
            <summary>
            Specifies the action that raised a TreeGXEventArgs event
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eTreeAction.Keyboard">
            <summary>
            The event was caused by a keystroke.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eTreeAction.Mouse">
            <summary>
            The event was caused by a mouse operation.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eTreeAction.Collapse">
            <summary>
            The event was caused by the Node collapsing.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eTreeAction.Expand">
            <summary>
            The event was caused by the Node expanding.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eTreeAction.Code">
            <summary>
            The event is caused programmatically from user code.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.eNodeConnectorType">
            <summary>
            Specifies node connector type. Node connector is the type of the line/connection that is drawn to connect child node to it's parent node.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eNodeConnectorType.Curve">
            <summary>
            Curved line connector type.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eNodeConnectorType.Line">
            <summary>
            Straight line connector type.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.eConnectorCap">
            <summary>
            Specifies the cap style with which the connector line will start or end.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eConnectorCap.None">
            <summary>
            Specifies no cap.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eConnectorCap.Ellipse">
            <summary>
            Round cap type.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eConnectorCap.Arrow">
            <summary>
            Arrow cap type.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.eCellLayout">
            <summary>
            Specifies the layout type used to position the cells within the nodes.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eCellLayout.Default">
            <summary>
            Specifies that default setting is to be used for cell layout. Default is Horizontal. When set to default on the Node, setting from Tree control is used.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eCellLayout.Horizontal">
            <summary>Horizontal layout positions the cells horizontally next to each other.</summary>
        </member>
        <member name="F:DevComponents.Tree.eCellLayout.Vertical">
            <summary>
            Vertical layout positions cell vertically on top of each other.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.eCellPartLayout">
            <summary>
            Specifies the layout type used to position the parts of the cell like image, checkbox and text.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eCellPartLayout.Default">
            <summary>
            Specifies that default setting is to be used for cell parts layout. Default is Horizontal. When set to default on the Cell, setting from Tree control is used.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eCellPartLayout.Horizontal">
            <summary>Horizontal layout positions the parts of the cell horizontally next to each other.</summary>
        </member>
        <member name="F:DevComponents.Tree.eCellPartLayout.Vertical">
            <summary>
            Vertical layout positions parts of the cell vertically on top of each other.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.eColorSchemeStyle">
            <summary>
            Specifies the color scheme loaded by ColorScheme object.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemeStyle.Office2003">
            <summary>
            Indicates Office 2003 like color scheme.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemeStyle.OfficeXP">
            <summary>
            Indicates Office XP like color scheme.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eColorSchemeStyle.VS2005">
            <summary>
            Indicates VS.NET 2005 like color scheme.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.eWinXPColorScheme">
            <summary>
            Specifies the currently selected system color scheme if running on Windows XP.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eWinXPColorScheme.Undetermined">
            <summary>
            Color scheme cannot be determined.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eWinXPColorScheme.Blue">
            <summary>
            Blue color scheme.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eWinXPColorScheme.OliveGreen">
            <summary>
            Olive green color scheme.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eWinXPColorScheme.Silver">
            <summary>
            Silver color scheme.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.eDiagramFlow">
            <summary>
            Specifies the flow of diagram layout related to the root node.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eDiagramFlow.LeftToRight">
            <summary>
            Nodes are positioned from left to right with root node being the left-most node.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eDiagramFlow.RightToLeft">
            <summary>
            Nodes are positioned from right to left with root node being the right-most
            node.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eDiagramFlow.TopToBottom">
            <summary>
            Nodes are positioned from top to bottom with root node being the top node.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eDiagramFlow.BottomToTop">
            <summary>
            Nodes are positioned from bottom to top with root node being bottom node.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.eMapFlow">
            <summary>
            Specifies the flow of the map layout.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eMapFlow.Spread">
            <summary>
            Nodes are arranged around the root node.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eMapFlow.TopToBottom">
            <summary>
            Nodes are arranged from below the root node.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eMapFlow.BottomToTop">
            <summary>
            Nodes are arranged above the root node.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eMapFlow.LeftToRight">
            <summary>
            Nodes are arranged to the right of the root node.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eMapFlow.RightToLeft">
            <summary>
            Nodes are arranged to the left of the root node.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.eExpandButtonType">
            <summary>
            Specifies the type of the expand button.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eExpandButtonType.Ellipse">
            <summary>
            Indicates elliptical expand button.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eExpandButtonType.Rectangle">
            <summary>
            Indicates rectangular expand button.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eExpandButtonType.Image">
            <summary>
            Indicates that images are used for expand button. See 
            </summary>
        </member>
        <member name="T:DevComponents.Tree.eVisualStyle">
            <summary>
            Specifies the visual style for the tree control.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eVisualStyle.Default">
            <summary>
            Indicates default visual style.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.eNodeLayout">
            <summary>
            Specifies the layout type for the nodes.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eNodeLayout.Map">
            <summary>
            Nodes are arranged arround root node in map format.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eNodeLayout.Diagram">
            <summary>
            Nodes are arranged from left-to-right in diagram format.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.eNodeRenderMode">
            <summary>
            Specifies renderer type used to render nodes.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eNodeRenderMode.Default">
            <summary>
            Specifies default renderer which allows most customization through TreeGX
            properties. Default renderer integrates with the Style architecture to provide
            customization on renderer behavior.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eNodeRenderMode.Professional">
            <summary>
            	<para>Specifies professional renderer. Professional renderer is custom renderer
                which does not rely on Style architecture for customization of renderer appearance
                since it provides much richer appearance than Default renderer.</para>
            	<para>Professional renderer colors can be controls through
                NodeProfessionalColorTable object which is exposed by
                NodeProfessionalRenderer.ColorTable property.</para>
            </summary>
        </member>
        <member name="F:DevComponents.Tree.eNodeRenderMode.Custom">
            <summary>
            Specifies that custom renderer is used. When set you must also set NodeRenderer
            to renderer you want to use.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.TreeGXCellEventHandler">
            <summary>
            Defines the delegate for TreeGX cell based action events.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.TreeGXCellCancelEventHandler">
            <summary>
            Defines the delegate for TreeGX cell based action events.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.TreeGXNodeCancelEventHandler">
            <summary>
            Defines the delegate for TreeGX node based action events that can be cancelled.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.TreeGXNodeEventHandler">
            <summary>
            Defines the delegate for TreeGX node based action events.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.CommandButtonEventHandler">
            <summary>
            Defines delegate for Command button events.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.CellEditEventHandler">
            <summary>
            Defines delegate for label editing events.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.TreeGXNodeCollectionEventHandler">
            <summary>
            Defines the delegate for TreeGX node based action events.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.TreeGXDragDropEventHandler">
            <summary>
            Defines the delegate for BeforeNodeDrop and AfterNodeDrop events
            </summary>
        </member>
        <member name="T:DevComponents.Tree.TreeGXNodeMouseEventHandler">
            <summary>
            Defines the delegate for mouse based node events
            </summary>
        </member>
        <member name="T:DevComponents.Tree.NodeRendererEventHandler">
            <summary>
            Defines delegate for node rendering events.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.NodeCellRendererEventHandler">
            <summary>
            Defines delegate for cell rendering events.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.NodeExpandPartRendererEventHandler">
            <summary>
            Defines delegate for RenderExpandPart event.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.NodeCommandPartRendererEventHandler">
            <summary>
            Defines delegate for RenderExpandPart event.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.SelectionRendererEventHandler">
            <summary>
            Defines delegate for RenderExpandPart event.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.ConnectorRendererEventHandler">
            <summary>
            Defines delegate for RenderConnector event.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.TreeBackgroundRendererEventHandler">
            <summary>
            Defines delegate for TreeBackgroundRenderer events.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.MarkupLinkClickEventArgs">
            <summary>
            Provides more information about MarkupLinkClick event.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.MarkupLinkClickEventArgs.HRef">
            <summary>
            Gets the value of href attribute from the markup link that was clicked.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.MarkupLinkClickEventArgs.Name">
            <summary>
            Gets the value of name attribute from the markup link that was clicked.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.MarkupLinkClickEventArgs.#ctor(System.String,System.String)">
            <summary>
            Creates new instance of the object.
            </summary>
            <param name="name">Value of name attribute.</param>
            <param name="href">Value of href attribute.</param>
        </member>
        <member name="T:DevComponents.Tree.MarkupLinkClickEventHandler">
            <summary>
            Defines delegate for MarkupLinkClick event.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.SerializeNodeEventArgs">
            <summary>
            Represents arguments for SerializeNode event which allows you to add custom serialization data to definitions saved by control.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.SerializeNodeEventArgs.Node">
            <summary>
            Gets reference to the node being serialized or de-serialized.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.SerializeNodeEventArgs.ItemXmlElement">
            <summary>
            Gets reference to instance of XmlElement that item is serialized to or is being de-serialized from. You should not change any data directly on this element.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.SerializeNodeEventArgs.CustomXmlElement">
            <summary>
            Gets the reference to XmlElement that you can serialize to or de-serialize any custom data from. You can add child elements or set the attributes on
            this XmlElement when handling SerializeItem event. When handling DeserializeItem event you can load your data from this element.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.SerializeNodeEventHandler">
            <summary>
            Defines delegate for SerializeItem event.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.HeaderDefinition">
            <summary>
            Represents the table header.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.HeaderDefinition.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.HeaderDefinition.Columns">
            <summary>
            Gets the reference to the collection that contains the columns associated with header.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.HeaderDefinition.Name">
            <summary>
            Gets or sets the name associated with this header definition.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.HeadersCollection">
            <summary>
            Represents collection for HeaderDefinition objects.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.HeadersCollection.SetParent(DevComponents.Tree.TreeGX)">
            <summary>
            Sets the node collection belongs to.
            </summary>
            <param name="parent">HeaderDefinition that is parent of this collection.</param>
        </member>
        <member name="M:DevComponents.Tree.HeadersCollection.Add(DevComponents.Tree.HeaderDefinition)">
            <summary>
            Adds new object to the collection.
            </summary>
            <param name="ch">Object to add.</param>
            <returns>Index of newly added object.</returns>
        </member>
        <member name="M:DevComponents.Tree.HeadersCollection.Insert(System.Int32,DevComponents.Tree.HeaderDefinition)">
            <summary>
            Inserts new object into the collection.
            </summary>
            <param name="index">Position of the object.</param>
            <param name="value">Object to insert.</param>
        </member>
        <member name="M:DevComponents.Tree.HeadersCollection.IndexOf(DevComponents.Tree.HeaderDefinition)">
            <summary>
            Returns index of the object inside of the collection.
            </summary>
            <param name="value">Reference to the object.</param>
            <returns>Index of the object.</returns>
        </member>
        <member name="M:DevComponents.Tree.HeadersCollection.Contains(DevComponents.Tree.HeaderDefinition)">
            <summary>
            Returns whether collection contains specified object.
            </summary>
            <param name="value">Object to look for.</param>
            <returns>true if object is part of the collection, otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.HeadersCollection.Remove(DevComponents.Tree.HeaderDefinition)">
            <summary>
            Removes specified object from the collection.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:DevComponents.Tree.HeadersCollection.CopyTo(DevComponents.Tree.HeaderDefinition[],System.Int32)">
            <summary>
            Copies collection into the specified array.
            </summary>
            <param name="array">Array to copy collection to.</param>
            <param name="index">Starting index.</param>
        </member>
        <member name="M:DevComponents.Tree.HeadersCollection.CopyTo(DevComponents.Tree.HeaderDefinition[])">
            <summary>
            Copies contained items to the HeaderDefinition array.
            </summary>
            <param name="array">Array to copy to.</param>
        </member>
        <member name="P:DevComponents.Tree.HeadersCollection.Parent">
            <summary>
            Gets or sets the node this collection is associated with.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.HeadersCollection.Item(System.Int32)">
            <summary>
            Returns reference to the object in collection based on it's index.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.Helpers.SystemHelpers">
            <summary>
            Defines various system information based helper functions.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.ImageIndexEditor">
            <summary>
            Represents the class used by windows forms editor for picking an image from image list.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.INodeNotify">
            <summary>
            Specifies the notification interface that node uses to communicate status changes to it's parent tree.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.INodeNotify.ExpandedChanged(DevComponents.Tree.Node)">
            <summary>Called when Node.Expanded property has changed.</summary>
            <param name="node">Node which Expanded property has changed.</param>
        </member>
        <member name="M:DevComponents.Tree.INodeNotify.OnBeforeCollapse(DevComponents.Tree.TreeGXNodeCancelEventArgs)">
            <summary>Called before node is collapsed</summary>
            <param name="e">Context information.</param>
        </member>
        <member name="M:DevComponents.Tree.INodeNotify.OnBeforeExpand(DevComponents.Tree.TreeGXNodeCancelEventArgs)">
            <summary>Called before node is expanded</summary>
            <param name="e">Context information.</param>
        </member>
        <member name="M:DevComponents.Tree.INodeNotify.OnAfterCollapse(DevComponents.Tree.TreeGXNodeEventArgs)">
            <summary>Called after node is collapsed.</summary>
            <param name="e">Context information.</param>
        </member>
        <member name="M:DevComponents.Tree.INodeNotify.OnAfterExpand(DevComponents.Tree.TreeGXNodeEventArgs)">
            <summary>Called after node is expanded</summary>
            <param name="e">Context information</param>
        </member>
        <member name="T:DevComponents.Tree.Interop.WinApi">
            <summary>
            Provides WinApi functions to rest of the application.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Interop.WinApi.ResetHover(System.Windows.Forms.Control)">
            <summary>
            Resets Hoover timer for specified control.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.KeyNavigation">
            <summary>
            Provides TreeGX Keyboard handling.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.Layout.ColumnHeaderLayout">
            <summary>
            Class that is used to layout column header.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.Layout.CellLayout">
            <summary>
            Represents class for Node's cell layout.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Layout.CellLayout.Offset(DevComponents.Tree.Cell,System.Int32,System.Int32)">
            <summary>
            Offset cell bounds, check box bounds, image bounds and text bounds by specified offset.
            </summary>
            <param name="cell">Cell to offset.</param>
            <param name="x">Horizontal offset in pixels.</param>
            <param name="y">Vertical offset in pixels.</param>
        </member>
        <member name="P:DevComponents.Tree.Layout.CellLayout.ImageCheckBoxSpacing">
            <summary>
            Returns spacing between check box and image if both are displayed
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Layout.CellLayout.ImageTextSpacing">
            <summary>
            Returns spacing between image or checkbox and text
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Layout.CellLayout.CellHorizontalSpacing">
            <summary>
            Returns horizontal spacing between cells in a node
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Layout.CellLayout.CellVerticalSpacing">
            <summary>
            Returns vertical spacing between cells in a node
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Layout.CellLayout.CellPartSpacing">
            <summary>
            Spacing between different parts of the cell, like image, option button, text and expand button area
            </summary>
        </member>
        <member name="T:DevComponents.Tree.Layout.NodeDiagramLayout">
            <summary>
            Represents the class that performs node diagram layout.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.Layout.NodeLayout">
            <summary>
            Summary description for NodeLayout.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Layout.NodeLayout.PerformLayout">
            <summary>
            Performs layout of the nodes inside of the tree control.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Layout.NodeLayout.PerformSingleNodeLayout(DevComponents.Tree.Node)">
            <summary>
            Performs layout for single unassigned node. Node does not have to be part of the tree control.
            </summary>
            <param name="node">Node to perform layout on.</param>
        </member>
        <member name="M:DevComponents.Tree.Layout.NodeLayout.PrepareStyles">
            <summary>
            Resizes all styles and prepares them for layout.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Layout.NodeLayout.GetDefaultColumnInfo">
            <summary>
            Returns default top-level columns for tree control.
            </summary>
            <returns>Returns array list of ColumnInfo objects.</returns>
        </member>
        <member name="M:DevComponents.Tree.Layout.NodeLayout.GetNodeColumnInfo(DevComponents.Tree.Node)">
            <summary>
            Returns column information for a given node.
            </summary>
            <param name="node">Node to return column information for</param>
            <returns>Returns array list of ColumnInfo objects or null if there are no columns defined.</returns>
        </member>
        <member name="M:DevComponents.Tree.Layout.NodeLayout.GetColumnHeader(System.String)">
            <summary>
            Returns column header collection for the given column template name.
            </summary>
            <param name="name">Name of the column template.</param>
            <returns>Column header collection or null if template name cannot be found.</returns>
        </member>
        <member name="M:DevComponents.Tree.Layout.NodeLayout.LayoutCommandPart(DevComponents.Tree.Layout.NodeLayoutContextInfo,DevComponents.Tree.ElementStyle)">
            <summary>
            Sets the position and size of the node command button.
            </summary>
            <param name="layoutInfo">Node layout context information</param>
        </member>
        <member name="M:DevComponents.Tree.Layout.NodeLayout.LayoutExpandPart(DevComponents.Tree.Layout.NodeLayoutContextInfo,System.Boolean)">
            <summary>
            Determines the rectangle of the +/- part of the tree node that is used to expand node.
            </summary>
            <param name="layoutInfo">Node layout context information</param>
        </member>
        <member name="M:DevComponents.Tree.Layout.NodeLayout.GetExpandPartSize">
            <summary>
            Returns the size of the node expand part.
            </summary>
            <returns>Size of the expand part, default 8,8.</returns>
        </member>
        <member name="M:DevComponents.Tree.Layout.NodeLayout.LayoutNode(DevComponents.Tree.Layout.NodeLayoutContextInfo)">
            <summary>
            Provides the layout for single node.
            </summary>
            <param name="layoutInfo">Layout information.</param>
        </member>
        <member name="M:DevComponents.Tree.Layout.NodeLayout.HasExpandPart(DevComponents.Tree.Layout.NodeLayoutContextInfo)">
            <summary>
            Returns true if given node has expand part.
            </summary>
            <param name="layoutInfo">Layout context information.</param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Tree.Layout.NodeLayout.HasCommandPart(DevComponents.Tree.Layout.NodeLayoutContextInfo)">
            <summary>
            Returns whether given node has command part.
            </summary>
            <param name="layoutInfo">Layout context information.</param>
            <returns>True if command part should be drawn otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.Layout.NodeLayout.GetCellLayout">
            <summary>
            Returns class responsible for cell layout.
            </summary>
            <returns>Cell layout class.</returns>
        </member>
        <member name="M:DevComponents.Tree.Layout.NodeLayout.OffsetNodeLocation(DevComponents.Tree.Node,System.Int32,System.Int32)">
            <summary>
            Offsets node location and location of it's child nodes bounds.
            </summary>
            <param name="node">Node to offset.</param>
            <param name="x">Horizontal offset.</param>
            <param name="y">Vertical offset.</param>
        </member>
        <member name="P:DevComponents.Tree.Layout.NodeLayout.NodeVerticalSpacing">
            <summary>
            Gets or sets the vertical spacing between nodes in pixels.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Layout.NodeLayout.NodeHorizontalSpacing">
            <summary>
            Gets or sets the horizontal spacing between nodes in pixels.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Layout.NodeLayout.TreeLayoutChildNodeIndent">
            <summary>
            Gets or sets the child node indent in pixels.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Layout.NodeLayout.ExpandAreaWidth">
            <summary>
            Returns width of the expand button area. Default is 8 pixels.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Layout.NodeLayout.CommandAreaWidth">
            <summary>
            Gets or sets width of command button area. Default is 8 pixels.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Layout.NodeLayout.ExpandPartSize">
            <summary>
            Gets or sets the size of the expand part that is expanding/collapsing the node. Default value is 8,8.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Layout.NodeLayout.RootHasExpandedPart">
            <summary>
            Returns true if root node should have expanded part
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Layout.NodeLayout.ReserveExpandPartSpace">
            <summary>
            Returns true if expand part space should be accounted for even if they expand part is not visible or need to be displayed. Default value is false.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Layout.NodeDiagramLayout.RootHasExpandedPart">
            <summary>
            Returns true if root node should have expanded part
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Layout.NodeDiagramLayout.DiagramFlow">
            <summary>
            Indicates the layout flow for the nodes.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.Layout.NodeLayoutContextInfo">
            <summary>
            Used to pass node contextual information used for layout of the node.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.Layout.NodeListLayout">
            <summary>
            Internal class that orders one level of the nodes in list like layout. Nodes are ordered from top to bottom.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.Layout.NodeMapLayout">
            <summary>
            Represents the class that performs node map layout.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Layout.NodeMapLayout.RootHasExpandedPart">
            <summary>
            Returns true if root node should have expanded part
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Layout.NodeMapLayout.MapFlow">
            <summary>
            Gets or sets the flow of the sub-root nodes for Map layout.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.Layout.NodeTreeLayout">
            <summary>
            Summary description for NodeTreeLayout.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Layout.NodeTreeLayout.ExpandPartAlignedNear(DevComponents.Tree.Node)">
            <summary>
            Gets whether the expand part of the node +/- is aligned to the left of the node in left-to-right layout.
            </summary>
            <param name="node">Node to get expand part alignment for</param>
            <returns>true if node expand part is aligned to the left in left-to-right layout.</returns>
        </member>
        <member name="P:DevComponents.Tree.Layout.NodeTreeLayout.ReserveExpandPartSpace">
            <summary>
            Returns true if expand part space should be accounted for even if they expand part is not visible or need to be displayed. Default value is false.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.LinkedNode">
            <summary>
            Represents a description of linked node and any connector points that link nodes.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.LinkedNode.#ctor">
            <summary>
            Creates new instance of the object.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.LinkedNode.#ctor(DevComponents.Tree.Node)">
            <summary>
            Creates new instance of the object.
            </summary>
            <param name="linkedNode">Linkded node to initialize new instace with.</param>
        </member>
        <member name="M:DevComponents.Tree.LinkedNode.#ctor(DevComponents.Tree.Node,DevComponents.Tree.ConnectorPointsCollection)">
            <summary>
            Creates new instance of the object.
            </summary>
            <param name="linkedNode">Linkded node to initialize new instace with.</param>
            <param name="connectorPoints">Connector points collection to initialize new instance with.</param>
        </member>
        <member name="M:DevComponents.Tree.LinkedNode.SetParent(DevComponents.Tree.Node)">
            <summary>
            Sets the parent node.
            </summary>
            <param name="node">Reference to parent node.</param>
        </member>
        <member name="P:DevComponents.Tree.LinkedNode.Node">
            <summary>
            Gets or sets reference to linked node.
            </summary>
            <remarks>
            Linked nodes are nodes that are related to given node but do not have strict
            parent child relationship with the node. Each linked node must be already added as
            child node to some other node or it will not be displayed. Linked nodes are used in Map
            and Diagram layout styles to indicates relationships between nodes. Also See TreeGX.LinkConnector property.
            </remarks>
        </member>
        <member name="P:DevComponents.Tree.LinkedNode.ConnectorPoints">
            <summary>
            Gets the collection of the link connector line relative points. If a node has a link to this node through LinkedNodes collection
            this these points outline the path connector will be drawn through from this node to it's parent linked node. By default this collection is empty which indicates that
            connector line is drawn using predefined path. Points added here are the points through which the connector line will travel to the
            parent node. The point coordinates added to this collection are relative from the top-left corner of this node.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.LinkedNode.Parent">
            <summary>
            Gets the Node this linked node description is attached to.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.LinkedNodesCollection">
            <summary>
            Represents collection of LinkedNode objects that describe linked node properties.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.LinkedNodesCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.LinkedNodesCollection.SetParentNode(DevComponents.Tree.Node)">
            <summary>
            Sets the node collection belongs to.
            </summary>
            <param name="parent">Node that is parent of this collection.</param>
        </member>
        <member name="M:DevComponents.Tree.LinkedNodesCollection.Add(DevComponents.Tree.LinkedNode)">
            <summary>
            Adds new object to the collection.
            </summary>
            <param name="p">Object to add.</param>
            <returns>Index of newly added object.</returns>
        </member>
        <member name="M:DevComponents.Tree.LinkedNodesCollection.AddRange(DevComponents.Tree.LinkedNode[])">
            <summary>
            Adds range of objects to the array.
            </summary>
            <param name="ap">Array to add.</param>
        </member>
        <member name="M:DevComponents.Tree.LinkedNodesCollection.ToArray">
            <summary>
            Copies objects of the collection to the array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Tree.LinkedNodesCollection.Insert(System.Int32,DevComponents.Tree.LinkedNode)">
            <summary>
            Inserts new object into the collection.
            </summary>
            <param name="index">Position of the object.</param>
            <param name="value">Object to insert.</param>
        </member>
        <member name="M:DevComponents.Tree.LinkedNodesCollection.IndexOf(DevComponents.Tree.LinkedNode)">
            <summary>
            Returns index of the object inside of the collection.
            </summary>
            <param name="value">Reference to the object.</param>
            <returns>Index of the object.</returns>
        </member>
        <member name="M:DevComponents.Tree.LinkedNodesCollection.Contains(DevComponents.Tree.LinkedNode)">
            <summary>
            Returns whether collection contains specified object.
            </summary>
            <param name="value">Object to look for.</param>
            <returns>true if object is part of the collection, otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.LinkedNodesCollection.Remove(DevComponents.Tree.LinkedNode)">
            <summary>
            Removes specified object from the collection.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:DevComponents.Tree.LinkedNodesCollection.CopyTo(DevComponents.Tree.LinkedNode[],System.Int32)">
            <summary>
            Copies collection into the specified array.
            </summary>
            <param name="array">Array to copy collection to.</param>
            <param name="index">Starting index.</param>
        </member>
        <member name="M:DevComponents.Tree.LinkedNodesCollection.CopyTo(DevComponents.Tree.LinkedNode[])">
            <summary>
            Copies contained items to the ColumnHeader array.
            </summary>
            <param name="array">Array to copy to.</param>
        </member>
        <member name="P:DevComponents.Tree.LinkedNodesCollection.ParentNode">
            <summary>
            Gets or sets the node this collection is associated with.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.LinkedNodesCollection.Item(System.Int32)">
            <summary>
            Returns reference to the object in collection based on it's index.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.Node">
            <summary>
            Represents the Node in Tree control.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Node.#ctor">
            <summary>Default Constructor.</summary>
        </member>
        <member name="M:DevComponents.Tree.Node.SetBounds(System.Drawing.Rectangle)">
            <summary>
            Sets the bounds of the node.
            </summary>
            <param name="r">New location and size of the node.</param>
        </member>
        <member name="M:DevComponents.Tree.Node.SetContentBounds(System.Drawing.Rectangle)">
            <summary>
            Sets the content bounds of the node. Content bound is bound for the the cells inside the node
            and it excludes the expand rectangle. Bounds also include the node style padding and
            reflect node margin.
            </summary>
            <param name="r">New location and size of the node.</param>
        </member>
        <member name="M:DevComponents.Tree.Node.SetCellsBounds(System.Drawing.Rectangle)">
            <summary>
            Sets cell bounds.
            </summary>
            <param name="r">New cells bounds.</param>
        </member>
        <member name="M:DevComponents.Tree.Node.SetParent(DevComponents.Tree.Node)">
            <summary>
            Sets node parent.
            </summary>
            <param name="parent">Parent node object.</param>
        </member>
        <member name="M:DevComponents.Tree.Node.SetExpandPartRectangle(System.Drawing.Rectangle)">
            <summary>
            Sets the bounds of the expand part.
            </summary>
            <param name="r">New part bounds.</param>
        </member>
        <member name="M:DevComponents.Tree.Node.SetEditing(System.Boolean)">
            <summary>
            Sets whether node is in edit mode or not.
            </summary>
            <param name="b">True indicating that node is in edit mode false otherwise.</param>
        </member>
        <member name="M:DevComponents.Tree.Node.ResetImage">
            <summary>
            Resets image to its default value. Windows Forms designer support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Node.ResetImageMouseOver">
            <summary>
            Resets ImageMouseOver to its default value. Windows Forms designer support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Node.ResetImageDisabled">
            <summary>
            Resets ImageDisabled to its default value. Windows Forms designer support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Node.ResetImageExpanded">
            <summary>
            Resets ImageExpanded to its default value. Windows Forms designer support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Node.SetMapSubRootPosition(DevComponents.Tree.eMapPosition)">
            <summary>
            Sets the node relative position form the root when map layout is used.
            </summary>
            <param name="pos">Relative node position.</param>
        </member>
        <member name="M:DevComponents.Tree.Node.Invalidate">
            <summary>
            Invalidates node and causes a paint message to be sent to the tree.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Node.BeginEdit">
            <summary>Initiates the editing of node text.</summary>
            <remarks>
            This method by default edits text stored in Node.Text. Call to this method is
            same as calling the overload method BeginData(0) with zero as parameter. Use BeginData
            overload method to begin editing the specific column for multi-column nodes.
            </remarks>
        </member>
        <member name="M:DevComponents.Tree.Node.BeginEdit(System.String)">
            <summary>Initiates the editing of node text.</summary>
            <param name="initialText">
            The initial text to be entered into the edit TextBox. Specify null to use existing text.
            </param>
        </member>
        <member name="M:DevComponents.Tree.Node.BeginEdit(System.Int32)">
            <summary>Initiates text editing of certain Node column.</summary>
            <param name="iColumnIndex">
            Zero based index of a column to begin editing for. Column 0 always corresponds to
            Node.Text property.
            </param>
        </member>
        <member name="M:DevComponents.Tree.Node.BeginEdit(System.Int32,System.String)">
            <summary>Initiates text editing of certain Node column.</summary>
            <param name="iColumnIndex">
            Zero based index of a column to begin editing for. Column 0 always corresponds to
            Node.Text property.
            </param>
            <param name="initialText">
            The initial text to be entered into the edit TextBox. Specify null to edit existing text.
            </param>
        </member>
        <member name="M:DevComponents.Tree.Node.Copy">
            <summary>Makes a "shallow" copy of a Node.</summary>
            <remarks>
            Shallow copy of a Node is a exact copy of Node but <strong>without</strong> copy
            of all child nodes in Nodes collection.
            </remarks>
        </member>
        <member name="M:DevComponents.Tree.Node.DeepCopy">
            <summary>Makes a "deep" copy of a node.</summary>
            <remarks>
            Deep copy of Node is a exact copy of Node including exact copies of all child nodes
            in this node's Nodes collection.
            </remarks>
        </member>
        <member name="M:DevComponents.Tree.Node.Collapse">
            <summary>
            Collapses the tree node.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Node.Collapse(DevComponents.Tree.eTreeAction)">
            <summary>
            Collapses the tree node.
            </summary>
            <param name="action">Action that caused the event</param>
        </member>
        <member name="M:DevComponents.Tree.Node.CollapseAll">
            <summary>
            Collapses all the child tree nodes.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Node.EndEdit(System.Boolean)">
            <summary>
            Ends the editing of the node text or column.
            </summary>
            <param name="cancelChanges"><strong>true</strong> if the editing of the tree node label text was canceled without being saved; otherwise, <strong>false</strong>. </param>
        </member>
        <member name="M:DevComponents.Tree.Node.EnsureVisible">
            <summary>
            Ensures that the node is visible, expanding nodes and scrolling the control as necessary.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Node.Expand">
            <summary>
            Expands the node.
            </summary>
            <remarks>
            The Expand method expands the current Node down to the next level of nodes.
            The state of a Node is persisted. For example, if the next level of child nodes was not collapsed previously, when the Expand method is called, the child nodes appear in their previously expanded state.
            </remarks>
        </member>
        <member name="M:DevComponents.Tree.Node.Expand(DevComponents.Tree.eTreeAction)">
            <summary>
            Expands the node.
            </summary>
            <remarks>
            The Expand method expands the current Node down to the next level of nodes.
            The state of a Node is persisted. For example, if the next level of child nodes was not collapsed previously, when the Expand method is called, the child nodes appear in their previously expanded state.
            </remarks>
            <param name="action">Action that caused the event.</param>
        </member>
        <member name="M:DevComponents.Tree.Node.ExpandAll">
            <summary>
            Expands all the child tree nodes.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Node.Remove">
            <summary>
            Removes the current node from the control.
            </summary>
            <remarks>
            When the Remove method is called, the node and any child nodes assigned to the Node are removed from the Tree. The removed child nodes are removed from the Tree, but are still attached to this node.
            </remarks>
        </member>
        <member name="M:DevComponents.Tree.Node.Remove(DevComponents.Tree.eTreeAction)">
            <summary>
            Removes the current node from the control and provides information about source of action
            </summary>
            <remarks>
            When the Remove method is called, the node and any child nodes assigned to the Node are removed from the Tree. The removed child nodes are removed from the Tree, but are still attached to this node.
            </remarks>
        </member>
        <member name="M:DevComponents.Tree.Node.Toggle">
            <summary>
            Toggles the node to either the expanded or collapsed state.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Node.Toggle(DevComponents.Tree.eTreeAction)">
            <summary>
            Toggles the node to either the expanded or collapsed state.
            </summary>
            <param name="action">Action that caused the event.</param>
        </member>
        <member name="M:DevComponents.Tree.Node.ToString">
            <summary>Returns string representation of the Node.</summary>
        </member>
        <member name="M:DevComponents.Tree.Node.OnCellInserted(DevComponents.Tree.Cell)">
            <summary>
            Called after new cell has been added to Cells collection.
            </summary>
            <param name="cell">Reference to the new cell added.</param>
        </member>
        <member name="M:DevComponents.Tree.Node.OnCellRemoved(DevComponents.Tree.Cell)">
            <summary>
            Called after cell has  been removed from Cells collection.
            </summary>
            <param name="cell">Reference to the removed cell.</param>
        </member>
        <member name="M:DevComponents.Tree.Node.OnSizeChanged">
            <summary>
            Occurs when property on the node has changed that influences the size of the node.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Node.OnImageChanged">
            <summary>
            Occurs when any image property for the cell has changed.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Node.OnChildNodesSizeChanged">
            <summary>
            Occurs when size of the child nodes has changed.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Node.OnDisplayChanged">
            <summary>
            Called when visual part of the node has changed due to the changes of its properties or properties of the cells contained by node.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Node.OnChildNodeInserted(DevComponents.Tree.Node)">
            <summary>
            Called after new node has been addded to Nodes collection.
            </summary>
            <param name="node">Reference to the new node.</param>
        </member>
        <member name="M:DevComponents.Tree.Node.OnChildNodeRemoved(DevComponents.Tree.Node)">
            <summary>
            Called after node has been removed from Nodes collection.
            </summary>
            <param name="node">Reference to the node that is removed.</param>
        </member>
        <member name="E:DevComponents.Tree.Node.NodeMouseDown">
            <summary>
            Occurs when the mouse pointer is over the node and a mouse button is pressed.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.Node.NodeMouseUp">
            <summary>
            Occurs when the mouse pointer is over the node and a mouse button is released.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.Node.NodeMouseMove">
            <summary>
            Occurs when the mouse pointer is moved over the node.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.Node.NodeMouseEnter">
            <summary>
            Occurs when the mouse enters the node.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.Node.NodeMouseLeave">
            <summary>
            Occurs when the mouse leaves the node.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.Node.NodeMouseHover">
            <summary>
            Occurs when the mouse hovers over the node.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.Node.NodeClick">
            <summary>
            Occurs when the node is clicked with left mouse button. If you need to know more information like if another mouse button is clicked etc. use
            NodeMouseDown event.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.Node.NodeDoubleClick">
            <summary>
            Occurs when the node is double-clicked.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.Node.MarkupLinkClick">
            <summary>
            Occurs when hyperlink in text-markup is clicked.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.ContextMenu">
            <summary>
            Gets or sets the context menu assigned to this node. Standard Context Menus, VS.NET 2005 Context Menus and DotNetBar Suite context menus are supported.
            Default value is null (Nothing) which indicates that no context menu is assigned.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.HasHostedControls">
            <summary>
            Gets whether any of the cells inside the node has HostedControl property set.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.NodeRenderer">
            <summary>
            Gets or sets custom node renderer. You can set this property to your custom renderer. When set the RenderMode should be set to custom to enable
            your custom renderer. To choose one of the system renderer use RenderMode property. Default value is null.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.RenderMode">
            <summary>
            Gets or sets the render mode used to render the node. Default value is eNodeRenderMode.Default which indicates that system default renderer is used.
            Note that if you specify custom renderer you need to set either TreeGX.NodeRenderer or Node.NodeRenderer property.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.Expanded">
            <summary>
            Gets or sets whether node is expanded. Expanded node shows it's child nodes.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.Name">
            <summary>
            Returns name of the node that can be used to identify it from the code.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.DragDropEnabled">
            <summary>
            Gets or sets whether node can be dragged and dropped. Default value is true.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.ExpandVisibility">
            <summary>
            Gets or sets visibility of the expand button. Default value is <strong>Auto</strong> meaning that
            expand button is displayed only if node has at least one child node.
            </summary>
            <remarks>
            You can use this property for example to dynamically load the child nodes when user
            tries to expand the node. You could for example handle BeforeExpand event to load child
            nodes into the node.
            </remarks>
        </member>
        <member name="P:DevComponents.Tree.Node.SizeChanged">
            <summary>
            Gets or sets whether any operation on the node has been performed that would affect node's size. Size changed flag 
            internally indicates that node's size needs to be recalculated becouse it has changed
            due to the changes in data.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.BoundsRelative">
            <summary>
            Gets the relative bounds of the tree node including the expand part of the node.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.Bounds">
            <summary>
            Gets the absolute bounds of the tree node including the expand part of the node.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.ContentBounds">
            <summary>
            Gets the node content bounds.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.CellsBoundsRelative">
            <summary>
            Gets the bounds for all the cells inside the node. The bounds do not include the expand part.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.CellsBounds">
            <summary>
            Gets the bounds for all the cells inside the node. The bounds do not include the expand part.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.ChildNodesBounds">
            <summary>
            Gets or sets the bounds of child nodes.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.ExpandPartRectangleRelative">
            <summary>
            Gets the expand part rectangle. Expand part is used to expand/collapse node.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.ExpandPartRectangle">
            <summary>
            Gets the expand part rectangle. Expand part is used to expand/collapse node.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.CommandBounds">
            <summary>
            Gets or sets the Command part bounds if command part is visible.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.Checked">
            <summary>
            Gets or sets a value indicating whether the tree node is in a checked state.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.CheckBoxAlignment">
            <summary>
            Gets or sets the checkbox alignment in relation to the text displayed by first default cell.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.CheckBoxVisible">
            <summary>
            Gets or sets whether check box is visible inside the cell.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.FullPath">
            <summary>
            Gets the path from the root tree node to the current tree node. The path consists of the labels of all the tree nodes that must be navigated to get to this tree node, starting at the root tree node. The node labels are separated by the delimiter character specified in the PathSeparator property of the Tree control that contains this node.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.Index">
            <summary>
            Gets the zero based index of position of the tree node in the tree node collection. -1 is returned if node is not added to the nodes collection.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.IsEditing">
            <summary>
            Gets a value indicating whether the tree node is in an editable state. true if the tree node is in editable state; otherwise, false.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.IsMouseDown">
            <summary>
            Gets whether left mouse button is pressed on any cell contained by this node.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.IsMouseOver">
            <summary>
            Gets whether mouse cursor is over on any cell contained by this node.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.IsSelected">
            <summary>
            Gets a value indicating whether the tree node is in the selected state. true if the tree node is in the selected state; otherwise, false.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.Enabled">
            <summary>
            Gets or sets whether node is enabled. Default value is true. Setting this value to false will set Enabled=false on all child cells.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.Selectable">
            <summary>
            Gets or sets whether node can be selected by user by clicking it with the mouse or using keyboard. Default value is true.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.CanSelect">
            <summary>
            Gets whether node can be selected. Node must be Visible, Enabled and Selectable in order for it to be selected.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.SelectedCell">
            <summary>
            Gets or sets a cell that is in selected state otherwise it retuns null.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.IsVisible">
            <summary>
            Gets a value indicating whether the tree node is visible. Node is considered to be visible when it's Visible property is set to true and path to the node is available i.e. all parent nodes are expanded.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.IsDisplayed">
            <summary>
            Returns whether node is displayed on the screen and visible to the user. When node is outside of the viewable area this property will return false. It will also return false if node is not visible.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.LastNode">
            <summary>
            Gets the last child tree node. The LastNode is the last child Node in the NodeCollection stored in the Nodes property of the current tree node. If the Node has no child tree node, the LastNode property returns a null reference (Nothing in Visual Basic).
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.NextNode">
            <summary>
            Gets the next sibling tree node. The NextNode is the next sibling Node in the NodeCollection stored in the Nodes property of the tree node's parent Node. If there is no next tree node, the NextNode property returns a null reference (Nothing in Visual Basic).
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.NextVisibleNode">
            <summary>
            Gets the next visible tree node. The NextVisibleNode can be a child, sibling, or a tree node from another branch. If there is no next tree node, the NextVisibleNode property returns a null reference (Nothing in Visual Basic).
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.Nodes">
            <summary>
            Gets the collection of Node objects assigned to the current tree node. The Nodes property can hold a collection of other Node objects. Each of the tree node in the collection has a Nodes property that can contain its own NodeCollection. Nesting of tree nodes can make it difficult to navigate a tree structure. The FullPath property makes it easier to determine your location in a tree.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.LinkedNodes">
            <summary>
            Gets the collection of LinkedNode objects that describe nodes linked to this node.
            </summary>
            <remarks>
            Linked nodes are nodes that are related to given node but do not have strict
            parent child relationship with the node. Each linked node must be already added as
            child node to some other node or it will not be displayed. Linked nodes are used in Map
            and Diagram layout styles to display relationships between nodes.
            </remarks>
        </member>
        <member name="P:DevComponents.Tree.Node.HasLinkedNodes">
            <summary>
            Gets whether Node has any linked nodes.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.AnyVisibleNodes">
            <summary>
            Gets whether there is at least one child node that has its Visible property set to true.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.Parent">
            <summary>
            Gets the parent tree node of the current tree node. If the tree node is at the root level, the Parent property returns a null reference (Nothing in Visual Basic).
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.PrevNode">
            <summary>
            Gets the previous sibling tree node. The PrevNode is the previous sibling Node in the NodeCollection stored in the Nodes property of the tree node's parent Node. If there is no previous tree node, the PrevNode property returns a null reference (Nothing in Visual Basic).
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.PrevVisibleNode">
            <summary>
            Gets the previous visible tree node. The PrevVisibleNode can be a child, sibling, or a tree node from another branch. If there is no previous tree node, the PrevVisibleNode property returns a null reference (Nothing in Visual Basic).
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.Tag">
            <summary>
            Gets or sets the object that contains data about the tree node. Any Object derived type can be assigned to this property. If this property is being set through the Windows Forms designer, only text can be assigned.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.TagString">
            <summary>
            Gets or sets the object that contains data about the tree node. Any Object derived type can be assigned to this property. If this property is being set through the Windows Forms designer, only text can be assigned.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.DataKey">
            <summary>
            Gets or sets the object that contains additional data about the tree node. Any Object derived type can be assigned to this property. If this property is being set through the Windows Forms designer, only text can be assigned.
            This property has same function as Tag property and provides you with additional separate storage of data.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.DataKeyString">
            <summary>
            Gets or sets the object that contains additional data about the tree node. Any Object derived type can be assigned to this property. If this property is being set through the Windows Forms designer, only text can be assigned.
            This property has same function as Tag property and provides you with additional separate storage of data.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.Text">
            <summary>
            Gets or sets the text displayed in the tree node.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.HostedControl">
            <summary>
            Gets or sets the control hosted inside of the first node cell.
            </summary>
            <remarks>
            	<para>When control is hosted inside of the cell, cell size is determined by the
                size of the control hosted inside of it. The cell will not display its text but it will display any image assigned
                or check box when control is hosted inside of it. The Style settings like Margin
                and Padding will still apply.</para>
            </remarks>
        </member>
        <member name="P:DevComponents.Tree.Node.TreeControl">
            <summary>
            Gets the parent tree control that the tree node is assigned to.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.CellLayout">
            <summary>
            Gets or sets the layout of the cells inside the node. Default value is Horizontal layout which
            means that cell are positioned horizontally next to each other.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.CellPartLayout">
            <summary>
            Gets or sets the layout of the cell parts like check box, image and text. Layout can be horizontal (default)
            where parts of the cell are positioned next to each other horizontally, or vertical where
            parts of the cell are positioned on top of each other vertically.
            Alignment of the each part is controlled by alignment properties. This property affects only the first cell inside of the node.
            Use Cell.Layout property to change the part layout on each cell contained by node.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.Cells">
            <summary>
            Gets the collection of all Cells assigned to this node. There should be always at least one cell in a node which is default cell. Default
            collection contains a single cell.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.NodesColumns">
            <summary>
            Get collection of child node columns.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.StyleExpanded">
            <summary>Gets or sets the style of the cells when node is expanded.</summary>
            <value>
            Reference to the style assigned to the node/cell or null value indicating that
            default style setting from tree control is applied. Default value is null.
            </value>
            <remarks>
            	<para>When node is expanded the style specified here will be used on all cells
                associated with this node instead of the
                <see cref="P:DevComponents.Tree.Cell.StyleNormal">Cell.StyleNormal</see>. That way you can give
                different appearance to your node's cells when node is expanded.</para>
            	<para>When property is set to null value the style setting from parent tree
                controls is used. <see cref="P:DevComponents.Tree.TreeGX.NodeStyleExpanded">NodeStyleExpanded</see> on
                TreeGX control is a root style for a cell.</para>
            </remarks>
        </member>
        <member name="P:DevComponents.Tree.Node.StyleExpandedName">
            <summary>
            Gets or sets the expanded style name used by node. This member is provided for internal use only. To set or get the style use StyleExpanded property instead.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.StyleSelected">
            <summary>
            Gets or sets the style used when Node is selected. Default value is NULL (VB
            Nothing)
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.StyleSelectedName">
            <summary>
            Gets or sets the selected style name used by node. This member is provided for internal use only. To set or get the style use StyleSelected property instead.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.StyleMouseOver">
            <summary>
            Gets or sets the style used when mouse is over the Node. Default value is NULL
            (VB Nothing)
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.StyleMouseOverName">
            <summary>
            Gets or sets the mouse over style name used by node. This member is provided for internal use only. To set or get the style use StyleMouseOver property instead.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.Style">
            <summary>
                Gets or sets the node style.
            </summary>
            <value>
            Reference to the style assigned to the node or null value indicating that default
            style setting from tree control is applied. Default value is null.
            </value>
            <remarks>
            	<para>Style specified by this property will be used as default style for the node.
                Each cell within the node can also specify it's own style. Since node contains the
                cells using this style property can you for example create a border around all cell
                contained by the node.</para>
            	<para>When this property is set to null value (default value) NodeStyle
                property on TreeGX control is used.</para>
            </remarks>
        </member>
        <member name="P:DevComponents.Tree.Node.StyleName">
            <summary>
            Gets or sets the style name used by node. This member is provided for internal use only. To set or get the style use Style property instead.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.MouseOverNodePart">
            <summary>
            Gets or sets the part of the node mouse is over.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.Offset">
            <summary>
            Gets or sets the node horizontal offset from the position determined by the layout manager.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.MapSubRootPosition">
            <summary>
            Gets layout position of the node when tree is in Map layout mode and node is the first child note of top-level root node.
            To set the layout position for a node use TreeGX.SetNodeMapPosition method.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.ImageAlignment">
            <summary>
            Gets or sets the image alignment in relation to the text displayed by cell. This property affects only first default cell inside the node.
            Property with same name is available on each cell and you can use it to affect each cell individually.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.Image">
            <summary>
            Gets or sets the image displayed when the tree node is in the unselected state.
            </summary>
            <remarks>
            Image specified will be used as a default image for any other node state where
            different image is not specified.
            </remarks>
        </member>
        <member name="P:DevComponents.Tree.Node.ImageIndex">
            <summary>
            Gets or sets the image-list index value of the default image that is displayed by the tree nodes.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.ImageMouseOver">
            <summary>
            Gets or sets the image displayed when mouse is over the tree node.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.ImageMouseOverIndex">
            <summary>
            Gets or sets the image-list index value of the image that is displayed by the tree nodes when mouse is over the node.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.ImageExpanded">
            <summary>
            Gets or sets the image displayed when node is expanded.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.ImageExpandedIndex">
            <summary>
            Gets or sets the image-list index value of the image that is displayed by the tree nodes when node is expanded.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.ImageList">
            <summary>
            Property Editor support for ImageIndex selection
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.ParentConnector">
            <summary>
            Gets or sets the NodeConnector object that describes the type of the connector used for
            displaying connection between current node and its parent node. 
            Default value is null which means that settings from TreeGX control are used.
            </summary>
            <seealso cref="P:DevComponents.Tree.TreeGX.RootConnector">RootConnector Property (DevComponents.Tree.TreeGX)</seealso>
            <seealso cref="P:DevComponents.Tree.TreeGX.NodesConnector">NodesConnector Property (DevComponents.Tree.TreeGX)</seealso>
        </member>
        <member name="P:DevComponents.Tree.Node.ParentConnectorPoints">
            <summary>
            Gets the collection of the parent connector line relative points. By default this collection is empty which indicates that
            connector line is drawn using predefined path. Points added here are the points through which the connector line will travel to the
            parent node. The point coordinates added to this collection are relative from the top-left corner of this node.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.Visible">
            <summary>
            Gets or sets whether node is visible.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.CommandButton">
            <summary>
            Gets or sets whether command button is visible. Default value is false.
            Command button can be used to display for example popup menu with commands for node,
            or to display the list of linked nodes.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.SelectedConnectorMarker">
            <summary>
            Gets or sets internal value that indicates that node is on "path" of the selected node.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Node.ColumnHeaderHeight">
            <summary>
            Gets or sets the child column header height.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.NodeCollection">
            <summary>
            Represents collection for Node objects.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.NodeCollection.SetParentNode(DevComponents.Tree.Node)">
            <summary>
            Sets the node collection belongs to.
            </summary>
            <param name="parent">Node that is parent of this collection.</param>
        </member>
        <member name="M:DevComponents.Tree.NodeCollection.Add(DevComponents.Tree.Node)">
            <summary>
            Adds new object to the collection.
            </summary>
            <param name="node">Object to add.</param>
            <returns>Index of newly added object.</returns>
        </member>
        <member name="M:DevComponents.Tree.NodeCollection.Add(DevComponents.Tree.Node,DevComponents.Tree.eTreeAction)">
            <summary>
            Adds new object to the collection and provides information about the source of the command
            </summary>
            <param name="node">Node to add</param>
            <param name="action">Source action</param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Tree.NodeCollection.AddRange(DevComponents.Tree.Node[])">
            <summary>
            Adds an array of objects to the collection. 
            </summary>
            <param name="nodes">Array of Node objects.</param>
        </member>
        <member name="M:DevComponents.Tree.NodeCollection.Insert(System.Int32,DevComponents.Tree.Node)">
            <summary>
            Inserts new object into the collection.
            </summary>
            <param name="index">Position of the object.</param>
            <param name="value">Object to insert.</param>
        </member>
        <member name="M:DevComponents.Tree.NodeCollection.Insert(System.Int32,DevComponents.Tree.Node,DevComponents.Tree.eTreeAction)">
            <summary>
            Inserts new object into the collection.
            </summary>
            <param name="index">Position of the object.</param>
            <param name="value">Object to insert.</param>
            <param name="action">Action that is causing the event</param>
        </member>
        <member name="M:DevComponents.Tree.NodeCollection.IndexOf(DevComponents.Tree.Node)">
            <summary>
            Returns index of the object inside of the collection.
            </summary>
            <param name="value">Reference to the object.</param>
            <returns>Index of the object.</returns>
        </member>
        <member name="M:DevComponents.Tree.NodeCollection.Contains(DevComponents.Tree.Node)">
            <summary>
            Returns whether collection contains specified object.
            </summary>
            <param name="value">Object to look for.</param>
            <returns>true if object is part of the collection, otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.NodeCollection.Remove(DevComponents.Tree.Node)">
            <summary>
            Removes specified object from the collection.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:DevComponents.Tree.NodeCollection.Remove(DevComponents.Tree.Node,DevComponents.Tree.eTreeAction)">
            <summary>
            Removes specified object from the collection and provides information about source of the command
            </summary>
            <param name="node">Node to remove</param>
            <param name="action">Source action</param>
        </member>
        <member name="M:DevComponents.Tree.NodeCollection.CopyTo(DevComponents.Tree.Node[],System.Int32)">
            <summary>
            Copies collection into the specified array.
            </summary>
            <param name="array">Array to copy collection to.</param>
            <param name="index">Starting index.</param>
        </member>
        <member name="M:DevComponents.Tree.NodeCollection.CopyTo(DevComponents.Tree.Node[])">
            <summary>
            Copies contained items to the Node array.
            </summary>
            <param name="array">Array to copy to.</param>
        </member>
        <member name="P:DevComponents.Tree.NodeCollection.ParentNode">
            <summary>
            Gets or sets the node this collection is associated with.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.NodeCollection.Item(System.Int32)">
            <summary>
            Returns reference to the object in collection based on it's index.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.NodeCollectionEditor">
            <summary>
            Support for Node tabs design-time editor.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.NodeConnector">
            <summary>
            Represents node connector. Node connector is the line that is drawn to indicate connection between child and parent node.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.NodeConnector.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.NodeConnector.#ctor(System.Int32,DevComponents.Tree.eNodeConnectorType)">
            <summary>
            Creates new instance of the object with specified parameters.
            </summary>
            <param name="lineWidth">Connector line width.</param>
            <param name="type">Connector type.</param>
        </member>
        <member name="M:DevComponents.Tree.NodeConnector.ShouldSerializeLineColor">
            <summary>
            Returns true if editor should serialize LineColor property.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.NodeConnector.ShouldSerializeEndCapSize">
            <summary>
            Returns true if EndCapSize property should be serialized by editor.
            </summary>
            <returns></returns>
        </member>
        <member name="E:DevComponents.Tree.NodeConnector.AppearanceChanged">
            <summary>
            Occurs when appearance of the connector has changed as result of changed settings on the connector.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.NodeConnector.LineWidth">
            <summary>
            Gets or sets the connector line width.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.NodeConnector.LineColor">
            <summary>
            Gets or sets the color of the connector line.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.NodeConnector.ConnectorType">
            <summary>
            Gets or sets the type of the connector.
            </summary>
            <remarks>
            See <see cref="T:DevComponents.Tree.eNodeConnectorType">eNodeConnectorType</see> enum for list of
            available connectors.
            </remarks>
            <seealso cref="T:DevComponents.Tree.eNodeConnectorType">eNodeConnectorType Enumeration</seealso>
        </member>
        <member name="P:DevComponents.Tree.NodeConnector.UnderlineNoBorderNode">
            <summary>
            Gets or sets whether the child node without borders is underlined as a
            continuation of the connector from node's parent. Default value is true.
            </summary>
            <remarks>
            To enhance visual appearance of the connectors that are connecting to the node
            with no borders assigned the connector is continued as a single line under the node
            when this property is set to true (default) value.
            </remarks>
        </member>
        <member name="P:DevComponents.Tree.NodeConnector.EndCap">
            <summary>
            Gets or sets the type of the cap that connector is ended with. Note that connector starts with parent node and ends with the child node. Default value is Ellipse.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.NodeConnector.EndCapSize">
            <summary>
            Gets or sets the size of the end cap.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.NodeOperations">
            <summary>
            Represents node operations.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.NodeOperations.GetFullPath(DevComponents.Tree.Node,System.String)">
            <summary>
            Returns full path to the given node.
            </summary>
            <param name="node">Node to return path to.</param>
            <returns>Full path to the node.</returns>
        </member>
        <member name="M:DevComponents.Tree.NodeOperations.GetLastNode(DevComponents.Tree.Node)">
            <summary>
            Gets the last child tree node. The LastNode is the last child Node in the NodeCollection stored in the Nodes property of the current tree node. If the Node has no child tree node, the LastNode property returns a null reference (Nothing in Visual Basic).
            </summary>
            <param name="node">Reference node.</param>
            <returns>Last node if found or null if there is no last node.</returns>
        </member>
        <member name="M:DevComponents.Tree.NodeOperations.GetNextNode(DevComponents.Tree.Node)">
            <summary>
            Gets the next sibling tree node. The NextNode is the next sibling Node in the NodeCollection stored in the Nodes property of the tree node's parent Node. If there is no next tree node, the NextNode property returns a null reference (Nothing in Visual Basic).
            </summary>
            <param name="node">Reference node.</param>
            <returns>Node object or null if node cannot be found.</returns>
        </member>
        <member name="M:DevComponents.Tree.NodeOperations.GetNextVisibleSibling(DevComponents.Tree.Node)">
            <summary>
            Returns next visible sibling tree node.
            </summary>
            <param name="node">Reference node</param>
            <returns>Node object or null if next visible node cannot be found</returns>
        </member>
        <member name="M:DevComponents.Tree.NodeOperations.GetAnyNextNode(DevComponents.Tree.Node)">
            <summary>
            Gets the next visible tree node. The NextVisibleNode can be a child, sibling, or a tree node from another branch. If there is no next tree node, the NextVisibleNode property returns a null reference (Nothing in Visual Basic).
            </summary>
            <param name="node">Reference node.</param>
            <returns>Node object or null if node cannot be found.</returns>
        </member>
        <member name="M:DevComponents.Tree.NodeOperations.GetNextVisibleNode(DevComponents.Tree.Node)">
            <summary>
            Gets the next visible tree node. The NextVisibleNode can be a child, sibling, or a tree node from another branch. If there is no next tree node, the NextVisibleNode property returns a null reference (Nothing in Visual Basic).
            </summary>
            <param name="node">Reference node.</param>
            <returns>Node object or null if node cannot be found.</returns>
        </member>
        <member name="M:DevComponents.Tree.NodeOperations.GetIsNodeVisible(DevComponents.Tree.Node)">
            <summary>
            Gets a value indicating whether the tree node is visible. Node is considered to be visible when it's Visible property is set to true and path to the node is available i.e. all parent nodes are expanded.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Tree.NodeOperations.GetIsNodeDisplayed(DevComponents.Tree.Node)">
            <summary>
            Returns whether node is displayed on the screen and visible to the user. When node is outside of the viewable area this property will return false. It will also return false if node is not visible.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Tree.NodeOperations.GetLastDisplayedNode(DevComponents.Tree.TreeGX)">
            <summary>
            Returns last rendered node on screen.
            </summary>
            <param name="tree">Tree control.</param>
            <returns>Last rendered node or null</returns>
        </member>
        <member name="M:DevComponents.Tree.NodeOperations.GetNodeIndex(DevComponents.Tree.Node)">
            <summary>
            Gets the zero based index of position of the tree node in the tree node collection. -1 is returned if node is not added to the nodes collection.
            </summary>
            <param name="node">Reference node.</param>
            <returns>Zero based index or -1 if node is not in collection.</returns>
        </member>
        <member name="M:DevComponents.Tree.NodeOperations.GetPreviousNode(DevComponents.Tree.Node)">
            <summary>
            Gets the previous sibling tree node. The PrevNode is the previous sibling Node in the NodeCollection stored in the Nodes property of the tree node's parent Node. If there is no previous tree node, the PrevNode property returns a null reference (Nothing in Visual Basic).
            </summary>
            <param name="node">Reference node.</param>
            <returns>Node object or null if node cannot be found.</returns>
        </member>
        <member name="M:DevComponents.Tree.NodeOperations.GetAnyPreviousNode(DevComponents.Tree.Node)">
            <summary>
            Gets the previous tree node. The Previous Node can be a child, sibling, or a tree node from another branch. If there is no previous tree node, the PrevNode property returns a null reference (Nothing in Visual Basic).
            </summary>
            <param name="node">Reference node.</param>
            <returns>Node object or null if node cannot be found.</returns>
        </member>
        <member name="M:DevComponents.Tree.NodeOperations.GetPreviousVisibleNode(DevComponents.Tree.Node)">
            <summary>
            Gets the previous visible tree node. The PrevVisibleNode can be a child, sibling, or a tree node from another branch. If there is no previous tree node, the PrevVisibleNode property returns a null reference (Nothing in Visual Basic).
            </summary>
            <param name="node">Reference node.</param>
            <returns>Node object or null if node cannot be found.</returns>
        </member>
        <member name="M:DevComponents.Tree.NodeOperations.IsRootNode(DevComponents.Tree.TreeGX,DevComponents.Tree.Node)">
            <summary>
            Returns true if node passed is considered root node for display purposes.
            </summary>
            <param name="tree">Reference to the tree control.</param>
            <param name="node">Node to test.</param>
            <returns>true if node is root node for display purposes otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.NodeOperations.EnsureVisible(DevComponents.Tree.Node)">
            <summary>
            Ensures that the node is visible, expanding nodes and scrolling the control as necessary.
            </summary>
            <param name="reference">Node to be made visible.</param>
        </member>
        <member name="M:DevComponents.Tree.NodeOperations.GetVisibleNodesCount(DevComponents.Tree.Node)">
            <summary>
            Returns number of visible child nodes for given node.
            </summary>
            <param name="node">Reference node.</param>
            <returns>Number of visible child nodes.</returns>
        </member>
        <member name="M:DevComponents.Tree.NodeOperations.GetFirstVisibleNode(DevComponents.Tree.TreeGX)">
            <summary>
            Gets first visible node.
            </summary>
            <param name="tree">Reference to tree.</param>
            <returns>Last visible node found or null</returns>
        </member>
        <member name="M:DevComponents.Tree.NodeOperations.GetAnyVisibleNodes(DevComponents.Tree.Node)">
            <summary>
            Returns true if node has at least single visible child node.
            </summary>
            <param name="node">Reference node.</param>
            <returns>True if at least single child node is visible otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.NodeOperations.GetNodeAt(DevComponents.Tree.TreeGX,System.Drawing.Point)">
            <summary>
            Retrieves the tree node that is at the specified location.
            </summary>
            <returns>The Node at the specified point, in tree view coordinates.</returns>
            <remarks>
            	<para>You can pass the MouseEventArgs.X and MouseEventArgs.Y coordinates of the
                MouseDown event as the x and y parameters.</para>
            </remarks>
            <param name="p">The Point to evaluate and retrieve the node from.</param>
            <param name="tree">Tree control to find node at.</param>
        </member>
        <member name="M:DevComponents.Tree.NodeOperations.GetNodeAt(DevComponents.Tree.TreeGX,System.Int32,System.Int32)">
            <summary>
            Retrieves the tree node that is at the specified location.
            </summary>
            <returns>The TreeNode at the specified location, in tree view coordinates.</returns>
            <remarks>
            	<para>You can pass the MouseEventArgs.X and MouseEventArgs.Y coordinates of the
                MouseDown event as the x and y parameters.</para>
            </remarks>
            <param name="x">The X position to evaluate and retrieve the node from.</param>
            <param name="y">The Y position to evaluate and retrieve the node from.</param>
            <param name="tree">Tree control to find node at.</param>
        </member>
        <member name="M:DevComponents.Tree.NodeOperations.GetVisibleChildNodesCount(DevComponents.Tree.Node)">
            <summary>
            Gets the count of visible child nodes (Visible=true) for given node.
            </summary>
            <param name="parent">Reference to Node object.</param>
            <returns>Number of visible nodes.</returns>
        </member>
        <member name="M:DevComponents.Tree.NodeOperations.GetFirstVisibleChildNode(DevComponents.Tree.Node)">
            <summary>
            Gets the first visible child node or returns null if node cannot be found.
            </summary>
            <param name="parent">Reference to Node object.</param>
            <returns>First visible node or null if node cannot be found.</returns>
        </member>
        <member name="T:DevComponents.Tree.NodeStyles">
            <summary>
            Class that provides predefined styles for the nodes. Styles are defined as static memeber of the class
            </summary>
        </member>
        <member name="P:DevComponents.Tree.NodeStyles.Apple">
            <summary>
            Returns Apple element style
            </summary>
        </member>
        <member name="P:DevComponents.Tree.NodeStyles.Blue">
            <summary>
            Returns Blue element style
            </summary>
        </member>
        <member name="P:DevComponents.Tree.NodeStyles.BlueLight">
            <summary>
            Returns BlueLight element style
            </summary>
        </member>
        <member name="P:DevComponents.Tree.NodeStyles.BlueNight">
            <summary>
            Returns BlueNight element style
            </summary>
        </member>
        <member name="P:DevComponents.Tree.NodeStyles.BlueMist">
            <summary>
            Returns BlueMist element style
            </summary>
        </member>
        <member name="P:DevComponents.Tree.NodeStyles.Cyan">
            <summary>
            Returns Cyan element style
            </summary>
        </member>
        <member name="P:DevComponents.Tree.NodeStyles.Green">
            <summary>
            Returns Green element style
            </summary>
        </member>
        <member name="P:DevComponents.Tree.NodeStyles.Lemon">
            <summary>
            Returns Lemon element style
            </summary>
        </member>
        <member name="P:DevComponents.Tree.NodeStyles.Magenta">
            <summary>
            Returns Magenta element style
            </summary>
        </member>
        <member name="P:DevComponents.Tree.NodeStyles.Orange">
            <summary>
            Returns Orange element style
            </summary>
        </member>
        <member name="P:DevComponents.Tree.NodeStyles.OrangeLight">
            <summary>
            Returns OrangeLight element style
            </summary>
        </member>
        <member name="P:DevComponents.Tree.NodeStyles.Purple">
            <summary>
            Returns Purple element style
            </summary>
        </member>
        <member name="P:DevComponents.Tree.NodeStyles.PurpleMist">
            <summary>
            Returns PurpleMist element style
            </summary>
        </member>
        <member name="P:DevComponents.Tree.NodeStyles.Red">
            <summary>
            Returns Red element style
            </summary>
        </member>
        <member name="P:DevComponents.Tree.NodeStyles.Silver">
            <summary>
            Returns Silver element style
            </summary>
        </member>
        <member name="P:DevComponents.Tree.NodeStyles.SilverMist">
            <summary>
            Returns SilverMist element style
            </summary>
        </member>
        <member name="P:DevComponents.Tree.NodeStyles.Tan">
            <summary>
            Returns Tan element style
            </summary>
        </member>
        <member name="P:DevComponents.Tree.NodeStyles.Teal">
            <summary>
            Returns Teal element style
            </summary>
        </member>
        <member name="P:DevComponents.Tree.NodeStyles.Yellow">
            <summary>
            Returns Yellow element style
            </summary>
        </member>
        <member name="P:DevComponents.Tree.NodeStyles.Gray">
            <summary>
            Returns Gray element style
            </summary>
        </member>
        <member name="T:DevComponents.Tree.ePredefinedElementStyle">
            <summary>
            Indicates predefined element style.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.Padding">
            <summary>
            Represents class that holds padding information for user interface elements.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Padding._Left">
            <summary>
            Gets or sets padding on left side. Default value is 0
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Padding._Right">
            <summary>
            Gets or sets padding on right side. Default value is 0
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Padding._Top">
            <summary>
            Gets or sets padding on top side. Default value is 0
            </summary>
        </member>
        <member name="F:DevComponents.Tree.Padding._Bottom">
            <summary>
            Gets or sets padding on bottom side. Default value is 0
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Padding.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates new instance of the class and initializes it.
            </summary>
            <param name="left">Left padding</param>
            <param name="right">Right padding</param>
            <param name="top">Top padding</param>
            <param name="bottom">Bottom padding</param>
        </member>
        <member name="M:DevComponents.Tree.Padding.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:DevComponents.Tree.Padding.Top">
            <summary>
            Gets amount of Top padding
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Padding.Left">
            <summary>
            Gets amount of Left padding
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Padding.Bottom">
            <summary>
            Gets amount of Bottom padding
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Padding.Right">
            <summary>
            Gets amount of Right padding
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Padding.Horizontal">
            <summary>
            Gets amount of horizontal padding (Left+Right)
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Padding.Vertical">
            <summary>
            Gets amount of vertical padding (Top+Bottom)
            </summary>
        </member>
        <member name="P:DevComponents.Tree.Padding.IsEmpty">
            <summary>
            Gets whether Padding is empty.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.Padding.PropertyChanged">
            <summary>
            Occurs when property value has changed.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.TextBoxEx">
            <summary>
            Represents the text box for editing cell's text.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextBoxEx.EditWordWrap">
            <summary>
            Gets or sets whether the editing is in word-wrap mode.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TextMarkup.MarkupElement.Measure(System.Drawing.Size,DevComponents.Tree.TextMarkup.MarkupDrawContext)">
            <summary>
            Measures the element given available size.
            </summary>
            <param name="availableSize">Size available to element</param>
            <param name="g">Reference to graphics object</param>
        </member>
        <member name="M:DevComponents.Tree.TextMarkup.MarkupElement.MeasureEnd(System.Drawing.Size,DevComponents.Tree.TextMarkup.MarkupDrawContext)">
            <summary>
            Measures the end tag of an element. Most implementations do not need to do anything but implementations like the ones
            that change color should return state back at this time.
            </summary>
            <param name="availableSize"></param>
            <param name="d"></param>
        </member>
        <member name="M:DevComponents.Tree.TextMarkup.MarkupElement.Render(DevComponents.Tree.TextMarkup.MarkupDrawContext)">
            <summary>
            Renders element.
            </summary>
            <param name="d">Provides markup drawing context information.</param>
        </member>
        <member name="M:DevComponents.Tree.TextMarkup.MarkupElement.RenderEnd(DevComponents.Tree.TextMarkup.MarkupDrawContext)">
            <summary>
            Renders element tag end. Most implementations do not need to do anything but mplementations like the ones
            that change color should return state back at this time.
            </summary>
            <param name="d">Provides markup drawing context information.</param>
        </member>
        <member name="M:DevComponents.Tree.TextMarkup.MarkupElement.ArrangeCore(System.Drawing.Rectangle,DevComponents.Tree.TextMarkup.MarkupDrawContext)">
            <summary>
            Provides final rectangle to element and lets it arrange it's content given new constraint.
            </summary>
            <param name="finalRect">Final rectangle.</param>
            <param name="g"></param>
        </member>
        <member name="M:DevComponents.Tree.TextMarkup.MarkupElement.Arrange(System.Drawing.Rectangle,DevComponents.Tree.TextMarkup.MarkupDrawContext)">
            <summary>
            Arranges the element given the final size. Layout is two step process with Measure followed by Arrange.
            </summary>
            <param name="finalSize"></param>
            <param name="g"></param>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.MarkupElement.IsBlockElement">
            <summary>
            Returns whether markup element is an block element that always consumes a whole line in layout.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.MarkupElement.IsNewLineAfterElement">
            <summary>
            Returns whether layout manager switches to new line after processing this element.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.MarkupElement.CanStartNewLine">
            <summary>
            Returns whether layout manager can start new line with this element.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.MarkupElement.Elements">
            <summary>
            Gets the collection of child elements if any for this markup element.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.MarkupElement.IsSizeValid">
            <summary>
            Gets or sets whether element size is valid. When size is not valid element Measure method will be called to validate size.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.MarkupElement.Parent">
            <summary>
            Gets element parent or null if parent is not set.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.MarkupElement.Bounds">
            <summary>
            Gets or sets actual rendering bounds.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.MarkupElement.Visible">
            <summary>
            Gets or sets whether markup element is visible.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.MarkupElement.RenderBounds">
            <summary>
            Gets or sets actual rendered bounds for a give markup element if applicable.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.ContainerElement.IsBlockElement">
            <summary>
            Returns whether markup element is an block element that always consumes a whole line in layout.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.TextMarkup.eParagraphAlignment">
            <summary>
            Indicates paragraph content alignment
            </summary>
        </member>
        <member name="T:DevComponents.Tree.TextMarkup.eParagraphVerticalAlignment">
            <summary>
            Indicates paragraph content alignment
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.EndMarkupElement.StartElement">
            <summary>
            Gets reference to markup start element.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.ExpandElement.CanStartNewLine">
            <summary>
            Returns whether layout manager can start new line with this element.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.Heading.Level">
            <summary>
            Gets or sets heading level. Values from 1 to 6 are valid. Default is 1.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TextMarkup.HyperLink.HitTest(System.Int32,System.Int32)">
            <summary>
            Returns whether hyper-link contains specified coordinates.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Tree.TextMarkup.MarkupElementCollection.#ctor(DevComponents.Tree.TextMarkup.MarkupElement)">
            <summary>Creates new instance of the class.</summary>
        </member>
        <member name="M:DevComponents.Tree.TextMarkup.MarkupElementCollection.Add(DevComponents.Tree.TextMarkup.MarkupElement)">
            <summary>
            Adds new object to the collection.
            </summary>
            <param name="MarkupElement">Object to add.</param>
            <returns>Index of newly added object.</returns>
        </member>
        <member name="M:DevComponents.Tree.TextMarkup.MarkupElementCollection.Insert(System.Int32,DevComponents.Tree.TextMarkup.MarkupElement)">
            <summary>
            Inserts new object into the collection.
            </summary>
            <param name="index">Position of the object.</param>
            <param name="value">Object to insert.</param>
        </member>
        <member name="M:DevComponents.Tree.TextMarkup.MarkupElementCollection.IndexOf(DevComponents.Tree.TextMarkup.MarkupElement)">
            <summary>
            Returns index of the object inside of the collection.
            </summary>
            <param name="value">Reference to the object.</param>
            <returns>Index of the object.</returns>
        </member>
        <member name="M:DevComponents.Tree.TextMarkup.MarkupElementCollection.Contains(DevComponents.Tree.TextMarkup.MarkupElement)">
            <summary>
            Returns whether collection contains specified object.
            </summary>
            <param name="value">Object to look for.</param>
            <returns>true if object is part of the collection, otherwise false.</returns>
        </member>
        <member name="M:DevComponents.Tree.TextMarkup.MarkupElementCollection.Remove(DevComponents.Tree.TextMarkup.MarkupElement)">
            <summary>
            Removes specified object from the collection.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:DevComponents.Tree.TextMarkup.MarkupElementCollection.CopyTo(DevComponents.Tree.TextMarkup.MarkupElement[],System.Int32)">
            <summary>
            Copies collection into the specified array.
            </summary>
            <param name="array">Array to copy collection to.</param>
            <param name="index">Starting index.</param>
        </member>
        <member name="M:DevComponents.Tree.TextMarkup.MarkupElementCollection.CopyTo(DevComponents.Tree.TextMarkup.MarkupElement[])">
            <summary>
            Copies contained items to the MarkupElement array.
            </summary>
            <param name="array">Array to copy to.</param>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.MarkupElementCollection.Parent">
            <summary>
            Gets or sets the collection parent element.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.MarkupElementCollection.Item(System.Int32)">
            <summary>
            Returns reference to the object in collection based on it's index.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TextMarkup.MarkupParser.IsMarkup(System.String@)">
            <summary>
            Tests whether input text could be markup text.
            </summary>
            <param name="text">Text to test.</param>
            <returns>true if text could be markup, otherwise false</returns>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.MarkupSettings.NormalHyperlink">
            <summary>
            Gets the style of the hyperlink in its default state.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.MarkupSettings.MouseOverHyperlink">
            <summary>
            Gets the style of the hyperlink when mouse is over the link.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.MarkupSettings.VisitedHyperlink">
            <summary>
            Gets the style of the visited hyperlink.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.TextMarkup.HyperlinkStyle">
            <summary>
            Defines the text-markup hyperlink appearance style.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TextMarkup.HyperlinkStyle.#ctor">
            <summary>
            Initializes a new instance of the HyperlinkStyle class.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TextMarkup.HyperlinkStyle.#ctor(System.Drawing.Color,DevComponents.Tree.TextMarkup.eHyperlinkUnderlineStyle)">
            <summary>
            Initializes a new instance of the HyperlinkStyle class.
            </summary>
            <param name="textColor"></param>
            <param name="underlineStyle"></param>
        </member>
        <member name="M:DevComponents.Tree.TextMarkup.HyperlinkStyle.#ctor(System.Drawing.Color,System.Drawing.Color,DevComponents.Tree.TextMarkup.eHyperlinkUnderlineStyle)">
            <summary>
            Initializes a new instance of the HyperlinkStyle class.
            </summary>
            <param name="textColor"></param>
            <param name="backColor"></param>
            <param name="underlineStyle"></param>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.HyperlinkStyle.TextColor">
            <summary>
            Gets or sets hyperlink text color.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.HyperlinkStyle.BackColor">
            <summary>
            Gets or sets hyperlink back color.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.HyperlinkStyle.UnderlineStyle">
            <summary>
            Gets or sets the underline style for the hyperlink.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.HyperlinkStyle.IsChanged">
            <summary>
            Gets whether style has been changed from its default state.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.NewLine.IsSizeValid">
            <summary>
            Gets or sets whether element size is valid. When size is not valid element Measure method will be called to validate size.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.NewLine.IsNewLineAfterElement">
            <summary>
            Returns whether layout manager switches to new line after processing this element.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextMarkup.Span.IsBlockElement">
            <summary>
            Returns whether markup element is an block element that always consumes a whole line in layout.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.TextSettings">
            <summary>
            Defines settings for text rendering.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TextSettings.TextMarkupCultureSpecificPadding">
            <summary>
            Get or sets the text-markup padding for text measurement when running on Japanese version of Windows.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.TreeAreaInfo">
            <summary>
            Summary description for TreeAreaInfo.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.TreeAreaInfo.ParentAreaNode">
            <summary>
            Reference to parent node in which child bounds the coordinates are. Can be null if no parent node contains given coordinates.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.TreeAreaInfo.NodeAt">
            <summary>
            Node which contains specified coordinates. Can be null if no node contains coordinates.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.TreeAreaInfo.PreviousNode">
            <summary>
            Previous reference node for given coordinates. If coordinates fall between two nodes this will indicate previous node or null.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.TreeAreaInfo.NextNode">
            <summary>
            Next reference node for given coordinates. If coordinates fall between two nodes this will indicate next node or null.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.TreeGX">
            <summary>
            Summary description for UserControl1.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.TreeGX.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.#ctor">
            <summary>Creates new instance of the class.</summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.InvalidateNode(DevComponents.Tree.Node)">
            <summary>
            Invalidates node bounds on canvas.
            </summary>
            <param name="node">Reference node.</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.ShouldSerializeSelectionBoxBorderColor">
            <summary>
            Indicates whether SelectionBoxBorderColor should be serialized. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.ResetSelectionBoxBorderColor">
            <summary>
            Resets SelectionBoxBorderColor to it's default value. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.ShouldSerializeSelectionBoxFillColor">
            <summary>
            Indicates whether SelectionBoxFillColor should be serialized. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.ResetSelectionBoxFillColor">
            <summary>
            Resets SelectionBoxFillColor to it's default value. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.ShouldSerializeExpandButtonSize">
            <summary>
            Indicates whether SelectionBoxFillColor should be serialized. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.ResetExpandButtonSize">
            <summary>
            Resets SelectionBoxFillColor to it's default value. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.ShouldSerializeExpandBorderColor">
            <summary>
            Indicates whether ExpandBorderColor should be serialized. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.ResetExpandBorderColor">
            <summary>
            Resets ExpandBorderColor to it's default value. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.ShouldSerializeExpandBackColor">
            <summary>
            Indicates whether ExpandBackColor should be serialized. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.ResetExpandBackColor">
            <summary>
            Resets ExpandBackColor to it's default value. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.ShouldSerializeExpandBackColor2">
            <summary>
            Indicates whether ExpandBackColor2 should be serialized. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.ResetExpandBackColor2">
            <summary>
            Resets ExpandBackColor2 to it's default value. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.ShouldSerializeExpandLineColor">
            <summary>
            Indicates whether ExpandLineColor should be serialized. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.ResetExpandLineColor">
            <summary>
            Resets ExpandLineColor to it's default value. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.ShouldSerializeCommandBackColor">
            <summary>
            Indicates whether CommandBackColor should be serialized. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.ResetCommandBackColor">
            <summary>
            Resets CommandBackColor to it's default value. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.ShouldSerializeCommandBackColor2">
            <summary>
            Indicates whether CommandBackColor2 should be serialized. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.ResetCommandBackColor2">
            <summary>
            Resets CommandBackColor2 to it's default value. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.ShouldSerializeCommandForeColor">
            <summary>
            Indicates whether CommandForeColor should be serialized. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.ResetCommandForeColor">
            <summary>
            Resets CommandForeColor to it's default value. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.ShouldSerializeCommandMouseOverBackColor">
            <summary>
            Indicates whether CommandMouseOverBackColor should be serialized. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.ResetCommandMouseOverBackColor">
            <summary>
            Resets CommandMouseOverBackColor to it's default value. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.ShouldSerializeCommandMouseOverBackColor2">
            <summary>
            Indicates whether CommandMouseOverBackColor2 should be serialized. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.ResetCommandMouseOverBackColor2">
            <summary>
            Resets CommandMouseOverBackColor2 to it's default value. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.ShouldSerializeCommandMouseOverForeColor">
            <summary>
            Indicates whether CommandMouseOverForeColor should be serialized. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.ResetCommandMouseOverForeColor">
            <summary>
            Resets CommandMouseOverForeColor to it's default value. Used by windows forms designer design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.GetColor(System.Drawing.Color,DevComponents.Tree.eColorSchemePart)">
            <summary>
            Returns color scheme part color if set otherwise returns color passed in.
            </summary>
            <param name="color">Color.</param>
            <param name="p">Color scheme part.</param>
            <returns>Color.</returns>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.PaintTo(System.Drawing.Graphics,System.Boolean)">
            <summary>
            Paints control to canvas. This method might be used for print output.
            </summary>
            <param name="g">Graphics object to paint control to.</param>
            <param name="background">Indicates whether to paint control background.</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.PaintTo(System.Drawing.Graphics,System.Boolean,System.Drawing.Rectangle)">
            <summary>
            Paints control to canvas. This method might be used for print output.
            </summary>
            <param name="g">Graphics object to paint control to.</param>
            <param name="background">Indicates whether to paint control background.</param>
            <param name="clipRectangle">Indicates clipping rectangle. Nodes outside of clipping rectangle will not be painted. You can pass Rectangle.Empty and all nodes will be painted.</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.SelectNode(DevComponents.Tree.Node,DevComponents.Tree.eTreeAction)">
            <summary>
            Selected specified node.
            </summary>
            <param name="node">Node to select.</param>
            <param name="action">Action that is selecting the node.</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.ValidateSelectedNode">
            <summary>
            Ensures that selected node is visible i.e. that all parents of the selected node are expanded. If not selects the first parent node not expanded.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.EditCell(DevComponents.Tree.Cell,DevComponents.Tree.eTreeAction)">
            <summary>
            Starts editing specified cell, places the cell into the edit mode.
            </summary>
            <param name="cell">Cell to start editing.</param>
            <param name="action">Action that is a cause for the edit.</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.EditCell(DevComponents.Tree.Cell,DevComponents.Tree.eTreeAction,System.String)">
            <summary>
            Starts editing specified cell, places the cell into the edit mode.
            </summary>
            <param name="cell">Cell to start editing.</param>
            <param name="action">Action that is a cause for the edit.</param>
            <param name="initialText">Specifies the text to be edited instead of the text of the cell. Passing the NULL value will edit the text of the cell.</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.EndCellEditing(DevComponents.Tree.eTreeAction)">
            <summary>
            Ends cell editing.
            </summary>
            <param name="action">Specifies which action is cause for end of the editing.</param>
            <returns>Returns true if edits were applied to the cell or false otherwise.</returns>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.CancelCellEdit(DevComponents.Tree.eTreeAction)">
            <summary>
            Cancels the cell editing if it is in progress.
            </summary>
            <param name="action">Specifies which action is cause for canceling of editing.</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.InvokeBeforeNodeInsert(DevComponents.Tree.eTreeAction,DevComponents.Tree.Node,DevComponents.Tree.Node)">
            <summary>
            Raises BeforeNodeInsert event
            </summary>
            <param name="node">Node that is about to be inserted</param>
            <param name="action">Source of the event</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.InvokeAfterNodeInsert(DevComponents.Tree.eTreeAction,DevComponents.Tree.Node,DevComponents.Tree.Node)">
            <summary>
            Raises AfterNodeInsert event
            </summary>
            <param name="node">Node that is inserted</param>
            <param name="action">Source of the event</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.InvokeBeforeNodeRemove(DevComponents.Tree.eTreeAction,DevComponents.Tree.Node,DevComponents.Tree.Node)">
            <summary>
            Raises BeforeNodeRemove event
            </summary>
            <param name="node">Node that is about to be removed</param>
            <param name="action">Source of the event</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.InvokeAfterNodeRemove(DevComponents.Tree.eTreeAction,DevComponents.Tree.Node,DevComponents.Tree.Node)">
            <summary>
            Raises AfterNodeRemove event
            </summary>
            <param name="node">Node that is removed</param>
            <param name="action">Source of the event</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.NodeRemoved(DevComponents.Tree.eTreeAction,DevComponents.Tree.Node,DevComponents.Tree.Node,System.Int32)">
            <summary>
            Called after node has been removed
            </summary>
            <param name="node">Node that is removed</param>
            <param name="action">Source of the event</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.InvokeBeforeNodeDrop(DevComponents.Tree.TreeGXDragDropEventArgs)">
            <summary>
            Invokes BeforeNodeDrop event. If overriden base implementation must be called in order for event to fire.
            </summary>
            <param name="e">Provides information about event</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.InvokeAfterNodeDrop(DevComponents.Tree.TreeGXDragDropEventArgs)">
            <summary>
            Invokes AfterNodeDrop event. If overriden base implementation must be called in order for event to fire.
            </summary>
            <param name="e">Provides information about event</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.InvokeNodeMouseDown(DevComponents.Tree.TreeGXNodeMouseEventArgs)">
            <summary>
            Invokes NodeMouseDown event. If overriden base implementation must be called in order for event to fire.
            </summary>
            <param name="e">Provides information about event</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.InvokeNodeMouseUp(DevComponents.Tree.TreeGXNodeMouseEventArgs)">
            <summary>
            Invokes NodeMouseUp event. If overriden base implementation must be called in order for event to fire.
            </summary>
            <param name="e">Provides information about event</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.InvokeNodeMouseMove(DevComponents.Tree.TreeGXNodeMouseEventArgs)">
            <summary>
            Invokes NodeMouseMove event. If overriden base implementation must be called in order for event to fire.
            </summary>
            <param name="e">Provides information about event</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.InvokeNodeClick(DevComponents.Tree.TreeGXNodeMouseEventArgs)">
            <summary>
            Invokes NodeClick event. If overriden base implementation must be called in order for event to fire.
            </summary>
            <param name="e">Provides information about event</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.InvokeNodeDoubleClick(DevComponents.Tree.TreeGXNodeMouseEventArgs)">
            <summary>
            Invokes NodeDoubleClick event. If overriden base implementation must be called in order for event to fire.
            </summary>
            <param name="e">Provides information about event</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.InvokeNodeMouseEnter(DevComponents.Tree.TreeGXNodeMouseEventArgs)">
            <summary>
            Invokes NodeMouseEnter event.  If overriden base implementation must be called in order for event to fire.
            </summary>
            <param name="e">Provides information about event</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.InvokeNodeMouseLeave(DevComponents.Tree.TreeGXNodeMouseEventArgs)">
            <summary>
            Invokes NodeMouseLeave event.  If overriden base implementation must be called in order for event to fire.
            </summary>
            <param name="e">Provides information about event</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.InvokeNodeMouseHover(DevComponents.Tree.TreeGXNodeMouseEventArgs)">
            <summary>
            Invokes NodeMouseHover event.  If overriden base implementation must be called in order for event to fire.
            </summary>
            <param name="e">Provides information about event</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.Save(System.Xml.XmlDocument)">
            <summary>
            Save nodes to XmlDocument. New Node TreeGX is created and nodes are serialized into it.
            </summary>
            <param name="document">Reference to an instance of XmlDocument object</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.Save(System.String)">
            <summary>
            Saves nodes to a file.
            </summary>
            <param name="fileName">File name to save nodes to.</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.Save(System.IO.Stream)">
            <summary>
            Saves nodes to specified stream.
            </summary>
            <param name="outStream">Stream to save nodes to.</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.Save(System.IO.TextWriter)">
            <summary>
            Saves nodes to specified writer.
            </summary>
            <param name="writer">Writer to save nodes to.</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.Save(System.Xml.XmlWriter)">
            <summary>
            Saves nodes to specified writer.
            </summary>
            <param name="writer">Writer to save nodes to.</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.Load(System.String)">
            <summary>
            Load nodes from file.
            </summary>
            <param name="fileName">File to load nodes from</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.Load(System.IO.Stream)">
            <summary>
            Load nodes from stream.
            </summary>
            <param name="inStream">Stream to load from</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.Load(System.Xml.XmlReader)">
            <summary>
            Load nodes from reader.
            </summary>
            <param name="reader">Reader to load from.</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.Load(System.IO.TextReader)">
            <summary>
            Load nodes from reader.
            </summary>
            <param name="reader">Reader to load from.</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.Load(System.Xml.XmlDocument)">
            <summary>
            Load nodes from an XmlDocument object.
            </summary>
            <param name="document">Document to load Nodes from.</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.Refresh">
            <summary>
            Forces the control to invalidate its client area and immediately redraw itself
            and any child controls. Note however that this method will node do anything if refresh
            is suspended as result of call to BeginUpdate method without corresponding EndUpdate
            call or if SuspendPaint property is set to true.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.SetNodeMapPosition(DevComponents.Tree.Node,DevComponents.Tree.eMapPosition)">
            <summary>
            Sets the node map position when tree is in Map layout mode. The node's position
            can be set only for the sub-root nodes, i.e. nodes that are parented directly to
            top-level root node. Setting map position for any other node does not have any effect.
            </summary>
            <remarks>
            	<para>Note that setting map position explicitly can change the position for other
                nodes that are on the same level as the node that you pass into this method. Since
                Map mode layouts the nodes clock-wise, setting the node position to Near will cause
                all nodes that are in collection <strong>after</strong> the reference node to be
                positioned Near as well.</para>
            	<para>Similarly, setting the node position to Far will cause all nodes that are in
                collection <strong>before</strong> the reference node to be positioned Far as
                well.</para>
            </remarks>
            <param name="node">Sub-root node to set layout position for.</param>
            <param name="position">The position relative to the root node should take</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.BeginUpdate">
            <summary>
            Disables any redrawing of the tree control. To maintain performance while items
            are added one at a time to the control, call the BeginUpdate method. The BeginUpdate
            method prevents the control from painting until the
            <see cref="M:DevComponents.Tree.TreeGX.EndUpdate">EndUpdate</see> method is called.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.EndUpdate">
            <summary>
            Enables the redrawing of the tree view. To maintain performance while items are
            added one at a time to the control, call the <see cref="M:DevComponents.Tree.TreeGX.BeginUpdate">BeginUpdate</see>
            method. The BeginUpdate method prevents the control from painting until the EndUpdate
            method is called.
            </summary>
            <remarks>
            Call to EndUpdate will enable the layout and painting in tree control. If there
            are any pending layouts the EndUpdate will call
            <see cref="M:DevComponents.Tree.TreeGX.RecalcLayout">RecalcLayout</see> method to perform the layout and it will
            repaint the control.
            </remarks>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.EndUpdate(System.Boolean)">
            <summary>
            Enables the redrawing of the tree view. To maintain performance while items are
            added one at a time to the control, call the <see cref="M:DevComponents.Tree.TreeGX.BeginUpdate">BeginUpdate</see>
            method. The BeginUpdate method prevents the control from painting until the EndUpdate
            method is called.
            </summary>
            <param name="performLayoutAndRefresh">Gets or sets whether layout and refresh of control is performed if there are no other update blocks pending.</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.GetNodeAt(System.Drawing.Point)">
            <summary>
            Retrieves the tree node that is at the specified location.
            </summary>
            <returns>The Node at the specified point, in tree view coordinates.</returns>
            <remarks>
            	<para>You can pass the MouseEventArgs.X and MouseEventArgs.Y coordinates of the
                MouseDown event as the x and y parameters.</para>
            </remarks>
            <param name="p">The Point to evaluate and retrieve the node from.</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.GetNodeAt(System.Int32,System.Int32)">
            <summary>
            Retrieves the tree node that is at the specified location.
            </summary>
            <returns>The TreeNode at the specified location, in tree view coordinates.</returns>
            <remarks>
            	<para>You can pass the MouseEventArgs.X and MouseEventArgs.Y coordinates of the
                MouseDown event as the x and y parameters.</para>
            </remarks>
            <param name="x">The X position to evaluate and retrieve the node from.</param>
            <param name="y">The Y position to evaluate and retrieve the node from.</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.GetCellAt(System.Drawing.Point)">
            <summary>
            Retrieves the node cell that is at the specified location.
            </summary>
            <param name="p">The Point to evaluate and retrieve the cell from.</param>
            <returns>The Cell at the specified point, in tree view coordinates.</returns>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.GetCellAt(System.Int32,System.Int32)">
            <summary>
            Retrieves the node cell that is at the specified location.
            </summary>
            <param name="x">The X position to evaluate and retrieve the cell from.</param>
            <param name="y">The Y position to evaluate and retrieve the cell from.</param>
            <returns>The Cell at the specified point, in tree view coordinates.</returns>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.RecalcLayout">
            <summary>Applies any layout changes to the tree control.</summary>
            <remarks>
            Layout will not be performed if BeginUpdate is called. Any calls to the
            RecalcLayout will return without executing requested layout operation.
            </remarks>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.WndProc(System.Windows.Forms.Message@)">
            <summary>
            This member overrides Control.WndProc.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.RecalcLayoutInternal">
            <summary>
            Recalculates layout for the tree control. Not afffected by BeginUpdate call.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.GetTranslationMatrix">
            <summary>
            Returns translation matrix for current Zoom. Translation matrix is used to translate internal node coordinates to screen
            coordinates when Zoom is not set to 1.
            </summary>
            <returns>Returns new instance of Matrix object.</returns>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.GetLayoutRectangle(System.Drawing.Rectangle)">
            <summary>
            Returns layout based rectangle from screen rectangle. Layout based rectangle will be different
            from screen rectangle when Zoom is not set to 1. This method will translate the screen rectangle enlarged by Zoom
            to layout rectangle which does not have Zoom applied.
            </summary>
            <param name="r">Screen rectangle</param>
            <returns>Layout rectangle</returns>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.GetLayoutPosition(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Returns mouse position which is translated if control Zoom is not equal 1
            </summary>
            <param name="e">Mouse event arguments</param>
            <returns>Returns translated position</returns>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.GetLayoutPosition(System.Drawing.Point)">
            <summary>
            Returns mouse position which is translated if control Zoom is not equal 1
            </summary>
            <param name="mousePosition">Mouse position</param>
            <returns>Returns translated position</returns>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.GetLayoutPosition(System.Int32,System.Int32)">
            <summary>
            Returns mouse position which is translated if control Zoom is not equal 1
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <returns></returns>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.GetScreenRectangle(System.Drawing.Rectangle)">
            <summary>
            Returns rectangle translated to screen rectangle if Zoom is not equal 1.
            </summary>
            <param name="r">Rectangle to translate</param>
            <returns>Screen Rectangle</returns>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.GetScreenSize(System.Drawing.Size)">
            <summary>
            Returns size translated to screen dimension if Zoom is not equal 1.
            </summary>
            <param name="s">Size to translate</param>
            <returns>Screen Size</returns>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.InvokeAfterCheck(DevComponents.Tree.TreeGXCellEventArgs)">
            <summary>
            Calls <see cref="M:DevComponents.Tree.TreeGX.OnAfterCheck(DevComponents.Tree.TreeGXCellEventArgs)">OnAfterCheck</see> method which fired
            <see cref="E:DevComponents.Tree.TreeGX.AfterCheck">AfterCheck</see> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.OnAfterCheck(DevComponents.Tree.TreeGXCellEventArgs)">
            <summary>Raises the <see cref="E:DevComponents.Tree.TreeGX.AfterCheck">AfterCheck</see> event.</summary>
            <param name="e">
            A <see cref="T:DevComponents.Tree.TreeGXCellEventArgs">TreeGXEventArgs</see> that contains the event
            data.
            </param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.InvokeCommandButtonClick(DevComponents.Tree.Node,DevComponents.Tree.CommandButtonEventArgs)">
            <summary>
            Invokes CommandButtonClick event.
            </summary>
            <param name="node">Context node.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.OnDeserializeNode(DevComponents.Tree.SerializeNodeEventArgs)">
            <summary>
            Invokes DeserializeNode event.
            </summary>
            <param name="e">Provides more information about the event</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.OnSerializeNode(DevComponents.Tree.SerializeNodeEventArgs)">
            <summary>
            Invokes SerializeNode event.
            </summary>
            <param name="e">Provides more information about the event</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.OnMarkupLinkClick(System.Object,DevComponents.Tree.MarkupLinkClickEventArgs)">
            <summary>
            Invokes the MarkupLinkClick evcent.
            </summary>
            <param name="sender">Sender of the event, usually instance Cell object.</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.InternalDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            Processes drag over event.
            </summary>
            <param name="drgevent">Drag event arguments.</param>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.GetDisplayRootNode">
            <summary>
            Returns the display root node.
            </summary>
            <returns>Instance of node or null if there is no display root node.</returns>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.GetDragNode">
            <summary>
            Returns reference to the node involved in drag-drop operation if any.
            </summary>
            <returns>Reference to node object or null if there is no drag node.</returns>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.BeginInit">
            <summary>
            This member supports the .NET Framework infrastructure and is not intended to be
            used directly from your code.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGX.EndInit">
            <summary>
            This member supports the .NET Framework infrastructure and is not intended to be
            used directly from your code.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.TreeGX.AfterCheck">
            <summary>
            Occurs after the cell check box is checked.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.TreeGX.AfterCollapse">
            <summary>
            Occurs after the tree node is collapsed.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.TreeGX.BeforeCollapse">
            <summary>
            Occurs before the tree node is collapsed.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.TreeGX.AfterExpand">
            <summary>
            Occurs after the tree node is expanded.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.TreeGX.BeforeExpand">
            <summary>
            Occurs before the tree node is expanded.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.TreeGX.CommandButtonClick">
            <summary>
            Occurs when command button on node is clicked.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.TreeGX.BeforeCellEdit">
            <summary>
            Occurs before cell is edited. The order of the cell editing events is as follows:
            BeforeCellEdit, CellEditEnding, AfterCellEdit.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.TreeGX.CellEditEnding">
            <summary>
            Occurs just before the cell editing is ended. The text box for editing is still visible and you can cancel
            the exit out of editing mode at this point. The order of the cell editing events is as follows:
            BeforeCellEdit, CellEditEnding, AfterCellEdit.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.TreeGX.AfterCellEdit">
            <summary>
            Occurs after cell editing has ended and before the new text entered by the user is assigned to the cell. You can abort the edits in this event.
            The order of the cell editing events is as follows:
            BeforeCellEdit, CellEditEnding, AfterCellEdit.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.TreeGX.BeforeNodeSelect">
            <summary>
            Occurs after Node has been selected by user or through the SelectedNode property. Event can be cancelled.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.TreeGX.AfterNodeSelect">
            <summary>
            Occurs after node has been selected by user or through the SelectedNode property.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.TreeGX.BeforeNodeRemove">
            <summary>
            Occurs before node has been removed from its parent.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.TreeGX.AfterNodeRemove">
            <summary>
            Occurs after node has been removed from its parent.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.TreeGX.BeforeNodeInsert">
            <summary>
            Occurs before node is inserted or added as child node to parent node.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.TreeGX.AfterNodeInsert">
            <summary>
            Occurs after node is inserted or added as child node.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.TreeGX.BeforeNodeDrop">
            <summary>
            Occurs before Drag-Drop of a node is completed and gives you information about new parent of the node that is being dragged
            as well as opportunity to cancel the operation.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.TreeGX.AfterNodeDrop">
            <summary>
            Occurs after Drag-Drop of a node is completed. This operation cannot be cancelled.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.TreeGX.NodeMouseDown">
            <summary>
            Occurs when the mouse pointer is over the node and a mouse button is pressed.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.TreeGX.NodeMouseUp">
            <summary>
            Occurs when the mouse pointer is over the node and a mouse button is released.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.TreeGX.NodeMouseMove">
            <summary>
            Occurs when the mouse pointer is moved over the node.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.TreeGX.NodeMouseEnter">
            <summary>
            Occurs when the mouse enters the node.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.TreeGX.NodeMouseLeave">
            <summary>
            Occurs when the mouse leaves the node.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.TreeGX.NodeMouseHover">
            <summary>
            Occurs when the mouse hovers over the node.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.TreeGX.NodeClick">
            <summary>
            Occurs when the node is clicked with left mouse button. If you need to know more information like if another mouse button is clicked etc. use
            NodeMouseDown event.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.TreeGX.NodeDoubleClick">
            <summary>
            Occurs when the node is double-clicked.
            </summary>
        </member>
        <member name="E:DevComponents.Tree.TreeGX.SerializeNode">
            <summary>
            Occurs after an node has been serialized to XmlElement and provides you with opportunity to add any custom data
            to serialized XML. This allows you to serialize any data associated with the node and load it back up in DeserializeNode event.
            </summary>
            <remarks>
            	<para>To serialize custom data to XML definition control creates handle this event and use CustomXmlElement
            property on SerializeNodeEventArgs to add new nodes or set attributes with custom data you want saved.</para>
            </remarks>
        </member>
        <member name="E:DevComponents.Tree.TreeGX.DeserializeNode">
            <summary>
            Occurs after an node has been de-serialized (loaded) from XmlElement and provides you with opportunity to load any custom data
            you have serialized during SerializeItem event.
            </summary>
            <remarks>
            	<para>To de-serialize custom data from XML definition handle this event and use CustomXmlElement
            property on SerializeItemEventArgs to retrive any data you saved in SerializeNode event.</para>
            </remarks>
        </member>
        <member name="E:DevComponents.Tree.TreeGX.MarkupLinkClick">
            <summary>
            Occurs when hyperlink in text-markup is clicked.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.DotNetBarManager">
            <summary>
            Gets or sets the reference to DotNetBar DotNetBarManager component which is used to provide context menu for nodes. This property
            is automatically maintained by TreeGX.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.Zoom">
            <summary>
            Gets or sets zoom factor for the control. Default value is 1. To zoom display of the nodes for 20% set zoom factor to 1.2
            To zoom view 2 times set zoom factor to 2. Value must be greater than 0.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.TreeSize">
            <summary>
            Gets the size of the tree.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.NodeRenderer">
            <summary>
            Gets or sets custom node renderer. You can set this property to your custom renderer. When set the RenderMode should be set to Custom to enable
            your custom renderer. To choose one of the system renderer use RenderMode property. Default value is null.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.RenderMode">
            <summary>
            Gets or sets the render mode used to render all nodes. Default value is eNodeRenderMode.Default which indicates that system default renderer is used.
            Note that if you specify custom renderer you need to set TreeGX.NodeRenderer property to your custom renderer.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.BackgroundStyle">
            <summary>
            Gets the style for the background of the control.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.DiagramLayoutFlow">
            <summary>
            Gets or sets the flow of nodes when Diagram layout is used. Note that this setting applies only to Diagram layout type.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.MapLayoutFlow">
            <summary>
            Gets or sets the flow of nodes when Map layout is used. Note that this setting applies only to Map layout type.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.NodeHorizontalSpacing">
            <summary>
            Gets or sets the horizontal spacing in pixels between nodes. Default value is 32.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.NodeVerticalSpacing">
            <summary>
            Gets or sets the vertical spacing in pixels between nodes. Default value is 16.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.LayoutType">
            <summary>
            Gets or sets the layout type for the nodes.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.DragDropEnabled">
            <summary>
            Gets or sets whether automatic drag and drop is enabled. Default value is true.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.AntiAlias">
            <summary>
            Gets or sets whether anti-alias smoothing is used while painting the tree.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.PathSeparator">
            <summary>
            Gets or sets the delimiter string that the tree node path uses.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.Columns">
            <summary>
            Gets the collection of all column headers that appear in the tree.
            </summary>
            <remarks>
            	<para>By default there are no column headers defined. In that case tree control
                functions as regular tree control where text has unrestricted width.</para>
            	<para>If you want to restrict the horizontal width of the text but not display
                column header you can create one column and set its width to the width desired and
                set its Visible property to false.</para>
            </remarks>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.Styles">
            <summary>
            Gets the collection of all style elements created for the tree.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.CellStyleDefault">
            <summary>
            Gets or sets default style for the node cell.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.CellStyleMouseDown">
            <summary>
            Gets or sets default style for the node cell when mouse is pressed.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.CellStyleMouseOver">
            <summary>
            Gets or sets default style for the node cell when mouse is over the cell.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.CellStyleSelected">
            <summary>
            Gets or sets default style for the node cell when cell is selected.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.CellStyleDisabled">
            <summary>
            Gets or sets default style for the node cell when cell is disabled.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.NodeStyleExpanded">
            <summary>
            Gets or sets default style for the node when node is expanded.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.NodeStyle">
            <summary>
            Gets or sets default style for all nodes where style is not specified
            explicity.
            </summary>
            <value>
            Name of the style assigned or null value indicating that no style is used.
            Default value is null.
            </value>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.NodeStyleSelected">
            <summary>
            Gets or sets style for the node when node is selected. Note that this style is applied to the default node style.
            </summary>
            <value>
            Reference to the style assigned or null value indicating that no style is used.
            Default value is null.
            </value>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.NodeStyleMouseOver">
            <summary>
            Gets or sets style for the node when mouse is over node. Note that this style is applied to the default node style.
            </summary>
            <value>
            Reference to the style assigned or null value indicating that no style is used.
            Default value is null.
            </value>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.Nodes">
            <summary>
            Gets the collection of tree nodes that are assigned to the tree view control.
            </summary>
            <value>
            A <see cref="T:DevComponents.Tree.NodeCollection">NodeCollection</see> that represents the tree nodes
            assigned to the tree control.
            </value>
            <remarks>
            	<para>The Nodes property holds a collection of Node objects, each of which has a
                Nodes property that can contain its own NodeCollection.</para>
            </remarks>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.ColumnStyleNormal">
            <summary>
            Gets or sets the default style class assigned to the column headers.
            </summary>
            <value>
            Reference to the style assigned to the column header.
            </value>
            <remarks>
            When style is not set on ColumnHeader objects then style setting from this property is used instead.
            </remarks>
            <seealso cref="P:DevComponents.Tree.TreeGX.ColumnStyleMouseDown">ColumnStyleMouseDown Property</seealso>
            <seealso cref="P:DevComponents.Tree.TreeGX.ColumnStyleMouseOver">ColumnStyleMouseOver Property</seealso>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.ColumnStyleMouseDown">
            <summary>
            Gets or sets default style class assigned to the column which is applied when mouse
            button is pressed over the header.
            </summary>
            <value>
            Name of the style assigned to the column.
            </value>
            <remarks>
            When style is not set on ColumnHeader objects then style setting from this property is used instead.
            </remarks>
            <seealso cref="P:DevComponents.Tree.TreeGX.ColumnStyleNormal">ColumnStyleNormal Property</seealso>
            <seealso cref="P:DevComponents.Tree.TreeGX.ColumnStyleMouseOver">ColumnStyleMouseOver Property</seealso>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.ColumnStyleMouseOver">
            <summary>
            Gets or sets default style class assigned to the column which is applied when mouse is
            over the column.
            </summary>
            <value>
            Name of the style assigned to the column.
            </value>
            <remarks>
            When style is not set on ColumnHeader objects then style setting from this property is used instead.
            </remarks>
            <seealso cref="P:DevComponents.Tree.TreeGX.ColumnStyleNormal">ColumnStyleNormal Property</seealso>
            <seealso cref="P:DevComponents.Tree.TreeGX.ColumnStyleMouseDown">ColumnStyleMouseDown Property</seealso>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.Headers">
            <summary>
            Gets collection that holds definition of column headers associated with nodes.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.SelectedNode">
            <summary>
            Gets or sets the tree node that is currently selected in the tree view control.
            </summary>
            <remarks>
            	<para>If no <see cref="T:DevComponents.Tree.Node">Node</see> is currently selected, the
                <b>SelectedNode</b> property is a null reference (<b>Nothing</b> in Visual
                Basic).</para>
            </remarks>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.NodeLayout">
            <summary>
            Returns reference to node layout object.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.NodeDisplay">
            <summary>
            Returns reference to node display object.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.IsUpdateSuspended">
            <summary>
            Gets whether layout is suspended for tree control. Layout is suspended after
            call to <see cref="M:DevComponents.Tree.TreeGX.BeginUpdate">BeginUpdate</see> method and it is resumed after the
            call to <see cref="M:DevComponents.Tree.TreeGX.EndUpdate">EndUpdate</see> method.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.SuspendPaint">
            <summary>
            Gets or sets whether paint operations are suspended for the control. You should use this method
            if you need the RecalcLayout operations to proceed but you want to stop painting of the control.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.ImageList">
            <summary>
            Gets or sets the ImageList that contains the Image objects used by the tree nodes.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.ImageIndex">
            <summary>
            Gets or sets the image-list index value of the default image that is displayed by the tree nodes.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.RootConnector">
            <summary>
            Gets or sets the NodeConnector object that describes the type of the connector used for
            displaying connection between root node and it's nested nodes. The root node is defined as
            the top level node i.e. which belongs directly to TreeGX.Nodes collection. Default value is null.
            </summary>
            <remarks>
            You can use
            <a href="TreeGX~DevComponents.Tree.Node~ParentConnector.html">Node.ParentConnector</a>
            property to specify per node connectors.
            </remarks>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.NodesConnector">
            <summary>
            Gets or sets the NodeConnector object that describes the type of the connector used for
            displaying connection between nested nodes. RootConnector property specifies the connector
            between root node and it's imidate nested nodes. This property specifies connector for all other nested levels.
            Default value is null.
            </summary>
            <remarks>
            You can use
            <a href="TreeGX~DevComponents.Tree.Node~ParentConnector.html">Node.ParentConnector</a>
            property to specify per node connectors.
            </remarks>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.LinkConnector">
            <summary>
            Gets or sets the NodeConnector object that describes the type of the connector used for
            displaying connection between linked nodes. This property specifies connector for all linked nodes.
            Default value is null.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.SelectedPathConnector">
            <summary>
            Gets or sets the NodeConnector object that describes the type of the connector used for
            displaying connection between linked nodes. Connector specified here is used to display the connection
            between nodes that are on the path to the selected node. When set you can use it to visually indicate the path to the currently selected node.
            Default value is null.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.CellLayout">
            <summary>
            Gets or sets the layout of the cells inside the node. Default value is Horizontal layout which
            means that cell are positioned horizontally next to each other.
            </summary>
            <remarks>
            You can specify cell layout on each node by using
            <a href="TreeGX~DevComponents.Tree.Node~CellLayout.html">Node.CellLayout</a>
            property.
            </remarks>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.CellPartLayout">
            <summary>
            Gets or sets the layout of the cells inside the node. Default value is Horizontal layout which
            means that cell are positioned horizontally next to each other.
            </summary>
            <remarks>
            You can specify cell layout on each node by using
            <a href="TreeGX~DevComponents.Tree.Node~CellLayout.html">Node.CellLayout</a>
            property.
            </remarks>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.ColorSchemeStyle">
            <summary>
            Gets or sets the color scheme style. Color scheme provides predefined colors based on popular visual styles.
            We recommend that you use "SchemePart" color settings since they maintain consistant look that is
            based on target system color scheme setting.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.ColorScheme">
            <summary>
            Gets the reference to the color scheme object.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.CenterContent">
            <summary>
            Gets or sets whether the content of the control is centered within the bounds of control. Default value is true.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.SelectionBox">
            <summary>
            Gets or sets the value that indicates whether selection box is drawn around the
            selected node. Default value is true. Another way to provide the visual indication that
            node is selected is by using selected state style properties like
            <a href="TreeGX~DevComponents.Tree.TreeGX~NodeStyleSelected.html">NodeStyleSelected</a>
            and
            <a href="TreeGX~DevComponents.Tree.TreeGX~CellStyleSelected.html">CellStyleSelected</a>.
            </summary>
            <seealso cref="P:DevComponents.Tree.TreeGX.CellStyleSelected">CellStyleSelected Property</seealso>
            <seealso cref="P:DevComponents.Tree.TreeGX.NodeStyleSelected">NodeStyleSelected Property</seealso>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.SelectionBoxSize">
            <summary>
            Gets or sets the size/thickness in pixel of the selection box drawn around selected
            node.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.SelectionBoxBorderColor">
            <summary>
            Gets or sets the selection box border color.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.SelectionBoxFillColor">
            <summary>
            Gets or sets the selection box fill color.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.ExpandButtonSize">
            <summary>
            Gets or sets the size of the expand button that is used to expand/collapse node. Default value is 8,8.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.ExpandBorderColor">
            <summary>
            Gets or sets expand button border color. Note that setting ExpandBorderColorSchemePart property will override the value that you set here.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.ExpandBorderColorSchemePart">
            <summary>
            Gets or sets expand button color scheme border color. Setting
            this property overrides the setting of the corresponding ExpandBorderColor property.
            Color scheme colors are automatically managed and are based on current system colors.
            That means if colors on the system change the color scheme will ensure that it's colors
            are changed as well to fit in the color scheme of target system. Set this property to
            <a href="TreeGX~DevComponents.Tree.eColorSchemePart.html">eColorSchemePart.None</a> to
            specify explicit color to use through ExpandBorderColor property.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.ExpandBackColor">
            <summary>
            Gets or sets expand button back color. Note that setting ExpandBackColorSchemePart property will override the value that you set here.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.ExpandBackColorSchemePart">
            <summary>
            Gets or sets expand button color scheme back color. Setting
            this property overrides the setting of the corresponding ExpandBackColor property.
            Color scheme colors are automatically managed and are based on current system colors.
            That means if colors on the system change the color scheme will ensure that it's colors
            are changed as well to fit in the color scheme of target system. Set this property to
            <a href="TreeGX~DevComponents.Tree.eColorSchemePart.html">eColorSchemePart.None</a> to
            specify explicit color to use through ExpandBackColor property.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.ExpandBackColor2">
            <summary>
            Gets or sets expand button target gradientback color. Note that setting ExpandBackColor2SchemePart property will override the value that you set here.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.ExpandBackColor2SchemePart">
            <summary>
            Gets or sets expand button color scheme target gradient back color. Setting
            this property overrides the setting of the corresponding ExpandBackColor2 property.
            Color scheme colors are automatically managed and are based on current system colors.
            That means if colors on the system change the color scheme will ensure that it's colors
            are changed as well to fit in the color scheme of target system. Set this property to
            <a href="TreeGX~DevComponents.Tree.eColorSchemePart.html">eColorSchemePart.None</a> to
            specify explicit color to use through ExpandBackColor2 property.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.ExpandLineColor">
            <summary>
            Gets or sets expand button line color. Note that setting ExpandLineColorSchemePart property will override the value that you set here.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.ExpandLineColorSchemePart">
            <summary>
            Gets or sets expand button color scheme line color. Setting
            this property overrides the setting of the corresponding ExpandLineColor property.
            Color scheme colors are automatically managed and are based on current system colors.
            That means if colors on the system change the color scheme will ensure that it's colors
            are changed as well to fit in the color scheme of target system. Set this property to
            <a href="TreeGX~DevComponents.Tree.eColorSchemePart.html">eColorSchemePart.None</a> to
            specify explicit color to use through ExpandLineColor property.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.ExpandBackColorGradientAngle">
            <summary>
            Gets or sets the expand button background gradient angle.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.ExpandImage">
            <summary>
            Gets or sets the expand button image which is used to indicate that node will be expanded. To use images as expand buttons you also need to set ExpandButtonType=eExpandButtonType.Image.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.ExpandImageCollapse">
            <summary>
            Gets or sets the expand button image which is used to indicate that node will be collapsed. To use images as expand buttons you also need to set ExpandButtonType=eExpandButtonType.Image.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.ExpandButtonType">
            <summary>
            Gets or sets the type of the expand button used to expand/collapse nodes.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.DisplayRootNode">
            <summary>
            Gets or sets the display root node. For example in Map or Diagram layout single node
            is always used as root node for display. Setting this property allows you to use any
            Node as root display node. Default value is Null which means that first node from
            TreeGX.Nodes collection is used as display root node.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.CommandWidth">
            <summary>
            Gets or sets the width of the command button. Default value is 10 pixels.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.CommandBackColor">
            <summary>
            Gets or sets command button back color. Note that setting CommandBackColorSchemePart property will override the value that you set here.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.CommandBackColorSchemePart">
            <summary>
            Gets or sets command button color scheme back color. Setting
            this property overrides the setting of the corresponding CommandBackColor property.
            Color scheme colors are automatically managed and are based on current system colors.
            That means if colors on the system change the color scheme will ensure that it's colors
            are changed as well to fit in the color scheme of target system. Set this property to
            <a href="TreeGX~DevComponents.Tree.eColorSchemePart.html">eColorSchemePart.None</a> to
            specify explicit color to use through CommandBackColor property.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.CommandBackColor2">
            <summary>
            Gets or sets command button target gradient back color. Note that setting CommandBackColor2SchemePart property will override the value that you set here.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.CommandBackColor2SchemePart">
            <summary>
            Gets or sets command button color scheme target gradient back color. Setting
            this property overrides the setting of the corresponding CommandBackColor2 property.
            Color scheme colors are automatically managed and are based on current system colors.
            That means if colors on the system change the color scheme will ensure that it's colors
            are changed as well to fit in the color scheme of target system. Set this property to
            <a href="TreeGX~DevComponents.Tree.eColorSchemePart.html">eColorSchemePart.None</a> to
            specify explicit color to use through CommandBackColor2 property.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.CommandForeColor">
            <summary>
            Gets or sets command button foreground color. Note that setting CommandForeColorSchemePart property will override the value that you set here.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.CommandForeColorSchemePart">
            <summary>
            Gets or sets command button color scheme foreground color. Setting
            this property overrides the setting of the corresponding CommandForeColor property.
            Color scheme colors are automatically managed and are based on current system colors.
            That means if colors on the system change the color scheme will ensure that it's colors
            are changed as well to fit in the color scheme of target system. Set this property to
            <a href="TreeGX~DevComponents.Tree.eColorSchemePart.html">eColorSchemePart.None</a> to
            specify explicit color to use through CommandForeColor property.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.CommandBackColorGradientAngle">
            <summary>
            Gets or sets the command button background gradient angle.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.CommandMouseOverBackColor">
            <summary>
            Gets or sets command button mouse over back color. Note that setting CommandMouseOverBackColorSchemePart property will override the value that you set here.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.CommandMouseOverBackColorSchemePart">
            <summary>
            Gets or sets command button color scheme mouse over back color. Setting
            this property overrides the setting of the corresponding CommandMouseOverBackColor property.
            Color scheme colors are automatically managed and are based on current system colors.
            That means if colors on the system change the color scheme will ensure that it's colors
            are changed as well to fit in the color scheme of target system. Set this property to
            <a href="TreeGX~DevComponents.Tree.eColorSchemePart.html">eColorSchemePart.None</a> to
            specify explicit color to use through CommandMouseOverBackColor property.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.CommandMouseOverBackColor2">
            <summary>
            Gets or sets command button mouse over target gradient back color. Note that setting CommandMouseOverBackColor2SchemePart property will override the value that you set here.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.CommandMouseOverBackColor2SchemePart">
            <summary>
            Gets or sets command button mouse over color scheme target gradient back color. Setting
            this property overrides the setting of the corresponding CommandMouseOverBackColor2 property.
            Color scheme colors are automatically managed and are based on current system colors.
            That means if colors on the system change the color scheme will ensure that it's colors
            are changed as well to fit in the color scheme of target system. Set this property to
            <a href="TreeGX~DevComponents.Tree.eColorSchemePart.html">eColorSchemePart.None</a> to
            specify explicit color to use through CommandMouseOverBackColor2 property.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.CommandMouseOverForeColor">
            <summary>
            Gets or sets command button mouse over foreground color. Note that setting CommandMouseOverForeColorSchemePart property will override the value that you set here.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.CommandMouseOverForeColorSchemePart">
            <summary>
            Gets or sets command button mouse over color scheme foreground color. Setting
            this property overrides the setting of the corresponding CommandMouseOverForeColor property.
            Color scheme colors are automatically managed and are based on current system colors.
            That means if colors on the system change the color scheme will ensure that it's colors
            are changed as well to fit in the color scheme of target system. Set this property to
            <a href="TreeGX~DevComponents.Tree.eColorSchemePart.html">eColorSchemePart.None</a> to
            specify explicit color to use through CommandMouseOverForeColor property.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.CommandMouseOverBackColorGradientAngle">
            <summary>
            Gets or sets the command button mouse over background gradient angle.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.CellEdit">
            <summary>
            Gets or sets a value indicating whether the label text of the node cells can be edited. Default value is false.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.IsCellEditing">
            <summary>
            Returns whether cell editing is in progress.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.EndCellEditingOnLostFocus">
            <summary>
            Gets or sets whether cell editing is completed when control loses input focus. Default value is true.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.IsKeyboardFocusWithin">
            <summary>
            Gets whether keyboard focus is within the control.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.MouseOverNode">
            <summary>
            Returns the reference to the node mouse is currently over or null (Nothing) if mouse is not over any node in tree.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.DefaultCellCursor">
            <summary>
            Specifies the mouse cursor displayed when mouse is over the cell. Default value
            is null which means that default control cursor is used.
            </summary>
            <remarks>
            To specify cursor for each individual cell use
            <a href="TreeGX~DevComponents.Tree.Cell~Cursor.html">Cell.Cursor</a> property.
            </remarks>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.HostedControlCells">
            <summary>
            Gets reference to array of Cell objects that have HostedControl property set.
            </summary>
        </member>
        <member name="P:DevComponents.Tree.TreeGX.IsDragDropInProgress">
            <summary>
            Gets or sets whether drag and drop operation is in progress. This member supports
            the TreeGX infrastructure and is not intended to be used directly from your
            code.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.TreeGXCellCancelEventArgs">
            <summary>
            rovides data for TreeGX Cell events that can be canceled.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.TreeGXCellEventArgs">
            <summary>
            Provides data for TreeGX Cell events.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGXCellEventArgs.#ctor(DevComponents.Tree.eTreeAction,DevComponents.Tree.Cell)">
            <summary>
            Default constructor for event data.
            </summary>
            <param name="action">Type of the action event is raised for.</param>
            <param name="cell">Cell that event is raised for.</param>
        </member>
        <member name="F:DevComponents.Tree.TreeGXCellEventArgs.Action">
            <summary>
            Indicates the type of the action performed on a cell.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.TreeGXCellEventArgs.Cell">
            <summary>
            Indicates the cell that action is peformed on.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGXCellCancelEventArgs.#ctor(DevComponents.Tree.eTreeAction,DevComponents.Tree.Cell)">
            <summary>
            Default constructor for event data.
            </summary>
            <param name="action">Type of the action event is raised for.</param>
            <param name="cell">Cell that event is raised for.</param>
        </member>
        <member name="F:DevComponents.Tree.TreeGXCellCancelEventArgs.Cancel">
            <summary>
            Indicates that event action should be canceled.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.TreeGXDragDropEventArgs">
            <summary>
            Represents event arguments for BeforeNodeDrop and AfterNodeDrop events
            </summary>
        </member>
        <member name="T:DevComponents.Tree.TreeGXNodeCancelEventArgs">
            <summary>
            Provides data for TreeGX Node events that can be cancelled.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.TreeGXNodeEventArgs">
            <summary>
            Provides data for TreeGX Node events.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGXNodeEventArgs.#ctor(DevComponents.Tree.eTreeAction,DevComponents.Tree.Node)">
            <summary>
            Default constructor.
            </summary>
            <param name="action">Default action</param>
            <param name="node">Default node.</param>
        </member>
        <member name="F:DevComponents.Tree.TreeGXNodeEventArgs.Action">
            <summary>
            Indicates the type of the action performed on a node.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.TreeGXNodeEventArgs.Node">
            <summary>
            Indicates the node that action is peformed on.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGXNodeCancelEventArgs.#ctor(DevComponents.Tree.eTreeAction,DevComponents.Tree.Node)">
            <summary>
            Default constructor.
            </summary>
            <param name="action">Default action</param>
            <param name="node">Default node.</param>
        </member>
        <member name="F:DevComponents.Tree.TreeGXNodeCancelEventArgs.Cancel">
            <summary>
            Indicates that event action should be canceled.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.TreeGXDragDropEventArgs.OldParentNode">
            <summary>
            Returns reference to the old parent node.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.TreeGXDragDropEventArgs.NewParentNode">
            <summary>
            Reference to the new parent node if event is not canceled.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.TreeGXDragDropEventArgs.IsCopy">
            <summary>
            Gets or sets whether drag node is being copied instead of moved.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.TreeGXNodeCollectionEventArgs">
            <summary>
            Represents event arguments for NodeCollection based events, like BeforeNodeInsert, AfterNodeInsert etc.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGXNodeCollectionEventArgs.#ctor(DevComponents.Tree.eTreeAction,DevComponents.Tree.Node,DevComponents.Tree.Node)">
            <summary>
            Creates new instance of the class.
            </summary>
            <param name="action">Source action</param>
            <param name="node">Affected node</param>
            <param name="parentNode">Parent of the node if any</param>
        </member>
        <member name="F:DevComponents.Tree.TreeGXNodeCollectionEventArgs.ParentNode">
            <summary>
            Indicates parent node of the affected node. For example if event handled is BeforeNodeInsert parent of the Node is has
            not been set yet so this property provides information on the node that will become parent. If this property returns null
            then node is being added or removed from the main TreeGX.Nodes collection.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.TreeGXNodeMouseEventArgs">
            <summary>
            Represents event arguments for node mouse based events.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.TreeGXNodeMouseEventArgs.Node">
            <summary>
            Gets node affected by mouse action.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.TreeGXNodeMouseEventArgs.Button">
            <summary>
            Gets which mouse button was pressed.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.TreeGXNodeMouseEventArgs.Clicks">
            <summary>
            Gets the number of times the mouse button was pressed and released.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.TreeGXNodeMouseEventArgs.Delta">
            <summary>
            Gets a signed count of the number of detents the mouse wheel has rotated. A detent is one notch of the mouse wheel.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.TreeGXNodeMouseEventArgs.X">
            <summary>
            Gets the x-coordinate of the mouse.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.TreeGXNodeMouseEventArgs.Y">
            <summary>
            Gets the y-coordinate of the mouse.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.TreeGXRootSelector">
            <summary>
            Represents controls that provides user interface to select root node from TreeGX control.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.TreeGXRootSelector.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGXRootSelector.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeGXRootSelector.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.TreeSerializer">
            <summary>
            Provides means for TreeGX serialization.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.TreeSerializer.Save(DevComponents.Tree.TreeGX,System.String)">
            <summary>
            Saves Nodes to specified file.
            </summary>
            <param name="tree">TreeGX to save</param>
            <param name="fileName">Target file name</param>
        </member>
        <member name="M:DevComponents.Tree.TreeSerializer.Save(DevComponents.Tree.TreeGX,System.IO.Stream)">
            <summary>
            Saves Nodes to stream.
            </summary>
            <param name="tree">TreeGX to save</param>
            <param name="outStream">Stream to save nodes to.</param>
        </member>
        <member name="M:DevComponents.Tree.TreeSerializer.Save(DevComponents.Tree.TreeGX,System.IO.TextWriter)">
            <summary>
            Saves Nodes to TextWriter
            </summary>
            <param name="tree">TreeGX to save</param>
            <param name="writer">TextWriter to write nodes to.</param>
        </member>
        <member name="M:DevComponents.Tree.TreeSerializer.Save(DevComponents.Tree.TreeGX,System.Xml.XmlWriter)">
            <summary>
            Saves nodes to XmlWriter.
            </summary>
            <param name="tree">TreeGX to save</param>
            <param name="writer">XmlWriter to write nodes to</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DevComponents.Tree.TreeSerializer.Save(DevComponents.Tree.TreeGX)" -->
        <member name="M:DevComponents.Tree.TreeSerializer.Save(DevComponents.Tree.TreeGX,System.Xml.XmlDocument)">
            <summary>
            Saves TreeGX to an existing XmlDocument. New node TreeGX is created in document and Nodes are serialized into it.
            </summary>
            <param name="tree">TreeGX to serialize</param>
            <param name="document">XmlDocument instance.</param>
        </member>
        <member name="M:DevComponents.Tree.TreeSerializer.Save(DevComponents.Tree.TreeGX,System.Xml.XmlElement)">
            <summary>
            Serializes TreeGX object to XmlElement object.
            </summary>
            <param name="tree">Instance of TreeGX to serialize.</param>
            <param name="parent">XmlElement to serialize to.</param>
        </member>
        <member name="M:DevComponents.Tree.TreeSerializer.Save(DevComponents.Tree.Node,DevComponents.Tree.NodeSerializationContext)">
            <summary>
            Serializes Node and all child nodes to XmlElement object.
            </summary>
            <param name="node">Node to serialize.</param>
            <param name="context">Provides serialization context.</param>
        </member>
        <member name="M:DevComponents.Tree.TreeSerializer.Load(DevComponents.Tree.TreeGX,System.String)">
            <summary>
            Load TreeGX Nodes from file.
            </summary>
            <param name="tree">Reference to TreeGX to populate</param>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:DevComponents.Tree.TreeSerializer.Load(DevComponents.Tree.TreeGX,System.IO.Stream)">
            <summary>
            Load TreeGX Nodes from stream.
            </summary>
            <param name="tree">Reference to TreeGX to populate</param>
            <param name="inStream">Reference to stream</param>
        </member>
        <member name="M:DevComponents.Tree.TreeSerializer.Load(DevComponents.Tree.TreeGX,System.IO.TextReader)">
            <summary>
            Load TreeGX Nodes from reader.
            </summary>
            <param name="tree">Reference to TreeGX to populate</param>
            <param name="reader">Reference to reader.</param>
        </member>
        <member name="M:DevComponents.Tree.TreeSerializer.Load(DevComponents.Tree.TreeGX,System.Xml.XmlReader)">
            <summary>
            Load TreeGX Nodes from reader.
            </summary>
            <param name="tree">Reference to TreeGX to populate</param>
            <param name="reader">Reference to reader.</param>
        </member>
        <member name="M:DevComponents.Tree.TreeSerializer.Load(DevComponents.Tree.TreeGX,System.Xml.XmlDocument)">
            <summary>
            Load TreeGX from XmlDocument that was created by Save method.
            </summary>
            <param name="tree">Tree Control to load</param>
            <param name="document">XmlDocument to load control from</param>
        </member>
        <member name="M:DevComponents.Tree.TreeSerializer.Load(DevComponents.Tree.TreeGX,System.Xml.XmlElement)">
            <summary>
            Load nodes from XmlElement.
            </summary>
            <param name="tree">Reference to TreeGX to be populated.</param>
            <param name="parent">XmlElement that tree was serialized to.</param>
        </member>
        <member name="M:DevComponents.Tree.TreeSerializer.LoadNode(DevComponents.Tree.Node,DevComponents.Tree.NodeSerializationContext)">
            <summary>
            Load single node and it's child nodes if any.
            </summary>
            <param name="nodeToLoad">New instance of node that is populated with loaded data.</param>
            <param name="context">Provides deserialization context.</param>
        </member>
        <member name="T:DevComponents.Tree.NodeSerializationContext">
            <summary>
            Provides context information for serialization.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.NodeSerializationContext.RefXmlElement">
            <summary>
            Gets or sets reference to context parent XmlElement when serializing or actual Node element when deserializing.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.NodeSerializationContext.HasSerializeNodeHandlers">
            <summary>
            Gets or sets whether SerializeNode event handler has been defined and whether event should be fired.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.NodeSerializationContext.HasDeserializeNodeHandlers">
            <summary>
            Gets or sets whether DeserializeNode event handler has been defined and whether event should be fired.
            </summary>
        </member>
        <member name="F:DevComponents.Tree.NodeSerializationContext.TreeGX">
            <summary>
            Provides access to serializer.
            </summary>
        </member>
        <member name="T:DevComponents.Tree.Utilites">
            <summary>
            Represents class for static tree utilities.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.Utilites.InitializeTree(DevComponents.Tree.TreeGX)">
            <summary>
            Initializes control with default settings for connectors and nodes.
            </summary>
            <param name="tree">Control to initialize.</param>
        </member>
        <member name="M:DevComponents.Tree.Utilites.InitializeTree(DevComponents.Tree.TreeGX,DevComponents.Tree.ComponentFactory)">
            <summary>
            Initializes control with default settings for connectors and nodes.
            </summary>
            <param name="tree">Control to initialize.</param>
            <param name="factory">Factory to use to create new instances of objects.</param>
        </member>
        <member name="M:DevComponents.Tree.Utilites.CreateStyle(DevComponents.Tree.ComponentFactory,System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Drawing.Color)">
            <summary>
            Creates new style and adds it to styles collection
            </summary>
            <param name="tree">Tree to assign style to</param>
            <param name="factory">Style factory</param>
            <param name="backColor"></param>
            <param name="backColor2"></param>
            <param name="gradientAngle"></param>
            <param name="textColor"></param>
        </member>
        <member name="M:DevComponents.Tree.Utilites.FindNodeForControl(DevComponents.Tree.TreeGX,System.Windows.Forms.Control)">
            <summary>
            Returns reference to a node that is hosting given control.
            </summary>
            <param name="tree">Reference to the TreeGX control instance</param>
            <param name="c">Control instance to look for</param>
            <returns>Reference to a node hosting control or null if node could not be found</returns>
        </member>
        <member name="T:DevComponents.Tree.ComponentFactory">
            <summary>
            Represents internal component factory with design-time support.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ComponentFactory.#ctor(System.ComponentModel.Design.IDesignerHost)">
            <summary>
            Creates new instace of the class.
            </summary>
            <param name="designer">Reference to DesignerHost to use for creation of new components.</param>
        </member>
        <member name="M:DevComponents.Tree.ComponentFactory.#ctor">
            <summary>
            Creates new instace of the class.
            </summary>
        </member>
        <member name="M:DevComponents.Tree.ComponentFactory.CreateComponent(System.Type)">
            <summary>
            Creates component and returns reference to the new instace.
            </summary>
            <param name="type">Type that identifies component to create.</param>
            <returns>New instace of the component.</returns>
        </member>
        <member name="T:DevComponents.Tree.WinApi">
            <summary>
            Defines Windows API function access.
            </summary>
        </member>
    </members>
</doc>
